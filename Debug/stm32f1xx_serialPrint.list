
stm32f1xx_serialPrint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046ec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08004800  08004800  00014800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bc8  08004bc8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08004bc8  08004bc8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bc8  08004bc8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004bc8  08004bc8  00014bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bd0  08004bd0  00014bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08004bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  200001e0  08004db4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08004db4  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c0b  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028cf  00000000  00000000  00037e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000728  00000000  00000000  0003a6e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000650  00000000  00000000  0003ae10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018e9c  00000000  00000000  0003b460  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000085db  00000000  00000000  000542fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000793cf  00000000  00000000  0005c8d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d5ca6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b8c  00000000  00000000  000d5d24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080047e4 	.word	0x080047e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080047e4 	.word	0x080047e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <_ZN5PrintC1Ev>:
using namespace std;

/**
 *  Constructor
 */
Print::Print()
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <_ZN5PrintC1Ev+0x1c>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	601a      	str	r2, [r3, #0]
{

}
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	08004900 	.word	0x08004900

08000aa8 <_ZN5Print5printEjPKcz>:
 * @param format contiene una cadena de formato que sigue las mismas
 *        especificaciones que el formato en printf
 * @note  la funcion que utiliza para el formato es snprintf
 */
void Print::print( size_t size_buffer, const char * format, ... )
{
 8000aa8:	b40c      	push	{r2, r3}
 8000aaa:	b5b0      	push	{r4, r5, r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	6039      	str	r1, [r7, #0]
    if ( 0 < vsnprintf( string, size_buffer, format, argp ) )
    {
        write( (uint8_t*) string );
    }

    va_end( argp );
 8000ab4:	466b      	mov	r3, sp
 8000ab6:	461d      	mov	r5, r3
    char string[size_buffer];
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	1e58      	subs	r0, r3, #1
 8000abc:	6178      	str	r0, [r7, #20]
 8000abe:	4603      	mov	r3, r0
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f04f 0200 	mov.w	r2, #0
 8000ac8:	f04f 0300 	mov.w	r3, #0
 8000acc:	f04f 0400 	mov.w	r4, #0
 8000ad0:	00d4      	lsls	r4, r2, #3
 8000ad2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000ad6:	00cb      	lsls	r3, r1, #3
 8000ad8:	4603      	mov	r3, r0
 8000ada:	3301      	adds	r3, #1
 8000adc:	4619      	mov	r1, r3
 8000ade:	f04f 0200 	mov.w	r2, #0
 8000ae2:	f04f 0300 	mov.w	r3, #0
 8000ae6:	f04f 0400 	mov.w	r4, #0
 8000aea:	00d4      	lsls	r4, r2, #3
 8000aec:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000af0:	00cb      	lsls	r3, r1, #3
 8000af2:	4603      	mov	r3, r0
 8000af4:	3301      	adds	r3, #1
 8000af6:	3307      	adds	r3, #7
 8000af8:	08db      	lsrs	r3, r3, #3
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	ebad 0d03 	sub.w	sp, sp, r3
 8000b00:	466b      	mov	r3, sp
 8000b02:	3300      	adds	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
    va_start( argp, format );
 8000b06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b0a:	60fb      	str	r3, [r7, #12]
    if ( 0 < vsnprintf( string, size_buffer, format, argp ) )
 8000b0c:	6938      	ldr	r0, [r7, #16]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b12:	6839      	ldr	r1, [r7, #0]
 8000b14:	f002 fb5a 	bl	80031cc <vsniprintf>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	bfcc      	ite	gt
 8000b1e:	2301      	movgt	r3, #1
 8000b20:	2300      	movle	r3, #0
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d006      	beq.n	8000b36 <_ZN5Print5printEjPKcz+0x8e>
        write( (uint8_t*) string );
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4611      	mov	r1, r2
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	4798      	blx	r3
 8000b36:	46ad      	mov	sp, r5
}
 8000b38:	bf00      	nop
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000b42:	b002      	add	sp, #8
 8000b44:	4770      	bx	lr

08000b46 <_ZN5Print5printEPKcz>:
 * @param format  contiene una cadena de formato que sigue las mismas
 *        especificaciones que el formato en printf
 * @note  la funcion que utiliza para el formato es sprintf
 */
void Print::print( const char * format, ... )
{
 8000b46:	b40e      	push	{r1, r2, r3}
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b0b7      	sub	sp, #220	; 0xdc
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
     un número variable de argumentos. */
    va_list argp;

    /* va_start es una macro que acepta dos argumentos, un va_list y el nombre
     de la variable que precede directamente a la elipsis ("..."). */
    va_start( argp, format );
 8000b50:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000b54:	60fb      	str	r3, [r7, #12]

    if ( 0 < vsprintf( string, format, argp ) ) // build string
 8000b56:	f107 0310 	add.w	r3, r7, #16
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8000b60:	4618      	mov	r0, r3
 8000b62:	f002 fb57 	bl	8003214 <vsiprintf>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	bfcc      	ite	gt
 8000b6c:	2301      	movgt	r3, #1
 8000b6e:	2300      	movle	r3, #0
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d007      	beq.n	8000b86 <_ZN5Print5printEPKcz+0x40>
    {
        write( (uint8_t*) string );  // funcion virtual
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f107 0210 	add.w	r2, r7, #16
 8000b80:	4611      	mov	r1, r2
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	4798      	blx	r3
    }

    va_end( argp );

}
 8000b86:	bf00      	nop
 8000b88:	37dc      	adds	r7, #220	; 0xdc
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b90:	b003      	add	sp, #12
 8000b92:	4770      	bx	lr

08000b94 <_ZN5Print5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
/**
 *
 * @param string_in texto de tipo string a transmitir
 */
void Print::print( string string_in )
{
 8000b94:	b5b0      	push	{r4, r5, r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
    char text[string_in.length() + 1];

    /* convierte string a array de tipo char */
    strcpy( text, string_in.c_str() );

    write( (uint8_t*) text );
 8000b9e:	466b      	mov	r3, sp
 8000ba0:	461d      	mov	r5, r3
    char text[string_in.length() + 1];
 8000ba2:	6838      	ldr	r0, [r7, #0]
 8000ba4:	f001 fc75 	bl	8002492 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	4618      	mov	r0, r3
 8000bac:	60f8      	str	r0, [r7, #12]
 8000bae:	4603      	mov	r3, r0
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f04f 0200 	mov.w	r2, #0
 8000bb8:	f04f 0300 	mov.w	r3, #0
 8000bbc:	f04f 0400 	mov.w	r4, #0
 8000bc0:	00d4      	lsls	r4, r2, #3
 8000bc2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000bc6:	00cb      	lsls	r3, r1, #3
 8000bc8:	4603      	mov	r3, r0
 8000bca:	3301      	adds	r3, #1
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f04f 0200 	mov.w	r2, #0
 8000bd2:	f04f 0300 	mov.w	r3, #0
 8000bd6:	f04f 0400 	mov.w	r4, #0
 8000bda:	00d4      	lsls	r4, r2, #3
 8000bdc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000be0:	00cb      	lsls	r3, r1, #3
 8000be2:	4603      	mov	r3, r0
 8000be4:	3301      	adds	r3, #1
 8000be6:	3307      	adds	r3, #7
 8000be8:	08db      	lsrs	r3, r3, #3
 8000bea:	00db      	lsls	r3, r3, #3
 8000bec:	ebad 0d03 	sub.w	sp, sp, r3
 8000bf0:	466b      	mov	r3, sp
 8000bf2:	3300      	adds	r3, #0
 8000bf4:	60bb      	str	r3, [r7, #8]
    strcpy( text, string_in.c_str() );
 8000bf6:	68bc      	ldr	r4, [r7, #8]
 8000bf8:	6838      	ldr	r0, [r7, #0]
 8000bfa:	f001 fc4c 	bl	8002496 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4619      	mov	r1, r3
 8000c02:	4620      	mov	r0, r4
 8000c04:	f002 faae 	bl	8003164 <strcpy>
    write( (uint8_t*) text );
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	4611      	mov	r1, r2
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	4798      	blx	r3
 8000c16:	46ad      	mov	sp, r5

}
 8000c18:	bf00      	nop
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bdb0      	pop	{r4, r5, r7, pc}

08000c20 <_ZN5Print5printEPc>:
/**
 *
 * @param text_in cadena de texto a transmitir
 */
void Print::print( char * text_in )
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]

    write( (uint8_t*) text_in );
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	6839      	ldr	r1, [r7, #0]
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	4798      	blx	r3

}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <_ZN5Print5printEh>:
/**
 *
 * @param text_in caracter o byte a transmitir
 */
void Print::print( uint8_t byte_in )
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	460b      	mov	r3, r1
 8000c48:	70fb      	strb	r3, [r7, #3]

    write( &byte_in );
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	1cfa      	adds	r2, r7, #3
 8000c52:	4611      	mov	r1, r2
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	4798      	blx	r3

}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <_ZN5Print5printEPh>:
/**
 *
 * @param text_in dato de tipo uint8_t a transmitir
 */
void Print::print( uint8_t * bytes_in )
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]

    write( bytes_in );
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	6839      	ldr	r1, [r7, #0]
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	4798      	blx	r3

}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <_ZN6SerialC1EP20__UART_HandleTypeDef>:
 */

#include "Serial.h"


Serial::Serial(UART_HandleTypeDef * uartx)
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fefb 	bl	8000a88 <_ZN5PrintC1Ev>
 8000c92:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <_ZN6SerialC1EP20__UART_HandleTypeDef+0x28>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	601a      	str	r2, [r3, #0]
{
    // TODO Auto-generated constructor stub
    uart = uartx;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	683a      	ldr	r2, [r7, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
}
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	0800490c 	.word	0x0800490c

08000cac <_ZN6Serial5writeEPh>:
        }
    }
}

void Serial::write( uint8_t  *text )
{
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]

    HAL_UART_Transmit( uart, text,strlen((char *)text), 1000 );
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685c      	ldr	r4, [r3, #4]
 8000cba:	6838      	ldr	r0, [r7, #0]
 8000cbc:	f7ff fa48 	bl	8000150 <strlen>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc8:	6839      	ldr	r1, [r7, #0]
 8000cca:	4620      	mov	r0, r4
 8000ccc:	f001 f9df 	bl	800208e <HAL_UART_Transmit>
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd90      	pop	{r4, r7, pc}

08000cd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd8:	b5b0      	push	{r4, r5, r7, lr}
 8000cda:	b09e      	sub	sp, #120	; 0x78
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cde:	f000 faab 	bl	8001238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce2:	f000 f887 	bl	8000df4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce6:	f000 f903 	bl	8000ef0 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8000cea:	f000 f8d3 	bl	8000e94 <_ZL19MX_USART1_UART_Initv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while ( 1 )
    {
        float d = 13.345;
 8000cee:	4b3a      	ldr	r3, [pc, #232]	; (8000dd8 <main+0x100>)
 8000cf0:	677b      	str	r3, [r7, #116]	; 0x74

        serial.print( "imprimiendo texto y un float %6.3f \r\n", d );
 8000cf2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000cf4:	f7ff fb98 	bl	8000428 <__aeabi_f2d>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	460c      	mov	r4, r1
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4623      	mov	r3, r4
 8000d00:	4936      	ldr	r1, [pc, #216]	; (8000ddc <main+0x104>)
 8000d02:	4837      	ldr	r0, [pc, #220]	; (8000de0 <main+0x108>)
 8000d04:	f7ff ff1f 	bl	8000b46 <_ZN5Print5printEPKcz>

        serial.print(100, "imprimiendo texto de la forma snprintf() con "
 8000d08:	4a36      	ldr	r2, [pc, #216]	; (8000de4 <main+0x10c>)
 8000d0a:	2164      	movs	r1, #100	; 0x64
 8000d0c:	4834      	ldr	r0, [pc, #208]	; (8000de0 <main+0x108>)
 8000d0e:	f7ff fecb 	bl	8000aa8 <_ZN5Print5printEjPKcz>
                "reserva de memoria de 100 bytes\r\n");

        string texto = "imprimiendo texto con variable de tipo string";
 8000d12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d16:	4618      	mov	r0, r3
 8000d18:	f001 fb79 	bl	800240e <_ZNSaIcEC1Ev>
 8000d1c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000d20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d24:	4930      	ldr	r1, [pc, #192]	; (8000de8 <main+0x110>)
 8000d26:	4618      	mov	r0, r3
 8000d28:	f001 fc0e 	bl	8002548 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000d2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d30:	4618      	mov	r0, r3
 8000d32:	f001 fb6d 	bl	8002410 <_ZNSaIcED1Ev>
        serial.print( texto );
 8000d36:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000d3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f001 fbcf 	bl	80024e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8000d46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4824      	ldr	r0, [pc, #144]	; (8000de0 <main+0x108>)
 8000d4e:	f7ff ff21 	bl	8000b94 <_ZN5Print5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000d52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d56:	4618      	mov	r0, r3
 8000d58:	f001 fb95 	bl	8002486 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

        char text[] = "imprimiendo cadena de texto con variable de tipo char";
 8000d5c:	4b23      	ldr	r3, [pc, #140]	; (8000dec <main+0x114>)
 8000d5e:	463c      	mov	r4, r7
 8000d60:	461d      	mov	r5, r3
 8000d62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d6e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d72:	6020      	str	r0, [r4, #0]
 8000d74:	3404      	adds	r4, #4
 8000d76:	8021      	strh	r1, [r4, #0]
        serial.print( text );
 8000d78:	463b      	mov	r3, r7
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4818      	ldr	r0, [pc, #96]	; (8000de0 <main+0x108>)
 8000d7e:	f7ff ff4f 	bl	8000c20 <_ZN5Print5printEPc>

        serial.print( 's' ); //imprime un caracter
 8000d82:	2173      	movs	r1, #115	; 0x73
 8000d84:	4816      	ldr	r0, [pc, #88]	; (8000de0 <main+0x108>)
 8000d86:	f7ff ff5a 	bl	8000c3e <_ZN5Print5printEh>

        serial.print( 0x5f );  // imprime dato de 8 bits
 8000d8a:	215f      	movs	r1, #95	; 0x5f
 8000d8c:	4814      	ldr	r0, [pc, #80]	; (8000de0 <main+0x108>)
 8000d8e:	f7ff ff56 	bl	8000c3e <_ZN5Print5printEh>

        uint8_t datos[] = {0x3f,0x5a,0x2c};
 8000d92:	4a17      	ldr	r2, [pc, #92]	; (8000df0 <main+0x118>)
 8000d94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d98:	6812      	ldr	r2, [r2, #0]
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	8019      	strh	r1, [r3, #0]
 8000d9e:	3302      	adds	r3, #2
 8000da0:	0c12      	lsrs	r2, r2, #16
 8000da2:	701a      	strb	r2, [r3, #0]
        serial.print( datos );
 8000da4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000da8:	4619      	mov	r1, r3
 8000daa:	480d      	ldr	r0, [pc, #52]	; (8000de0 <main+0x108>)
 8000dac:	f7ff ff58 	bl	8000c60 <_ZN5Print5printEPh>

        char letra = 'h';
 8000db0:	2368      	movs	r3, #104	; 0x68
 8000db2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        serial.print( letra );
 8000db6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4808      	ldr	r0, [pc, #32]	; (8000de0 <main+0x108>)
 8000dbe:	f7ff ff3e 	bl	8000c3e <_ZN5Print5printEh>

        HAL_Delay( 1000 );
 8000dc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dc6:	f000 fa99 	bl	80012fc <HAL_Delay>
        string texto = "imprimiendo texto con variable de tipo string";
 8000dca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f001 fb59 	bl	8002486 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    }
 8000dd4:	e78b      	b.n	8000cee <main+0x16>
 8000dd6:	bf00      	nop
 8000dd8:	4155851f 	.word	0x4155851f
 8000ddc:	08004800 	.word	0x08004800
 8000de0:	2000023c 	.word	0x2000023c
 8000de4:	08004828 	.word	0x08004828
 8000de8:	08004878 	.word	0x08004878
 8000dec:	080048a8 	.word	0x080048a8
 8000df0:	080048e0 	.word	0x080048e0

08000df4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b090      	sub	sp, #64	; 0x40
 8000df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	f107 0318 	add.w	r3, r7, #24
 8000dfe:	2228      	movs	r2, #40	; 0x28
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 fc5c 	bl	80026c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e16:	2301      	movs	r3, #1
 8000e18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e24:	2301      	movs	r3, #1
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e32:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e38:	f107 0318 	add.w	r3, r7, #24
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 fcbd 	bl	80017bc <HAL_RCC_OscConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	bf14      	ite	ne
 8000e48:	2301      	movne	r3, #1
 8000e4a:	2300      	moveq	r3, #0
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8000e52:	f000 f86f 	bl	8000f34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e56:	230f      	movs	r3, #15
 8000e58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2102      	movs	r1, #2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 ff23 	bl	8001cbc <HAL_RCC_ClockConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	bf14      	ite	ne
 8000e7c:	2301      	movne	r3, #1
 8000e7e:	2300      	moveq	r3, #0
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8000e86:	f000 f855 	bl	8000f34 <Error_Handler>
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	3740      	adds	r7, #64	; 0x40
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e98:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000e9a:	4a14      	ldr	r2, [pc, #80]	; (8000eec <_ZL19MX_USART1_UART_Initv+0x58>)
 8000e9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ea0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ea4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000eac:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000eba:	220c      	movs	r2, #12
 8000ebc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eca:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ecc:	f001 f892 	bl	8001ff4 <HAL_UART_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	bf14      	ite	ne
 8000ed6:	2301      	movne	r3, #1
 8000ed8:	2300      	moveq	r3, #0
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000ee0:	f000 f828 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	200001fc 	.word	0x200001fc
 8000eec:	40013800 	.word	0x40013800

08000ef0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <_ZL12MX_GPIO_Initv+0x40>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <_ZL12MX_GPIO_Initv+0x40>)
 8000efc:	f043 0320 	orr.w	r3, r3, #32
 8000f00:	6193      	str	r3, [r2, #24]
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <_ZL12MX_GPIO_Initv+0x40>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f003 0320 	and.w	r3, r3, #32
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <_ZL12MX_GPIO_Initv+0x40>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <_ZL12MX_GPIO_Initv+0x40>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	6193      	str	r3, [r2, #24]
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <_ZL12MX_GPIO_Initv+0x40>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]

}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	40021000 	.word	0x40021000

08000f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <_Z41__static_initialization_and_destruction_0ii>:
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d108      	bne.n	8000f62 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d103      	bne.n	8000f62 <_Z41__static_initialization_and_destruction_0ii+0x22>
Serial serial(&huart1);
 8000f5a:	4904      	ldr	r1, [pc, #16]	; (8000f6c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000f5e:	f7ff fe8f 	bl	8000c80 <_ZN6SerialC1EP20__UART_HandleTypeDef>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200001fc 	.word	0x200001fc
 8000f70:	2000023c 	.word	0x2000023c

08000f74 <_GLOBAL__sub_I_huart1>:
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f7ff ffdf 	bl	8000f40 <_Z41__static_initialization_and_destruction_0ii>
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <HAL_MspInit+0x5c>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <HAL_MspInit+0x5c>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6193      	str	r3, [r2, #24]
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_MspInit+0x5c>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <HAL_MspInit+0x5c>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <HAL_MspInit+0x5c>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fac:	61d3      	str	r3, [r2, #28]
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <HAL_MspInit+0x5c>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_MspInit+0x60>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_MspInit+0x60>)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40010000 	.word	0x40010000

08000fe8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <HAL_UART_MspInit+0x8c>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d131      	bne.n	800106c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <HAL_UART_MspInit+0x90>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a1a      	ldr	r2, [pc, #104]	; (8001078 <HAL_UART_MspInit+0x90>)
 800100e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001012:	6193      	str	r3, [r2, #24]
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <HAL_UART_MspInit+0x90>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	4b15      	ldr	r3, [pc, #84]	; (8001078 <HAL_UART_MspInit+0x90>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4a14      	ldr	r2, [pc, #80]	; (8001078 <HAL_UART_MspInit+0x90>)
 8001026:	f043 0304 	orr.w	r3, r3, #4
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_UART_MspInit+0x90>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800103c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001046:	f107 0310 	add.w	r3, r7, #16
 800104a:	4619      	mov	r1, r3
 800104c:	480b      	ldr	r0, [pc, #44]	; (800107c <HAL_UART_MspInit+0x94>)
 800104e:	f000 fa5b 	bl	8001508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001056:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	4619      	mov	r1, r3
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <HAL_UART_MspInit+0x94>)
 8001068:	f000 fa4e 	bl	8001508 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800106c:	bf00      	nop
 800106e:	3720      	adds	r7, #32
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40013800 	.word	0x40013800
 8001078:	40021000 	.word	0x40021000
 800107c:	40010800 	.word	0x40010800

08001080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <HardFault_Handler+0x4>

08001092 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001096:	e7fe      	b.n	8001096 <MemManage_Handler+0x4>

08001098 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109c:	e7fe      	b.n	800109c <BusFault_Handler+0x4>

0800109e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <UsageFault_Handler+0x4>

080010a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010cc:	f000 f8fa 	bl	80012c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
	return 1;
 80010d8:	2301      	movs	r3, #1
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <_kill>:

int _kill(int pid, int sig)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010ec:	f001 fa7c 	bl	80025e8 <__errno>
 80010f0:	4602      	mov	r2, r0
 80010f2:	2316      	movs	r3, #22
 80010f4:	6013      	str	r3, [r2, #0]
	return -1;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <_exit>:

void _exit (int status)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800110a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ffe7 	bl	80010e2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001114:	e7fe      	b.n	8001114 <_exit+0x12>
	...

08001118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001120:	4a14      	ldr	r2, [pc, #80]	; (8001174 <_sbrk+0x5c>)
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <_sbrk+0x60>)
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d102      	bne.n	800113a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <_sbrk+0x64>)
 8001136:	4a12      	ldr	r2, [pc, #72]	; (8001180 <_sbrk+0x68>)
 8001138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	429a      	cmp	r2, r3
 8001146:	d207      	bcs.n	8001158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001148:	f001 fa4e 	bl	80025e8 <__errno>
 800114c:	4602      	mov	r2, r0
 800114e:	230c      	movs	r3, #12
 8001150:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001156:	e009      	b.n	800116c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <_sbrk+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <_sbrk+0x64>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	4a05      	ldr	r2, [pc, #20]	; (800117c <_sbrk+0x64>)
 8001168:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800116a:	68fb      	ldr	r3, [r7, #12]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20005000 	.word	0x20005000
 8001178:	00000400 	.word	0x00000400
 800117c:	20000244 	.word	0x20000244
 8001180:	20000260 	.word	0x20000260

08001184 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001188:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <SystemInit+0x5c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <SystemInit+0x5c>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <SystemInit+0x5c>)
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	4911      	ldr	r1, [pc, #68]	; (80011e0 <SystemInit+0x5c>)
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <SystemInit+0x60>)
 800119c:	4013      	ands	r3, r2
 800119e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <SystemInit+0x5c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <SystemInit+0x5c>)
 80011a6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80011aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ae:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <SystemInit+0x5c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <SystemInit+0x5c>)
 80011b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ba:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <SystemInit+0x5c>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <SystemInit+0x5c>)
 80011c2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80011c6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <SystemInit+0x5c>)
 80011ca:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80011ce:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <SystemInit+0x64>)
 80011d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011d6:	609a      	str	r2, [r3, #8]
#endif 
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	40021000 	.word	0x40021000
 80011e4:	f8ff0000 	.word	0xf8ff0000
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80011ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80011ee:	e003      	b.n	80011f8 <LoopCopyDataInit>

080011f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80011f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80011f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80011f6:	3104      	adds	r1, #4

080011f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80011f8:	480a      	ldr	r0, [pc, #40]	; (8001224 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80011fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80011fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001200:	d3f6      	bcc.n	80011f0 <CopyDataInit>
  ldr r2, =_sbss
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001204:	e002      	b.n	800120c <LoopFillZerobss>

08001206 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001208:	f842 3b04 	str.w	r3, [r2], #4

0800120c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800120e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001210:	d3f9      	bcc.n	8001206 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001212:	f7ff ffb7 	bl	8001184 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001216:	f001 f9ed 	bl	80025f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800121a:	f7ff fd5d 	bl	8000cd8 <main>
  bx lr
 800121e:	4770      	bx	lr
  ldr r3, =_sidata
 8001220:	08004bd4 	.word	0x08004bd4
  ldr r0, =_sdata
 8001224:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001228:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 800122c:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8001230:	2000025c 	.word	0x2000025c

08001234 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001234:	e7fe      	b.n	8001234 <ADC1_2_IRQHandler>
	...

08001238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <HAL_Init+0x28>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HAL_Init+0x28>)
 8001242:	f043 0310 	orr.w	r3, r3, #16
 8001246:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001248:	2003      	movs	r0, #3
 800124a:	f000 f929 	bl	80014a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124e:	2000      	movs	r0, #0
 8001250:	f000 f808 	bl	8001264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001254:	f7ff fe96 	bl	8000f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40022000 	.word	0x40022000

08001264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x54>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_InitTick+0x58>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f933 	bl	80014ee <HAL_SYSTICK_Config>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e00e      	b.n	80012b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d80a      	bhi.n	80012ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012a0:	f000 f909 	bl	80014b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <HAL_InitTick+0x5c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e000      	b.n	80012b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000008 	.word	0x20000008
 80012c0:	20000004 	.word	0x20000004

080012c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_IncTick+0x1c>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_IncTick+0x20>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a03      	ldr	r2, [pc, #12]	; (80012e4 <HAL_IncTick+0x20>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	20000008 	.word	0x20000008
 80012e4:	20000254 	.word	0x20000254

080012e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b02      	ldr	r3, [pc, #8]	; (80012f8 <HAL_GetTick+0x10>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	20000254 	.word	0x20000254

080012fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001304:	f7ff fff0 	bl	80012e8 <HAL_GetTick>
 8001308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001314:	d005      	beq.n	8001322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_Delay+0x40>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001322:	bf00      	nop
 8001324:	f7ff ffe0 	bl	80012e8 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8f7      	bhi.n	8001324 <HAL_Delay+0x28>
  {
  }
}
 8001334:	bf00      	nop
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000008 	.word	0x20000008

08001340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800135c:	4013      	ands	r3, r2
 800135e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800136c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001372:	4a04      	ldr	r2, [pc, #16]	; (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	60d3      	str	r3, [r2, #12]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <__NVIC_GetPriorityGrouping+0x18>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	f003 0307 	and.w	r3, r3, #7
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	db0a      	blt.n	80013ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	490c      	ldr	r1, [pc, #48]	; (80013f0 <__NVIC_SetPriority+0x4c>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	0112      	lsls	r2, r2, #4
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	440b      	add	r3, r1
 80013c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013cc:	e00a      	b.n	80013e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4908      	ldr	r1, [pc, #32]	; (80013f4 <__NVIC_SetPriority+0x50>)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	3b04      	subs	r3, #4
 80013dc:	0112      	lsls	r2, r2, #4
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	440b      	add	r3, r1
 80013e2:	761a      	strb	r2, [r3, #24]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	; 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f1c3 0307 	rsb	r3, r3, #7
 8001412:	2b04      	cmp	r3, #4
 8001414:	bf28      	it	cs
 8001416:	2304      	movcs	r3, #4
 8001418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3304      	adds	r3, #4
 800141e:	2b06      	cmp	r3, #6
 8001420:	d902      	bls.n	8001428 <NVIC_EncodePriority+0x30>
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3b03      	subs	r3, #3
 8001426:	e000      	b.n	800142a <NVIC_EncodePriority+0x32>
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	401a      	ands	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001440:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	43d9      	mvns	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	4313      	orrs	r3, r2
         );
}
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800146c:	d301      	bcc.n	8001472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146e:	2301      	movs	r3, #1
 8001470:	e00f      	b.n	8001492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <SysTick_Config+0x40>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147a:	210f      	movs	r1, #15
 800147c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001480:	f7ff ff90 	bl	80013a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <SysTick_Config+0x40>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148a:	4b04      	ldr	r3, [pc, #16]	; (800149c <SysTick_Config+0x40>)
 800148c:	2207      	movs	r2, #7
 800148e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	e000e010 	.word	0xe000e010

080014a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff49 	bl	8001340 <__NVIC_SetPriorityGrouping>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c8:	f7ff ff5e 	bl	8001388 <__NVIC_GetPriorityGrouping>
 80014cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	6978      	ldr	r0, [r7, #20]
 80014d4:	f7ff ff90 	bl	80013f8 <NVIC_EncodePriority>
 80014d8:	4602      	mov	r2, r0
 80014da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff5f 	bl	80013a4 <__NVIC_SetPriority>
}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ffb0 	bl	800145c <SysTick_Config>
 80014fc:	4603      	mov	r3, r0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b08b      	sub	sp, #44	; 0x2c
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151a:	e127      	b.n	800176c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800151c:	2201      	movs	r2, #1
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	429a      	cmp	r2, r3
 8001536:	f040 8116 	bne.w	8001766 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b12      	cmp	r3, #18
 8001540:	d034      	beq.n	80015ac <HAL_GPIO_Init+0xa4>
 8001542:	2b12      	cmp	r3, #18
 8001544:	d80d      	bhi.n	8001562 <HAL_GPIO_Init+0x5a>
 8001546:	2b02      	cmp	r3, #2
 8001548:	d02b      	beq.n	80015a2 <HAL_GPIO_Init+0x9a>
 800154a:	2b02      	cmp	r3, #2
 800154c:	d804      	bhi.n	8001558 <HAL_GPIO_Init+0x50>
 800154e:	2b00      	cmp	r3, #0
 8001550:	d031      	beq.n	80015b6 <HAL_GPIO_Init+0xae>
 8001552:	2b01      	cmp	r3, #1
 8001554:	d01c      	beq.n	8001590 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001556:	e048      	b.n	80015ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001558:	2b03      	cmp	r3, #3
 800155a:	d043      	beq.n	80015e4 <HAL_GPIO_Init+0xdc>
 800155c:	2b11      	cmp	r3, #17
 800155e:	d01b      	beq.n	8001598 <HAL_GPIO_Init+0x90>
          break;
 8001560:	e043      	b.n	80015ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001562:	4a89      	ldr	r2, [pc, #548]	; (8001788 <HAL_GPIO_Init+0x280>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d026      	beq.n	80015b6 <HAL_GPIO_Init+0xae>
 8001568:	4a87      	ldr	r2, [pc, #540]	; (8001788 <HAL_GPIO_Init+0x280>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d806      	bhi.n	800157c <HAL_GPIO_Init+0x74>
 800156e:	4a87      	ldr	r2, [pc, #540]	; (800178c <HAL_GPIO_Init+0x284>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d020      	beq.n	80015b6 <HAL_GPIO_Init+0xae>
 8001574:	4a86      	ldr	r2, [pc, #536]	; (8001790 <HAL_GPIO_Init+0x288>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d01d      	beq.n	80015b6 <HAL_GPIO_Init+0xae>
          break;
 800157a:	e036      	b.n	80015ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800157c:	4a85      	ldr	r2, [pc, #532]	; (8001794 <HAL_GPIO_Init+0x28c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d019      	beq.n	80015b6 <HAL_GPIO_Init+0xae>
 8001582:	4a85      	ldr	r2, [pc, #532]	; (8001798 <HAL_GPIO_Init+0x290>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d016      	beq.n	80015b6 <HAL_GPIO_Init+0xae>
 8001588:	4a84      	ldr	r2, [pc, #528]	; (800179c <HAL_GPIO_Init+0x294>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d013      	beq.n	80015b6 <HAL_GPIO_Init+0xae>
          break;
 800158e:	e02c      	b.n	80015ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	623b      	str	r3, [r7, #32]
          break;
 8001596:	e028      	b.n	80015ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	3304      	adds	r3, #4
 800159e:	623b      	str	r3, [r7, #32]
          break;
 80015a0:	e023      	b.n	80015ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	3308      	adds	r3, #8
 80015a8:	623b      	str	r3, [r7, #32]
          break;
 80015aa:	e01e      	b.n	80015ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	330c      	adds	r3, #12
 80015b2:	623b      	str	r3, [r7, #32]
          break;
 80015b4:	e019      	b.n	80015ea <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d102      	bne.n	80015c4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015be:	2304      	movs	r3, #4
 80015c0:	623b      	str	r3, [r7, #32]
          break;
 80015c2:	e012      	b.n	80015ea <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d105      	bne.n	80015d8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015cc:	2308      	movs	r3, #8
 80015ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	611a      	str	r2, [r3, #16]
          break;
 80015d6:	e008      	b.n	80015ea <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d8:	2308      	movs	r3, #8
 80015da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	615a      	str	r2, [r3, #20]
          break;
 80015e2:	e002      	b.n	80015ea <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
          break;
 80015e8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	2bff      	cmp	r3, #255	; 0xff
 80015ee:	d801      	bhi.n	80015f4 <HAL_GPIO_Init+0xec>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	e001      	b.n	80015f8 <HAL_GPIO_Init+0xf0>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3304      	adds	r3, #4
 80015f8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	2bff      	cmp	r3, #255	; 0xff
 80015fe:	d802      	bhi.n	8001606 <HAL_GPIO_Init+0xfe>
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	e002      	b.n	800160c <HAL_GPIO_Init+0x104>
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	3b08      	subs	r3, #8
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	210f      	movs	r1, #15
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	fa01 f303 	lsl.w	r3, r1, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	401a      	ands	r2, r3
 800161e:	6a39      	ldr	r1, [r7, #32]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	431a      	orrs	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 8096 	beq.w	8001766 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800163a:	4b59      	ldr	r3, [pc, #356]	; (80017a0 <HAL_GPIO_Init+0x298>)
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	4a58      	ldr	r2, [pc, #352]	; (80017a0 <HAL_GPIO_Init+0x298>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6193      	str	r3, [r2, #24]
 8001646:	4b56      	ldr	r3, [pc, #344]	; (80017a0 <HAL_GPIO_Init+0x298>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001652:	4a54      	ldr	r2, [pc, #336]	; (80017a4 <HAL_GPIO_Init+0x29c>)
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	3302      	adds	r3, #2
 800165a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	220f      	movs	r2, #15
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	4013      	ands	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a4b      	ldr	r2, [pc, #300]	; (80017a8 <HAL_GPIO_Init+0x2a0>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d013      	beq.n	80016a6 <HAL_GPIO_Init+0x19e>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4a      	ldr	r2, [pc, #296]	; (80017ac <HAL_GPIO_Init+0x2a4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d00d      	beq.n	80016a2 <HAL_GPIO_Init+0x19a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a49      	ldr	r2, [pc, #292]	; (80017b0 <HAL_GPIO_Init+0x2a8>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d007      	beq.n	800169e <HAL_GPIO_Init+0x196>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a48      	ldr	r2, [pc, #288]	; (80017b4 <HAL_GPIO_Init+0x2ac>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d101      	bne.n	800169a <HAL_GPIO_Init+0x192>
 8001696:	2303      	movs	r3, #3
 8001698:	e006      	b.n	80016a8 <HAL_GPIO_Init+0x1a0>
 800169a:	2304      	movs	r3, #4
 800169c:	e004      	b.n	80016a8 <HAL_GPIO_Init+0x1a0>
 800169e:	2302      	movs	r3, #2
 80016a0:	e002      	b.n	80016a8 <HAL_GPIO_Init+0x1a0>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <HAL_GPIO_Init+0x1a0>
 80016a6:	2300      	movs	r3, #0
 80016a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016aa:	f002 0203 	and.w	r2, r2, #3
 80016ae:	0092      	lsls	r2, r2, #2
 80016b0:	4093      	lsls	r3, r2
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016b8:	493a      	ldr	r1, [pc, #232]	; (80017a4 <HAL_GPIO_Init+0x29c>)
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	3302      	adds	r3, #2
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d006      	beq.n	80016e0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016d2:	4b39      	ldr	r3, [pc, #228]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	4938      	ldr	r1, [pc, #224]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]
 80016de:	e006      	b.n	80016ee <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016e0:	4b35      	ldr	r3, [pc, #212]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	4933      	ldr	r1, [pc, #204]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d006      	beq.n	8001708 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016fa:	4b2f      	ldr	r3, [pc, #188]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	492e      	ldr	r1, [pc, #184]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	604b      	str	r3, [r1, #4]
 8001706:	e006      	b.n	8001716 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001708:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	43db      	mvns	r3, r3
 8001710:	4929      	ldr	r1, [pc, #164]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 8001712:	4013      	ands	r3, r2
 8001714:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d006      	beq.n	8001730 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001722:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	4924      	ldr	r1, [pc, #144]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	4313      	orrs	r3, r2
 800172c:	608b      	str	r3, [r1, #8]
 800172e:	e006      	b.n	800173e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001730:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	43db      	mvns	r3, r3
 8001738:	491f      	ldr	r1, [pc, #124]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 800173a:	4013      	ands	r3, r2
 800173c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d006      	beq.n	8001758 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800174a:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	491a      	ldr	r1, [pc, #104]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	60cb      	str	r3, [r1, #12]
 8001756:	e006      	b.n	8001766 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001758:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	43db      	mvns	r3, r3
 8001760:	4915      	ldr	r1, [pc, #84]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 8001762:	4013      	ands	r3, r2
 8001764:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	3301      	adds	r3, #1
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	fa22 f303 	lsr.w	r3, r2, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	f47f aed0 	bne.w	800151c <HAL_GPIO_Init+0x14>
  }
}
 800177c:	bf00      	nop
 800177e:	372c      	adds	r7, #44	; 0x2c
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	10210000 	.word	0x10210000
 800178c:	10110000 	.word	0x10110000
 8001790:	10120000 	.word	0x10120000
 8001794:	10310000 	.word	0x10310000
 8001798:	10320000 	.word	0x10320000
 800179c:	10220000 	.word	0x10220000
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010000 	.word	0x40010000
 80017a8:	40010800 	.word	0x40010800
 80017ac:	40010c00 	.word	0x40010c00
 80017b0:	40011000 	.word	0x40011000
 80017b4:	40011400 	.word	0x40011400
 80017b8:	40010400 	.word	0x40010400

080017bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e26c      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 8087 	beq.w	80018ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017dc:	4b92      	ldr	r3, [pc, #584]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 030c 	and.w	r3, r3, #12
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d00c      	beq.n	8001802 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017e8:	4b8f      	ldr	r3, [pc, #572]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 030c 	and.w	r3, r3, #12
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d112      	bne.n	800181a <HAL_RCC_OscConfig+0x5e>
 80017f4:	4b8c      	ldr	r3, [pc, #560]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001800:	d10b      	bne.n	800181a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001802:	4b89      	ldr	r3, [pc, #548]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d06c      	beq.n	80018e8 <HAL_RCC_OscConfig+0x12c>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d168      	bne.n	80018e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e246      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001822:	d106      	bne.n	8001832 <HAL_RCC_OscConfig+0x76>
 8001824:	4b80      	ldr	r3, [pc, #512]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a7f      	ldr	r2, [pc, #508]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800182a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	e02e      	b.n	8001890 <HAL_RCC_OscConfig+0xd4>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0x98>
 800183a:	4b7b      	ldr	r3, [pc, #492]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a7a      	ldr	r2, [pc, #488]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b78      	ldr	r3, [pc, #480]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a77      	ldr	r2, [pc, #476]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800184c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e01d      	b.n	8001890 <HAL_RCC_OscConfig+0xd4>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800185c:	d10c      	bne.n	8001878 <HAL_RCC_OscConfig+0xbc>
 800185e:	4b72      	ldr	r3, [pc, #456]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a71      	ldr	r2, [pc, #452]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	4b6f      	ldr	r3, [pc, #444]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a6e      	ldr	r2, [pc, #440]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	e00b      	b.n	8001890 <HAL_RCC_OscConfig+0xd4>
 8001878:	4b6b      	ldr	r3, [pc, #428]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a6a      	ldr	r2, [pc, #424]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800187e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b68      	ldr	r3, [pc, #416]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a67      	ldr	r2, [pc, #412]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800188a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d013      	beq.n	80018c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7ff fd26 	bl	80012e8 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a0:	f7ff fd22 	bl	80012e8 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b64      	cmp	r3, #100	; 0x64
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e1fa      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b2:	4b5d      	ldr	r3, [pc, #372]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0xe4>
 80018be:	e014      	b.n	80018ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c0:	f7ff fd12 	bl	80012e8 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c8:	f7ff fd0e 	bl	80012e8 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b64      	cmp	r3, #100	; 0x64
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e1e6      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018da:	4b53      	ldr	r3, [pc, #332]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x10c>
 80018e6:	e000      	b.n	80018ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d063      	beq.n	80019be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018f6:	4b4c      	ldr	r3, [pc, #304]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00b      	beq.n	800191a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001902:	4b49      	ldr	r3, [pc, #292]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	2b08      	cmp	r3, #8
 800190c:	d11c      	bne.n	8001948 <HAL_RCC_OscConfig+0x18c>
 800190e:	4b46      	ldr	r3, [pc, #280]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d116      	bne.n	8001948 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191a:	4b43      	ldr	r3, [pc, #268]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <HAL_RCC_OscConfig+0x176>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d001      	beq.n	8001932 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e1ba      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001932:	4b3d      	ldr	r3, [pc, #244]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4939      	ldr	r1, [pc, #228]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001946:	e03a      	b.n	80019be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d020      	beq.n	8001992 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001950:	4b36      	ldr	r3, [pc, #216]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001952:	2201      	movs	r2, #1
 8001954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001956:	f7ff fcc7 	bl	80012e8 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195e:	f7ff fcc3 	bl	80012e8 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e19b      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001970:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197c:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4927      	ldr	r1, [pc, #156]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800198c:	4313      	orrs	r3, r2
 800198e:	600b      	str	r3, [r1, #0]
 8001990:	e015      	b.n	80019be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001992:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff fca6 	bl	80012e8 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a0:	f7ff fca2 	bl	80012e8 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e17a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d03a      	beq.n	8001a40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d019      	beq.n	8001a06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d2:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <HAL_RCC_OscConfig+0x274>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d8:	f7ff fc86 	bl	80012e8 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e0:	f7ff fc82 	bl	80012e8 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e15a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019fe:	2001      	movs	r0, #1
 8001a00:	f000 fada 	bl	8001fb8 <RCC_Delay>
 8001a04:	e01c      	b.n	8001a40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <HAL_RCC_OscConfig+0x274>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0c:	f7ff fc6c 	bl	80012e8 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a12:	e00f      	b.n	8001a34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a14:	f7ff fc68 	bl	80012e8 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d908      	bls.n	8001a34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e140      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	42420000 	.word	0x42420000
 8001a30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a34:	4b9e      	ldr	r3, [pc, #632]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1e9      	bne.n	8001a14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80a6 	beq.w	8001b9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a52:	4b97      	ldr	r3, [pc, #604]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10d      	bne.n	8001a7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	4b94      	ldr	r3, [pc, #592]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	4a93      	ldr	r2, [pc, #588]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a68:	61d3      	str	r3, [r2, #28]
 8001a6a:	4b91      	ldr	r3, [pc, #580]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a76:	2301      	movs	r3, #1
 8001a78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7a:	4b8e      	ldr	r3, [pc, #568]	; (8001cb4 <HAL_RCC_OscConfig+0x4f8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d118      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a86:	4b8b      	ldr	r3, [pc, #556]	; (8001cb4 <HAL_RCC_OscConfig+0x4f8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a8a      	ldr	r2, [pc, #552]	; (8001cb4 <HAL_RCC_OscConfig+0x4f8>)
 8001a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a92:	f7ff fc29 	bl	80012e8 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9a:	f7ff fc25 	bl	80012e8 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b64      	cmp	r3, #100	; 0x64
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e0fd      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aac:	4b81      	ldr	r3, [pc, #516]	; (8001cb4 <HAL_RCC_OscConfig+0x4f8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d106      	bne.n	8001ace <HAL_RCC_OscConfig+0x312>
 8001ac0:	4b7b      	ldr	r3, [pc, #492]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	4a7a      	ldr	r2, [pc, #488]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6213      	str	r3, [r2, #32]
 8001acc:	e02d      	b.n	8001b2a <HAL_RCC_OscConfig+0x36e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x334>
 8001ad6:	4b76      	ldr	r3, [pc, #472]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	4a75      	ldr	r2, [pc, #468]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	f023 0301 	bic.w	r3, r3, #1
 8001ae0:	6213      	str	r3, [r2, #32]
 8001ae2:	4b73      	ldr	r3, [pc, #460]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	4a72      	ldr	r2, [pc, #456]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	f023 0304 	bic.w	r3, r3, #4
 8001aec:	6213      	str	r3, [r2, #32]
 8001aee:	e01c      	b.n	8001b2a <HAL_RCC_OscConfig+0x36e>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b05      	cmp	r3, #5
 8001af6:	d10c      	bne.n	8001b12 <HAL_RCC_OscConfig+0x356>
 8001af8:	4b6d      	ldr	r3, [pc, #436]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	4a6c      	ldr	r2, [pc, #432]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	f043 0304 	orr.w	r3, r3, #4
 8001b02:	6213      	str	r3, [r2, #32]
 8001b04:	4b6a      	ldr	r3, [pc, #424]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	4a69      	ldr	r2, [pc, #420]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6213      	str	r3, [r2, #32]
 8001b10:	e00b      	b.n	8001b2a <HAL_RCC_OscConfig+0x36e>
 8001b12:	4b67      	ldr	r3, [pc, #412]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	4a66      	ldr	r2, [pc, #408]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	6213      	str	r3, [r2, #32]
 8001b1e:	4b64      	ldr	r3, [pc, #400]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4a63      	ldr	r2, [pc, #396]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	f023 0304 	bic.w	r3, r3, #4
 8001b28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d015      	beq.n	8001b5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b32:	f7ff fbd9 	bl	80012e8 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b38:	e00a      	b.n	8001b50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3a:	f7ff fbd5 	bl	80012e8 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e0ab      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b50:	4b57      	ldr	r3, [pc, #348]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0ee      	beq.n	8001b3a <HAL_RCC_OscConfig+0x37e>
 8001b5c:	e014      	b.n	8001b88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5e:	f7ff fbc3 	bl	80012e8 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b64:	e00a      	b.n	8001b7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b66:	f7ff fbbf 	bl	80012e8 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e095      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b7c:	4b4c      	ldr	r3, [pc, #304]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1ee      	bne.n	8001b66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b88:	7dfb      	ldrb	r3, [r7, #23]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d105      	bne.n	8001b9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8e:	4b48      	ldr	r3, [pc, #288]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	4a47      	ldr	r2, [pc, #284]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 8081 	beq.w	8001ca6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba4:	4b42      	ldr	r3, [pc, #264]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d061      	beq.n	8001c74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d146      	bne.n	8001c46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb8:	4b3f      	ldr	r3, [pc, #252]	; (8001cb8 <HAL_RCC_OscConfig+0x4fc>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbe:	f7ff fb93 	bl	80012e8 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc6:	f7ff fb8f 	bl	80012e8 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e067      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd8:	4b35      	ldr	r3, [pc, #212]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f0      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bec:	d108      	bne.n	8001c00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bee:	4b30      	ldr	r3, [pc, #192]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	492d      	ldr	r1, [pc, #180]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c00:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a19      	ldr	r1, [r3, #32]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	430b      	orrs	r3, r1
 8001c12:	4927      	ldr	r1, [pc, #156]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c18:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <HAL_RCC_OscConfig+0x4fc>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1e:	f7ff fb63 	bl	80012e8 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c26:	f7ff fb5f 	bl	80012e8 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e037      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c38:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x46a>
 8001c44:	e02f      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c46:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <HAL_RCC_OscConfig+0x4fc>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fb4c 	bl	80012e8 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c54:	f7ff fb48 	bl	80012e8 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e020      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c66:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x498>
 8001c72:	e018      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e013      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d106      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d001      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40007000 	.word	0x40007000
 8001cb8:	42420060 	.word	0x42420060

08001cbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0d0      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd0:	4b6a      	ldr	r3, [pc, #424]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d910      	bls.n	8001d00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cde:	4b67      	ldr	r3, [pc, #412]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 0207 	bic.w	r2, r3, #7
 8001ce6:	4965      	ldr	r1, [pc, #404]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cee:	4b63      	ldr	r3, [pc, #396]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d001      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0b8      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d020      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d18:	4b59      	ldr	r3, [pc, #356]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	4a58      	ldr	r2, [pc, #352]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d30:	4b53      	ldr	r3, [pc, #332]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	4a52      	ldr	r2, [pc, #328]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d3c:	4b50      	ldr	r3, [pc, #320]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	494d      	ldr	r1, [pc, #308]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d040      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d107      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d115      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e07f      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d107      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7a:	4b41      	ldr	r3, [pc, #260]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d109      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e073      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8a:	4b3d      	ldr	r3, [pc, #244]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e06b      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d9a:	4b39      	ldr	r3, [pc, #228]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f023 0203 	bic.w	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4936      	ldr	r1, [pc, #216]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dac:	f7ff fa9c 	bl	80012e8 <HAL_GetTick>
 8001db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db2:	e00a      	b.n	8001dca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db4:	f7ff fa98 	bl	80012e8 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e053      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dca:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 020c 	and.w	r2, r3, #12
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d1eb      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ddc:	4b27      	ldr	r3, [pc, #156]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d210      	bcs.n	8001e0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dea:	4b24      	ldr	r3, [pc, #144]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 0207 	bic.w	r2, r3, #7
 8001df2:	4922      	ldr	r1, [pc, #136]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfa:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d001      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e032      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e18:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4916      	ldr	r1, [pc, #88]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d009      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	490e      	ldr	r1, [pc, #56]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e4a:	f000 f821 	bl	8001e90 <HAL_RCC_GetSysClockFreq>
 8001e4e:	4601      	mov	r1, r0
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <HAL_RCC_ClockConfig+0x1c8>)
 8001e5c:	5cd3      	ldrb	r3, [r2, r3]
 8001e5e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e62:	4a09      	ldr	r2, [pc, #36]	; (8001e88 <HAL_RCC_ClockConfig+0x1cc>)
 8001e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_RCC_ClockConfig+0x1d0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff f9fa 	bl	8001264 <HAL_InitTick>

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40022000 	.word	0x40022000
 8001e80:	40021000 	.word	0x40021000
 8001e84:	08004910 	.word	0x08004910
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	20000004 	.word	0x20000004

08001e90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e90:	b490      	push	{r4, r7}
 8001e92:	b08a      	sub	sp, #40	; 0x28
 8001e94:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e96:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e98:	1d3c      	adds	r4, r7, #4
 8001e9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ea0:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61bb      	str	r3, [r7, #24]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001eba:	4b23      	ldr	r3, [pc, #140]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d002      	beq.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x40>
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d003      	beq.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x46>
 8001ece:	e02d      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ed0:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ed2:	623b      	str	r3, [r7, #32]
      break;
 8001ed4:	e02d      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	0c9b      	lsrs	r3, r3, #18
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ee8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d013      	beq.n	8001f1c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ef4:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	0c5b      	lsrs	r3, r3, #17
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f02:	4413      	add	r3, r2
 8001f04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	4a0f      	ldr	r2, [pc, #60]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f0e:	fb02 f203 	mul.w	r2, r2, r3
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1a:	e004      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	4a0c      	ldr	r2, [pc, #48]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f20:	fb02 f303 	mul.w	r3, r2, r3
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	623b      	str	r3, [r7, #32]
      break;
 8001f2a:	e002      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f2c:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f2e:	623b      	str	r3, [r7, #32]
      break;
 8001f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f32:	6a3b      	ldr	r3, [r7, #32]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3728      	adds	r7, #40	; 0x28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc90      	pop	{r4, r7}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	080048e4 	.word	0x080048e4
 8001f44:	080048f4 	.word	0x080048f4
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	007a1200 	.word	0x007a1200
 8001f50:	003d0900 	.word	0x003d0900

08001f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f58:	4b02      	ldr	r3, [pc, #8]	; (8001f64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	20000000 	.word	0x20000000

08001f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f6c:	f7ff fff2 	bl	8001f54 <HAL_RCC_GetHCLKFreq>
 8001f70:	4601      	mov	r1, r0
 8001f72:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	0a1b      	lsrs	r3, r3, #8
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	4a03      	ldr	r2, [pc, #12]	; (8001f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f7e:	5cd3      	ldrb	r3, [r2, r3]
 8001f80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	08004920 	.word	0x08004920

08001f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f94:	f7ff ffde 	bl	8001f54 <HAL_RCC_GetHCLKFreq>
 8001f98:	4601      	mov	r1, r0
 8001f9a:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	0adb      	lsrs	r3, r3, #11
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	4a03      	ldr	r2, [pc, #12]	; (8001fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fa6:	5cd3      	ldrb	r3, [r2, r3]
 8001fa8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	08004920 	.word	0x08004920

08001fb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <RCC_Delay+0x34>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <RCC_Delay+0x38>)
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	0a5b      	lsrs	r3, r3, #9
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	fb02 f303 	mul.w	r3, r2, r3
 8001fd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fd4:	bf00      	nop
  }
  while (Delay --);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1e5a      	subs	r2, r3, #1
 8001fda:	60fa      	str	r2, [r7, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f9      	bne.n	8001fd4 <RCC_Delay+0x1c>
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	10624dd3 	.word	0x10624dd3

08001ff4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e03f      	b.n	8002086 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d106      	bne.n	8002020 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe ffe4 	bl	8000fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2224      	movs	r2, #36	; 0x24
 8002024:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002036:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f90b 	bl	8002254 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800204c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695a      	ldr	r2, [r3, #20]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800205c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800206c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b088      	sub	sp, #32
 8002092:	af02      	add	r7, sp, #8
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	603b      	str	r3, [r7, #0]
 800209a:	4613      	mov	r3, r2
 800209c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b20      	cmp	r3, #32
 80020ac:	f040 8083 	bne.w	80021b6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <HAL_UART_Transmit+0x2e>
 80020b6:	88fb      	ldrh	r3, [r7, #6]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e07b      	b.n	80021b8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_UART_Transmit+0x40>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e074      	b.n	80021b8 <HAL_UART_Transmit+0x12a>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2221      	movs	r2, #33	; 0x21
 80020e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80020e4:	f7ff f900 	bl	80012e8 <HAL_GetTick>
 80020e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	88fa      	ldrh	r2, [r7, #6]
 80020ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	88fa      	ldrh	r2, [r7, #6]
 80020f4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020f6:	e042      	b.n	800217e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800210e:	d122      	bne.n	8002156 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2200      	movs	r2, #0
 8002118:	2180      	movs	r1, #128	; 0x80
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f850 	bl	80021c0 <UART_WaitOnFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e046      	b.n	80021b8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800213c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d103      	bne.n	800214e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	3302      	adds	r3, #2
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	e017      	b.n	800217e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	3301      	adds	r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	e013      	b.n	800217e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2200      	movs	r2, #0
 800215e:	2180      	movs	r1, #128	; 0x80
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 f82d 	bl	80021c0 <UART_WaitOnFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e023      	b.n	80021b8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	1c5a      	adds	r2, r3, #1
 8002174:	60ba      	str	r2, [r7, #8]
 8002176:	781a      	ldrb	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002182:	b29b      	uxth	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1b7      	bne.n	80020f8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2200      	movs	r2, #0
 8002190:	2140      	movs	r1, #64	; 0x40
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 f814 	bl	80021c0 <UART_WaitOnFlagUntilTimeout>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e00a      	b.n	80021b8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2220      	movs	r2, #32
 80021a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	e000      	b.n	80021b8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80021b6:	2302      	movs	r3, #2
  }
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	4613      	mov	r3, r2
 80021ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021d0:	e02c      	b.n	800222c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021d8:	d028      	beq.n	800222c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d007      	beq.n	80021f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80021e0:	f7ff f882 	bl	80012e8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d21d      	bcs.n	800222c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80021fe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0201 	bic.w	r2, r2, #1
 800220e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e00f      	b.n	800224c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	4013      	ands	r3, r2
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	429a      	cmp	r2, r3
 800223a:	bf0c      	ite	eq
 800223c:	2301      	moveq	r3, #1
 800223e:	2300      	movne	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	429a      	cmp	r2, r3
 8002248:	d0c3      	beq.n	80021d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	4313      	orrs	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800228e:	f023 030c 	bic.w	r3, r3, #12
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	68f9      	ldr	r1, [r7, #12]
 8002298:	430b      	orrs	r3, r1
 800229a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699a      	ldr	r2, [r3, #24]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a52      	ldr	r2, [pc, #328]	; (8002400 <UART_SetConfig+0x1ac>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d14e      	bne.n	800235a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022bc:	f7ff fe68 	bl	8001f90 <HAL_RCC_GetPCLK2Freq>
 80022c0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	009a      	lsls	r2, r3, #2
 80022cc:	441a      	add	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d8:	4a4a      	ldr	r2, [pc, #296]	; (8002404 <UART_SetConfig+0x1b0>)
 80022da:	fba2 2303 	umull	r2, r3, r2, r3
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	0119      	lsls	r1, r3, #4
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	009a      	lsls	r2, r3, #2
 80022ec:	441a      	add	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80022f8:	4b42      	ldr	r3, [pc, #264]	; (8002404 <UART_SetConfig+0x1b0>)
 80022fa:	fba3 0302 	umull	r0, r3, r3, r2
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	2064      	movs	r0, #100	; 0x64
 8002302:	fb00 f303 	mul.w	r3, r0, r3
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	3332      	adds	r3, #50	; 0x32
 800230c:	4a3d      	ldr	r2, [pc, #244]	; (8002404 <UART_SetConfig+0x1b0>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002318:	4419      	add	r1, r3
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	009a      	lsls	r2, r3, #2
 8002324:	441a      	add	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002330:	4b34      	ldr	r3, [pc, #208]	; (8002404 <UART_SetConfig+0x1b0>)
 8002332:	fba3 0302 	umull	r0, r3, r3, r2
 8002336:	095b      	lsrs	r3, r3, #5
 8002338:	2064      	movs	r0, #100	; 0x64
 800233a:	fb00 f303 	mul.w	r3, r0, r3
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	3332      	adds	r3, #50	; 0x32
 8002344:	4a2f      	ldr	r2, [pc, #188]	; (8002404 <UART_SetConfig+0x1b0>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	f003 020f 	and.w	r2, r3, #15
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	440a      	add	r2, r1
 8002356:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002358:	e04d      	b.n	80023f6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800235a:	f7ff fe05 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 800235e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	009a      	lsls	r2, r3, #2
 800236a:	441a      	add	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	fbb2 f3f3 	udiv	r3, r2, r3
 8002376:	4a23      	ldr	r2, [pc, #140]	; (8002404 <UART_SetConfig+0x1b0>)
 8002378:	fba2 2303 	umull	r2, r3, r2, r3
 800237c:	095b      	lsrs	r3, r3, #5
 800237e:	0119      	lsls	r1, r3, #4
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	009a      	lsls	r2, r3, #2
 800238a:	441a      	add	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	fbb2 f2f3 	udiv	r2, r2, r3
 8002396:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <UART_SetConfig+0x1b0>)
 8002398:	fba3 0302 	umull	r0, r3, r3, r2
 800239c:	095b      	lsrs	r3, r3, #5
 800239e:	2064      	movs	r0, #100	; 0x64
 80023a0:	fb00 f303 	mul.w	r3, r0, r3
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	3332      	adds	r3, #50	; 0x32
 80023aa:	4a16      	ldr	r2, [pc, #88]	; (8002404 <UART_SetConfig+0x1b0>)
 80023ac:	fba2 2303 	umull	r2, r3, r2, r3
 80023b0:	095b      	lsrs	r3, r3, #5
 80023b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023b6:	4419      	add	r1, r3
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	009a      	lsls	r2, r3, #2
 80023c2:	441a      	add	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80023ce:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <UART_SetConfig+0x1b0>)
 80023d0:	fba3 0302 	umull	r0, r3, r3, r2
 80023d4:	095b      	lsrs	r3, r3, #5
 80023d6:	2064      	movs	r0, #100	; 0x64
 80023d8:	fb00 f303 	mul.w	r3, r0, r3
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	3332      	adds	r3, #50	; 0x32
 80023e2:	4a08      	ldr	r2, [pc, #32]	; (8002404 <UART_SetConfig+0x1b0>)
 80023e4:	fba2 2303 	umull	r2, r3, r2, r3
 80023e8:	095b      	lsrs	r3, r3, #5
 80023ea:	f003 020f 	and.w	r2, r3, #15
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	440a      	add	r2, r1
 80023f4:	609a      	str	r2, [r3, #8]
}
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40013800 	.word	0x40013800
 8002404:	51eb851f 	.word	0x51eb851f

08002408 <__cxa_pure_virtual>:
 8002408:	b508      	push	{r3, lr}
 800240a:	f000 f8c1 	bl	8002590 <_ZSt9terminatev>

0800240e <_ZNSaIcEC1Ev>:
 800240e:	4770      	bx	lr

08002410 <_ZNSaIcED1Ev>:
 8002410:	4770      	bx	lr

08002412 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8002412:	b10a      	cbz	r2, 8002418 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8002414:	f000 b930 	b.w	8002678 <memcpy>
 8002418:	4770      	bx	lr
	...

0800241c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800241c:	b508      	push	{r3, lr}
 800241e:	680b      	ldr	r3, [r1, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	da02      	bge.n	800242a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8002424:	4809      	ldr	r0, [pc, #36]	; (800244c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8002426:	f000 f8cc 	bl	80025c2 <_ZSt20__throw_length_errorPKc>
 800242a:	4293      	cmp	r3, r2
 800242c:	d908      	bls.n	8002440 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800242e:	0052      	lsls	r2, r2, #1
 8002430:	4293      	cmp	r3, r2
 8002432:	d205      	bcs.n	8002440 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8002434:	2a00      	cmp	r2, #0
 8002436:	bfb6      	itet	lt
 8002438:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800243c:	600a      	strge	r2, [r1, #0]
 800243e:	600b      	strlt	r3, [r1, #0]
 8002440:	6808      	ldr	r0, [r1, #0]
 8002442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002446:	3001      	adds	r0, #1
 8002448:	f000 b8a7 	b.w	800259a <_Znwj>
 800244c:	08004952 	.word	0x08004952

08002450 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8002450:	4603      	mov	r3, r0
 8002452:	f853 0b08 	ldr.w	r0, [r3], #8
 8002456:	4298      	cmp	r0, r3
 8002458:	d001      	beq.n	800245e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800245a:	f000 b88b 	b.w	8002574 <_ZdlPv>
 800245e:	4770      	bx	lr

08002460 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8002460:	2a01      	cmp	r2, #1
 8002462:	b510      	push	{r4, lr}
 8002464:	d102      	bne.n	800246c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8002466:	780a      	ldrb	r2, [r1, #0]
 8002468:	7002      	strb	r2, [r0, #0]
 800246a:	bd10      	pop	{r4, pc}
 800246c:	f7ff ffd1 	bl	8002412 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8002470:	e7fb      	b.n	800246a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08002472 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8002472:	b508      	push	{r3, lr}
 8002474:	1a52      	subs	r2, r2, r1
 8002476:	f7ff fff3 	bl	8002460 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800247a:	bd08      	pop	{r3, pc}

0800247c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800247c:	b508      	push	{r3, lr}
 800247e:	1a52      	subs	r2, r2, r1
 8002480:	f7ff ffee 	bl	8002460 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8002484:	bd08      	pop	{r3, pc}

08002486 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8002486:	b510      	push	{r4, lr}
 8002488:	4604      	mov	r4, r0
 800248a:	f7ff ffe1 	bl	8002450 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800248e:	4620      	mov	r0, r4
 8002490:	bd10      	pop	{r4, pc}

08002492 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8002492:	6840      	ldr	r0, [r0, #4]
 8002494:	4770      	bx	lr

08002496 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8002496:	6800      	ldr	r0, [r0, #0]
 8002498:	4770      	bx	lr
	...

0800249c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 800249c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800249e:	4604      	mov	r4, r0
 80024a0:	4616      	mov	r6, r2
 80024a2:	460d      	mov	r5, r1
 80024a4:	b919      	cbnz	r1, 80024ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 80024a6:	b112      	cbz	r2, 80024ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 80024a8:	480d      	ldr	r0, [pc, #52]	; (80024e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 80024aa:	f000 f887 	bl	80025bc <_ZSt19__throw_logic_errorPKc>
 80024ae:	1b73      	subs	r3, r6, r5
 80024b0:	2b0f      	cmp	r3, #15
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	d907      	bls.n	80024c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 80024b6:	2200      	movs	r2, #0
 80024b8:	a901      	add	r1, sp, #4
 80024ba:	4620      	mov	r0, r4
 80024bc:	f7ff ffae 	bl	800241c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80024c0:	9b01      	ldr	r3, [sp, #4]
 80024c2:	6020      	str	r0, [r4, #0]
 80024c4:	60a3      	str	r3, [r4, #8]
 80024c6:	4632      	mov	r2, r6
 80024c8:	4629      	mov	r1, r5
 80024ca:	6820      	ldr	r0, [r4, #0]
 80024cc:	f7ff ffd1 	bl	8002472 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 80024d0:	2100      	movs	r1, #0
 80024d2:	9b01      	ldr	r3, [sp, #4]
 80024d4:	6822      	ldr	r2, [r4, #0]
 80024d6:	6063      	str	r3, [r4, #4]
 80024d8:	54d1      	strb	r1, [r2, r3]
 80024da:	b002      	add	sp, #8
 80024dc:	bd70      	pop	{r4, r5, r6, pc}
 80024de:	bf00      	nop
 80024e0:	08004928 	.word	0x08004928

080024e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80024e4:	b510      	push	{r4, lr}
 80024e6:	4604      	mov	r4, r0
 80024e8:	f100 0208 	add.w	r2, r0, #8
 80024ec:	6002      	str	r2, [r0, #0]
 80024ee:	e9d1 1200 	ldrd	r1, r2, [r1]
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	440a      	add	r2, r1
 80024f8:	f7ff ffd0 	bl	800249c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80024fc:	4620      	mov	r0, r4
 80024fe:	bd10      	pop	{r4, pc}

08002500 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8002500:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002502:	4604      	mov	r4, r0
 8002504:	4616      	mov	r6, r2
 8002506:	460d      	mov	r5, r1
 8002508:	b919      	cbnz	r1, 8002512 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800250a:	b112      	cbz	r2, 8002512 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800250c:	480d      	ldr	r0, [pc, #52]	; (8002544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800250e:	f000 f855 	bl	80025bc <_ZSt19__throw_logic_errorPKc>
 8002512:	1b73      	subs	r3, r6, r5
 8002514:	2b0f      	cmp	r3, #15
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	d907      	bls.n	800252a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800251a:	2200      	movs	r2, #0
 800251c:	a901      	add	r1, sp, #4
 800251e:	4620      	mov	r0, r4
 8002520:	f7ff ff7c 	bl	800241c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8002524:	9b01      	ldr	r3, [sp, #4]
 8002526:	6020      	str	r0, [r4, #0]
 8002528:	60a3      	str	r3, [r4, #8]
 800252a:	4632      	mov	r2, r6
 800252c:	4629      	mov	r1, r5
 800252e:	6820      	ldr	r0, [r4, #0]
 8002530:	f7ff ffa4 	bl	800247c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8002534:	2100      	movs	r1, #0
 8002536:	9b01      	ldr	r3, [sp, #4]
 8002538:	6822      	ldr	r2, [r4, #0]
 800253a:	6063      	str	r3, [r4, #4]
 800253c:	54d1      	strb	r1, [r2, r3]
 800253e:	b002      	add	sp, #8
 8002540:	bd70      	pop	{r4, r5, r6, pc}
 8002542:	bf00      	nop
 8002544:	08004928 	.word	0x08004928

08002548 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8002548:	b538      	push	{r3, r4, r5, lr}
 800254a:	f100 0308 	add.w	r3, r0, #8
 800254e:	4604      	mov	r4, r0
 8002550:	6003      	str	r3, [r0, #0]
 8002552:	460d      	mov	r5, r1
 8002554:	b159      	cbz	r1, 800256e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8002556:	4608      	mov	r0, r1
 8002558:	f7fd fdfa 	bl	8000150 <strlen>
 800255c:	182a      	adds	r2, r5, r0
 800255e:	4620      	mov	r0, r4
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	4629      	mov	r1, r5
 8002566:	f7ff ffcb 	bl	8002500 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800256a:	4620      	mov	r0, r4
 800256c:	bd38      	pop	{r3, r4, r5, pc}
 800256e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002572:	e7f4      	b.n	800255e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08002574 <_ZdlPv>:
 8002574:	f000 b86a 	b.w	800264c <free>

08002578 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8002578:	b508      	push	{r3, lr}
 800257a:	4780      	blx	r0
 800257c:	f000 f82c 	bl	80025d8 <abort>

08002580 <_ZSt13get_terminatev>:
 8002580:	4b02      	ldr	r3, [pc, #8]	; (800258c <_ZSt13get_terminatev+0xc>)
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	f3bf 8f5b 	dmb	ish
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	2000000c 	.word	0x2000000c

08002590 <_ZSt9terminatev>:
 8002590:	b508      	push	{r3, lr}
 8002592:	f7ff fff5 	bl	8002580 <_ZSt13get_terminatev>
 8002596:	f7ff ffef 	bl	8002578 <_ZN10__cxxabiv111__terminateEPFvvE>

0800259a <_Znwj>:
 800259a:	b510      	push	{r4, lr}
 800259c:	2800      	cmp	r0, #0
 800259e:	bf14      	ite	ne
 80025a0:	4604      	movne	r4, r0
 80025a2:	2401      	moveq	r4, #1
 80025a4:	4620      	mov	r0, r4
 80025a6:	f000 f849 	bl	800263c <malloc>
 80025aa:	b930      	cbnz	r0, 80025ba <_Znwj+0x20>
 80025ac:	f000 f80c 	bl	80025c8 <_ZSt15get_new_handlerv>
 80025b0:	b908      	cbnz	r0, 80025b6 <_Znwj+0x1c>
 80025b2:	f000 f811 	bl	80025d8 <abort>
 80025b6:	4780      	blx	r0
 80025b8:	e7f4      	b.n	80025a4 <_Znwj+0xa>
 80025ba:	bd10      	pop	{r4, pc}

080025bc <_ZSt19__throw_logic_errorPKc>:
 80025bc:	b508      	push	{r3, lr}
 80025be:	f000 f80b 	bl	80025d8 <abort>

080025c2 <_ZSt20__throw_length_errorPKc>:
 80025c2:	b508      	push	{r3, lr}
 80025c4:	f000 f808 	bl	80025d8 <abort>

080025c8 <_ZSt15get_new_handlerv>:
 80025c8:	4b02      	ldr	r3, [pc, #8]	; (80025d4 <_ZSt15get_new_handlerv+0xc>)
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	f3bf 8f5b 	dmb	ish
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000248 	.word	0x20000248

080025d8 <abort>:
 80025d8:	b508      	push	{r3, lr}
 80025da:	2006      	movs	r0, #6
 80025dc:	f000 fda6 	bl	800312c <raise>
 80025e0:	2001      	movs	r0, #1
 80025e2:	f7fe fd8e 	bl	8001102 <_exit>
	...

080025e8 <__errno>:
 80025e8:	4b01      	ldr	r3, [pc, #4]	; (80025f0 <__errno+0x8>)
 80025ea:	6818      	ldr	r0, [r3, #0]
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000010 	.word	0x20000010

080025f4 <__libc_init_array>:
 80025f4:	b570      	push	{r4, r5, r6, lr}
 80025f6:	2500      	movs	r5, #0
 80025f8:	4e0c      	ldr	r6, [pc, #48]	; (800262c <__libc_init_array+0x38>)
 80025fa:	4c0d      	ldr	r4, [pc, #52]	; (8002630 <__libc_init_array+0x3c>)
 80025fc:	1ba4      	subs	r4, r4, r6
 80025fe:	10a4      	asrs	r4, r4, #2
 8002600:	42a5      	cmp	r5, r4
 8002602:	d109      	bne.n	8002618 <__libc_init_array+0x24>
 8002604:	f002 f8ee 	bl	80047e4 <_init>
 8002608:	2500      	movs	r5, #0
 800260a:	4e0a      	ldr	r6, [pc, #40]	; (8002634 <__libc_init_array+0x40>)
 800260c:	4c0a      	ldr	r4, [pc, #40]	; (8002638 <__libc_init_array+0x44>)
 800260e:	1ba4      	subs	r4, r4, r6
 8002610:	10a4      	asrs	r4, r4, #2
 8002612:	42a5      	cmp	r5, r4
 8002614:	d105      	bne.n	8002622 <__libc_init_array+0x2e>
 8002616:	bd70      	pop	{r4, r5, r6, pc}
 8002618:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800261c:	4798      	blx	r3
 800261e:	3501      	adds	r5, #1
 8002620:	e7ee      	b.n	8002600 <__libc_init_array+0xc>
 8002622:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002626:	4798      	blx	r3
 8002628:	3501      	adds	r5, #1
 800262a:	e7f2      	b.n	8002612 <__libc_init_array+0x1e>
 800262c:	08004bc8 	.word	0x08004bc8
 8002630:	08004bc8 	.word	0x08004bc8
 8002634:	08004bc8 	.word	0x08004bc8
 8002638:	08004bd0 	.word	0x08004bd0

0800263c <malloc>:
 800263c:	4b02      	ldr	r3, [pc, #8]	; (8002648 <malloc+0xc>)
 800263e:	4601      	mov	r1, r0
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	f000 b891 	b.w	8002768 <_malloc_r>
 8002646:	bf00      	nop
 8002648:	20000010 	.word	0x20000010

0800264c <free>:
 800264c:	4b02      	ldr	r3, [pc, #8]	; (8002658 <free+0xc>)
 800264e:	4601      	mov	r1, r0
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	f000 b83d 	b.w	80026d0 <_free_r>
 8002656:	bf00      	nop
 8002658:	20000010 	.word	0x20000010

0800265c <memchr>:
 800265c:	b510      	push	{r4, lr}
 800265e:	b2c9      	uxtb	r1, r1
 8002660:	4402      	add	r2, r0
 8002662:	4290      	cmp	r0, r2
 8002664:	4603      	mov	r3, r0
 8002666:	d101      	bne.n	800266c <memchr+0x10>
 8002668:	2300      	movs	r3, #0
 800266a:	e003      	b.n	8002674 <memchr+0x18>
 800266c:	781c      	ldrb	r4, [r3, #0]
 800266e:	3001      	adds	r0, #1
 8002670:	428c      	cmp	r4, r1
 8002672:	d1f6      	bne.n	8002662 <memchr+0x6>
 8002674:	4618      	mov	r0, r3
 8002676:	bd10      	pop	{r4, pc}

08002678 <memcpy>:
 8002678:	b510      	push	{r4, lr}
 800267a:	1e43      	subs	r3, r0, #1
 800267c:	440a      	add	r2, r1
 800267e:	4291      	cmp	r1, r2
 8002680:	d100      	bne.n	8002684 <memcpy+0xc>
 8002682:	bd10      	pop	{r4, pc}
 8002684:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002688:	f803 4f01 	strb.w	r4, [r3, #1]!
 800268c:	e7f7      	b.n	800267e <memcpy+0x6>

0800268e <memmove>:
 800268e:	4288      	cmp	r0, r1
 8002690:	b510      	push	{r4, lr}
 8002692:	eb01 0302 	add.w	r3, r1, r2
 8002696:	d807      	bhi.n	80026a8 <memmove+0x1a>
 8002698:	1e42      	subs	r2, r0, #1
 800269a:	4299      	cmp	r1, r3
 800269c:	d00a      	beq.n	80026b4 <memmove+0x26>
 800269e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026a2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80026a6:	e7f8      	b.n	800269a <memmove+0xc>
 80026a8:	4283      	cmp	r3, r0
 80026aa:	d9f5      	bls.n	8002698 <memmove+0xa>
 80026ac:	1881      	adds	r1, r0, r2
 80026ae:	1ad2      	subs	r2, r2, r3
 80026b0:	42d3      	cmn	r3, r2
 80026b2:	d100      	bne.n	80026b6 <memmove+0x28>
 80026b4:	bd10      	pop	{r4, pc}
 80026b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80026ba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80026be:	e7f7      	b.n	80026b0 <memmove+0x22>

080026c0 <memset>:
 80026c0:	4603      	mov	r3, r0
 80026c2:	4402      	add	r2, r0
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d100      	bne.n	80026ca <memset+0xa>
 80026c8:	4770      	bx	lr
 80026ca:	f803 1b01 	strb.w	r1, [r3], #1
 80026ce:	e7f9      	b.n	80026c4 <memset+0x4>

080026d0 <_free_r>:
 80026d0:	b538      	push	{r3, r4, r5, lr}
 80026d2:	4605      	mov	r5, r0
 80026d4:	2900      	cmp	r1, #0
 80026d6:	d043      	beq.n	8002760 <_free_r+0x90>
 80026d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026dc:	1f0c      	subs	r4, r1, #4
 80026de:	2b00      	cmp	r3, #0
 80026e0:	bfb8      	it	lt
 80026e2:	18e4      	addlt	r4, r4, r3
 80026e4:	f001 fbf2 	bl	8003ecc <__malloc_lock>
 80026e8:	4a1e      	ldr	r2, [pc, #120]	; (8002764 <_free_r+0x94>)
 80026ea:	6813      	ldr	r3, [r2, #0]
 80026ec:	4610      	mov	r0, r2
 80026ee:	b933      	cbnz	r3, 80026fe <_free_r+0x2e>
 80026f0:	6063      	str	r3, [r4, #4]
 80026f2:	6014      	str	r4, [r2, #0]
 80026f4:	4628      	mov	r0, r5
 80026f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026fa:	f001 bbe8 	b.w	8003ece <__malloc_unlock>
 80026fe:	42a3      	cmp	r3, r4
 8002700:	d90b      	bls.n	800271a <_free_r+0x4a>
 8002702:	6821      	ldr	r1, [r4, #0]
 8002704:	1862      	adds	r2, r4, r1
 8002706:	4293      	cmp	r3, r2
 8002708:	bf01      	itttt	eq
 800270a:	681a      	ldreq	r2, [r3, #0]
 800270c:	685b      	ldreq	r3, [r3, #4]
 800270e:	1852      	addeq	r2, r2, r1
 8002710:	6022      	streq	r2, [r4, #0]
 8002712:	6063      	str	r3, [r4, #4]
 8002714:	6004      	str	r4, [r0, #0]
 8002716:	e7ed      	b.n	80026f4 <_free_r+0x24>
 8002718:	4613      	mov	r3, r2
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	b10a      	cbz	r2, 8002722 <_free_r+0x52>
 800271e:	42a2      	cmp	r2, r4
 8002720:	d9fa      	bls.n	8002718 <_free_r+0x48>
 8002722:	6819      	ldr	r1, [r3, #0]
 8002724:	1858      	adds	r0, r3, r1
 8002726:	42a0      	cmp	r0, r4
 8002728:	d10b      	bne.n	8002742 <_free_r+0x72>
 800272a:	6820      	ldr	r0, [r4, #0]
 800272c:	4401      	add	r1, r0
 800272e:	1858      	adds	r0, r3, r1
 8002730:	4282      	cmp	r2, r0
 8002732:	6019      	str	r1, [r3, #0]
 8002734:	d1de      	bne.n	80026f4 <_free_r+0x24>
 8002736:	6810      	ldr	r0, [r2, #0]
 8002738:	6852      	ldr	r2, [r2, #4]
 800273a:	4401      	add	r1, r0
 800273c:	6019      	str	r1, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]
 8002740:	e7d8      	b.n	80026f4 <_free_r+0x24>
 8002742:	d902      	bls.n	800274a <_free_r+0x7a>
 8002744:	230c      	movs	r3, #12
 8002746:	602b      	str	r3, [r5, #0]
 8002748:	e7d4      	b.n	80026f4 <_free_r+0x24>
 800274a:	6820      	ldr	r0, [r4, #0]
 800274c:	1821      	adds	r1, r4, r0
 800274e:	428a      	cmp	r2, r1
 8002750:	bf01      	itttt	eq
 8002752:	6811      	ldreq	r1, [r2, #0]
 8002754:	6852      	ldreq	r2, [r2, #4]
 8002756:	1809      	addeq	r1, r1, r0
 8002758:	6021      	streq	r1, [r4, #0]
 800275a:	6062      	str	r2, [r4, #4]
 800275c:	605c      	str	r4, [r3, #4]
 800275e:	e7c9      	b.n	80026f4 <_free_r+0x24>
 8002760:	bd38      	pop	{r3, r4, r5, pc}
 8002762:	bf00      	nop
 8002764:	2000024c 	.word	0x2000024c

08002768 <_malloc_r>:
 8002768:	b570      	push	{r4, r5, r6, lr}
 800276a:	1ccd      	adds	r5, r1, #3
 800276c:	f025 0503 	bic.w	r5, r5, #3
 8002770:	3508      	adds	r5, #8
 8002772:	2d0c      	cmp	r5, #12
 8002774:	bf38      	it	cc
 8002776:	250c      	movcc	r5, #12
 8002778:	2d00      	cmp	r5, #0
 800277a:	4606      	mov	r6, r0
 800277c:	db01      	blt.n	8002782 <_malloc_r+0x1a>
 800277e:	42a9      	cmp	r1, r5
 8002780:	d903      	bls.n	800278a <_malloc_r+0x22>
 8002782:	230c      	movs	r3, #12
 8002784:	6033      	str	r3, [r6, #0]
 8002786:	2000      	movs	r0, #0
 8002788:	bd70      	pop	{r4, r5, r6, pc}
 800278a:	f001 fb9f 	bl	8003ecc <__malloc_lock>
 800278e:	4a21      	ldr	r2, [pc, #132]	; (8002814 <_malloc_r+0xac>)
 8002790:	6814      	ldr	r4, [r2, #0]
 8002792:	4621      	mov	r1, r4
 8002794:	b991      	cbnz	r1, 80027bc <_malloc_r+0x54>
 8002796:	4c20      	ldr	r4, [pc, #128]	; (8002818 <_malloc_r+0xb0>)
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	b91b      	cbnz	r3, 80027a4 <_malloc_r+0x3c>
 800279c:	4630      	mov	r0, r6
 800279e:	f000 fc8d 	bl	80030bc <_sbrk_r>
 80027a2:	6020      	str	r0, [r4, #0]
 80027a4:	4629      	mov	r1, r5
 80027a6:	4630      	mov	r0, r6
 80027a8:	f000 fc88 	bl	80030bc <_sbrk_r>
 80027ac:	1c43      	adds	r3, r0, #1
 80027ae:	d124      	bne.n	80027fa <_malloc_r+0x92>
 80027b0:	230c      	movs	r3, #12
 80027b2:	4630      	mov	r0, r6
 80027b4:	6033      	str	r3, [r6, #0]
 80027b6:	f001 fb8a 	bl	8003ece <__malloc_unlock>
 80027ba:	e7e4      	b.n	8002786 <_malloc_r+0x1e>
 80027bc:	680b      	ldr	r3, [r1, #0]
 80027be:	1b5b      	subs	r3, r3, r5
 80027c0:	d418      	bmi.n	80027f4 <_malloc_r+0x8c>
 80027c2:	2b0b      	cmp	r3, #11
 80027c4:	d90f      	bls.n	80027e6 <_malloc_r+0x7e>
 80027c6:	600b      	str	r3, [r1, #0]
 80027c8:	18cc      	adds	r4, r1, r3
 80027ca:	50cd      	str	r5, [r1, r3]
 80027cc:	4630      	mov	r0, r6
 80027ce:	f001 fb7e 	bl	8003ece <__malloc_unlock>
 80027d2:	f104 000b 	add.w	r0, r4, #11
 80027d6:	1d23      	adds	r3, r4, #4
 80027d8:	f020 0007 	bic.w	r0, r0, #7
 80027dc:	1ac3      	subs	r3, r0, r3
 80027de:	d0d3      	beq.n	8002788 <_malloc_r+0x20>
 80027e0:	425a      	negs	r2, r3
 80027e2:	50e2      	str	r2, [r4, r3]
 80027e4:	e7d0      	b.n	8002788 <_malloc_r+0x20>
 80027e6:	684b      	ldr	r3, [r1, #4]
 80027e8:	428c      	cmp	r4, r1
 80027ea:	bf16      	itet	ne
 80027ec:	6063      	strne	r3, [r4, #4]
 80027ee:	6013      	streq	r3, [r2, #0]
 80027f0:	460c      	movne	r4, r1
 80027f2:	e7eb      	b.n	80027cc <_malloc_r+0x64>
 80027f4:	460c      	mov	r4, r1
 80027f6:	6849      	ldr	r1, [r1, #4]
 80027f8:	e7cc      	b.n	8002794 <_malloc_r+0x2c>
 80027fa:	1cc4      	adds	r4, r0, #3
 80027fc:	f024 0403 	bic.w	r4, r4, #3
 8002800:	42a0      	cmp	r0, r4
 8002802:	d005      	beq.n	8002810 <_malloc_r+0xa8>
 8002804:	1a21      	subs	r1, r4, r0
 8002806:	4630      	mov	r0, r6
 8002808:	f000 fc58 	bl	80030bc <_sbrk_r>
 800280c:	3001      	adds	r0, #1
 800280e:	d0cf      	beq.n	80027b0 <_malloc_r+0x48>
 8002810:	6025      	str	r5, [r4, #0]
 8002812:	e7db      	b.n	80027cc <_malloc_r+0x64>
 8002814:	2000024c 	.word	0x2000024c
 8002818:	20000250 	.word	0x20000250

0800281c <__cvt>:
 800281c:	2b00      	cmp	r3, #0
 800281e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002822:	461e      	mov	r6, r3
 8002824:	bfbb      	ittet	lt
 8002826:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800282a:	461e      	movlt	r6, r3
 800282c:	2300      	movge	r3, #0
 800282e:	232d      	movlt	r3, #45	; 0x2d
 8002830:	b088      	sub	sp, #32
 8002832:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002834:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8002838:	f027 0720 	bic.w	r7, r7, #32
 800283c:	2f46      	cmp	r7, #70	; 0x46
 800283e:	4614      	mov	r4, r2
 8002840:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002842:	700b      	strb	r3, [r1, #0]
 8002844:	d004      	beq.n	8002850 <__cvt+0x34>
 8002846:	2f45      	cmp	r7, #69	; 0x45
 8002848:	d100      	bne.n	800284c <__cvt+0x30>
 800284a:	3501      	adds	r5, #1
 800284c:	2302      	movs	r3, #2
 800284e:	e000      	b.n	8002852 <__cvt+0x36>
 8002850:	2303      	movs	r3, #3
 8002852:	aa07      	add	r2, sp, #28
 8002854:	9204      	str	r2, [sp, #16]
 8002856:	aa06      	add	r2, sp, #24
 8002858:	e9cd a202 	strd	sl, r2, [sp, #8]
 800285c:	e9cd 3500 	strd	r3, r5, [sp]
 8002860:	4622      	mov	r2, r4
 8002862:	4633      	mov	r3, r6
 8002864:	f000 fd70 	bl	8003348 <_dtoa_r>
 8002868:	2f47      	cmp	r7, #71	; 0x47
 800286a:	4680      	mov	r8, r0
 800286c:	d102      	bne.n	8002874 <__cvt+0x58>
 800286e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002870:	07db      	lsls	r3, r3, #31
 8002872:	d526      	bpl.n	80028c2 <__cvt+0xa6>
 8002874:	2f46      	cmp	r7, #70	; 0x46
 8002876:	eb08 0905 	add.w	r9, r8, r5
 800287a:	d111      	bne.n	80028a0 <__cvt+0x84>
 800287c:	f898 3000 	ldrb.w	r3, [r8]
 8002880:	2b30      	cmp	r3, #48	; 0x30
 8002882:	d10a      	bne.n	800289a <__cvt+0x7e>
 8002884:	2200      	movs	r2, #0
 8002886:	2300      	movs	r3, #0
 8002888:	4620      	mov	r0, r4
 800288a:	4631      	mov	r1, r6
 800288c:	f7fe f88c 	bl	80009a8 <__aeabi_dcmpeq>
 8002890:	b918      	cbnz	r0, 800289a <__cvt+0x7e>
 8002892:	f1c5 0501 	rsb	r5, r5, #1
 8002896:	f8ca 5000 	str.w	r5, [sl]
 800289a:	f8da 3000 	ldr.w	r3, [sl]
 800289e:	4499      	add	r9, r3
 80028a0:	2200      	movs	r2, #0
 80028a2:	2300      	movs	r3, #0
 80028a4:	4620      	mov	r0, r4
 80028a6:	4631      	mov	r1, r6
 80028a8:	f7fe f87e 	bl	80009a8 <__aeabi_dcmpeq>
 80028ac:	b938      	cbnz	r0, 80028be <__cvt+0xa2>
 80028ae:	2230      	movs	r2, #48	; 0x30
 80028b0:	9b07      	ldr	r3, [sp, #28]
 80028b2:	454b      	cmp	r3, r9
 80028b4:	d205      	bcs.n	80028c2 <__cvt+0xa6>
 80028b6:	1c59      	adds	r1, r3, #1
 80028b8:	9107      	str	r1, [sp, #28]
 80028ba:	701a      	strb	r2, [r3, #0]
 80028bc:	e7f8      	b.n	80028b0 <__cvt+0x94>
 80028be:	f8cd 901c 	str.w	r9, [sp, #28]
 80028c2:	4640      	mov	r0, r8
 80028c4:	9b07      	ldr	r3, [sp, #28]
 80028c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80028c8:	eba3 0308 	sub.w	r3, r3, r8
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	b008      	add	sp, #32
 80028d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080028d4 <__exponent>:
 80028d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028d6:	2900      	cmp	r1, #0
 80028d8:	bfb4      	ite	lt
 80028da:	232d      	movlt	r3, #45	; 0x2d
 80028dc:	232b      	movge	r3, #43	; 0x2b
 80028de:	4604      	mov	r4, r0
 80028e0:	bfb8      	it	lt
 80028e2:	4249      	neglt	r1, r1
 80028e4:	2909      	cmp	r1, #9
 80028e6:	f804 2b02 	strb.w	r2, [r4], #2
 80028ea:	7043      	strb	r3, [r0, #1]
 80028ec:	dd21      	ble.n	8002932 <__exponent+0x5e>
 80028ee:	f10d 0307 	add.w	r3, sp, #7
 80028f2:	461f      	mov	r7, r3
 80028f4:	260a      	movs	r6, #10
 80028f6:	fb91 f5f6 	sdiv	r5, r1, r6
 80028fa:	fb06 1115 	mls	r1, r6, r5, r1
 80028fe:	2d09      	cmp	r5, #9
 8002900:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002904:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002908:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800290c:	4629      	mov	r1, r5
 800290e:	dc09      	bgt.n	8002924 <__exponent+0x50>
 8002910:	3130      	adds	r1, #48	; 0x30
 8002912:	3b02      	subs	r3, #2
 8002914:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002918:	42bb      	cmp	r3, r7
 800291a:	4622      	mov	r2, r4
 800291c:	d304      	bcc.n	8002928 <__exponent+0x54>
 800291e:	1a10      	subs	r0, r2, r0
 8002920:	b003      	add	sp, #12
 8002922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002924:	4613      	mov	r3, r2
 8002926:	e7e6      	b.n	80028f6 <__exponent+0x22>
 8002928:	f813 2b01 	ldrb.w	r2, [r3], #1
 800292c:	f804 2b01 	strb.w	r2, [r4], #1
 8002930:	e7f2      	b.n	8002918 <__exponent+0x44>
 8002932:	2330      	movs	r3, #48	; 0x30
 8002934:	4419      	add	r1, r3
 8002936:	7083      	strb	r3, [r0, #2]
 8002938:	1d02      	adds	r2, r0, #4
 800293a:	70c1      	strb	r1, [r0, #3]
 800293c:	e7ef      	b.n	800291e <__exponent+0x4a>
	...

08002940 <_printf_float>:
 8002940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002944:	b091      	sub	sp, #68	; 0x44
 8002946:	460c      	mov	r4, r1
 8002948:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800294a:	4693      	mov	fp, r2
 800294c:	461e      	mov	r6, r3
 800294e:	4605      	mov	r5, r0
 8002950:	f001 faae 	bl	8003eb0 <_localeconv_r>
 8002954:	6803      	ldr	r3, [r0, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	9309      	str	r3, [sp, #36]	; 0x24
 800295a:	f7fd fbf9 	bl	8000150 <strlen>
 800295e:	2300      	movs	r3, #0
 8002960:	930e      	str	r3, [sp, #56]	; 0x38
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	900a      	str	r0, [sp, #40]	; 0x28
 8002966:	3307      	adds	r3, #7
 8002968:	f023 0307 	bic.w	r3, r3, #7
 800296c:	f103 0208 	add.w	r2, r3, #8
 8002970:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002974:	f8d4 a000 	ldr.w	sl, [r4]
 8002978:	603a      	str	r2, [r7, #0]
 800297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002982:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8002986:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800298a:	930b      	str	r3, [sp, #44]	; 0x2c
 800298c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002990:	4ba6      	ldr	r3, [pc, #664]	; (8002c2c <_printf_float+0x2ec>)
 8002992:	4638      	mov	r0, r7
 8002994:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002996:	f7fe f839 	bl	8000a0c <__aeabi_dcmpun>
 800299a:	bb68      	cbnz	r0, 80029f8 <_printf_float+0xb8>
 800299c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029a0:	4ba2      	ldr	r3, [pc, #648]	; (8002c2c <_printf_float+0x2ec>)
 80029a2:	4638      	mov	r0, r7
 80029a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80029a6:	f7fe f813 	bl	80009d0 <__aeabi_dcmple>
 80029aa:	bb28      	cbnz	r0, 80029f8 <_printf_float+0xb8>
 80029ac:	2200      	movs	r2, #0
 80029ae:	2300      	movs	r3, #0
 80029b0:	4638      	mov	r0, r7
 80029b2:	4649      	mov	r1, r9
 80029b4:	f7fe f802 	bl	80009bc <__aeabi_dcmplt>
 80029b8:	b110      	cbz	r0, 80029c0 <_printf_float+0x80>
 80029ba:	232d      	movs	r3, #45	; 0x2d
 80029bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029c0:	4f9b      	ldr	r7, [pc, #620]	; (8002c30 <_printf_float+0x2f0>)
 80029c2:	4b9c      	ldr	r3, [pc, #624]	; (8002c34 <_printf_float+0x2f4>)
 80029c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80029c8:	bf98      	it	ls
 80029ca:	461f      	movls	r7, r3
 80029cc:	2303      	movs	r3, #3
 80029ce:	f04f 0900 	mov.w	r9, #0
 80029d2:	6123      	str	r3, [r4, #16]
 80029d4:	f02a 0304 	bic.w	r3, sl, #4
 80029d8:	6023      	str	r3, [r4, #0]
 80029da:	9600      	str	r6, [sp, #0]
 80029dc:	465b      	mov	r3, fp
 80029de:	aa0f      	add	r2, sp, #60	; 0x3c
 80029e0:	4621      	mov	r1, r4
 80029e2:	4628      	mov	r0, r5
 80029e4:	f000 f9e2 	bl	8002dac <_printf_common>
 80029e8:	3001      	adds	r0, #1
 80029ea:	f040 8090 	bne.w	8002b0e <_printf_float+0x1ce>
 80029ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029f2:	b011      	add	sp, #68	; 0x44
 80029f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029f8:	463a      	mov	r2, r7
 80029fa:	464b      	mov	r3, r9
 80029fc:	4638      	mov	r0, r7
 80029fe:	4649      	mov	r1, r9
 8002a00:	f7fe f804 	bl	8000a0c <__aeabi_dcmpun>
 8002a04:	b110      	cbz	r0, 8002a0c <_printf_float+0xcc>
 8002a06:	4f8c      	ldr	r7, [pc, #560]	; (8002c38 <_printf_float+0x2f8>)
 8002a08:	4b8c      	ldr	r3, [pc, #560]	; (8002c3c <_printf_float+0x2fc>)
 8002a0a:	e7db      	b.n	80029c4 <_printf_float+0x84>
 8002a0c:	6863      	ldr	r3, [r4, #4]
 8002a0e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8002a12:	1c59      	adds	r1, r3, #1
 8002a14:	a80d      	add	r0, sp, #52	; 0x34
 8002a16:	a90e      	add	r1, sp, #56	; 0x38
 8002a18:	d140      	bne.n	8002a9c <_printf_float+0x15c>
 8002a1a:	2306      	movs	r3, #6
 8002a1c:	6063      	str	r3, [r4, #4]
 8002a1e:	f04f 0c00 	mov.w	ip, #0
 8002a22:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8002a26:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002a2a:	6863      	ldr	r3, [r4, #4]
 8002a2c:	6022      	str	r2, [r4, #0]
 8002a2e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	463a      	mov	r2, r7
 8002a36:	464b      	mov	r3, r9
 8002a38:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002a3c:	4628      	mov	r0, r5
 8002a3e:	f7ff feed 	bl	800281c <__cvt>
 8002a42:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002a46:	2b47      	cmp	r3, #71	; 0x47
 8002a48:	4607      	mov	r7, r0
 8002a4a:	d109      	bne.n	8002a60 <_printf_float+0x120>
 8002a4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002a4e:	1cd8      	adds	r0, r3, #3
 8002a50:	db02      	blt.n	8002a58 <_printf_float+0x118>
 8002a52:	6862      	ldr	r2, [r4, #4]
 8002a54:	4293      	cmp	r3, r2
 8002a56:	dd47      	ble.n	8002ae8 <_printf_float+0x1a8>
 8002a58:	f1a8 0802 	sub.w	r8, r8, #2
 8002a5c:	fa5f f888 	uxtb.w	r8, r8
 8002a60:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002a64:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002a66:	d824      	bhi.n	8002ab2 <_printf_float+0x172>
 8002a68:	3901      	subs	r1, #1
 8002a6a:	4642      	mov	r2, r8
 8002a6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002a70:	910d      	str	r1, [sp, #52]	; 0x34
 8002a72:	f7ff ff2f 	bl	80028d4 <__exponent>
 8002a76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002a78:	4681      	mov	r9, r0
 8002a7a:	1813      	adds	r3, r2, r0
 8002a7c:	2a01      	cmp	r2, #1
 8002a7e:	6123      	str	r3, [r4, #16]
 8002a80:	dc02      	bgt.n	8002a88 <_printf_float+0x148>
 8002a82:	6822      	ldr	r2, [r4, #0]
 8002a84:	07d1      	lsls	r1, r2, #31
 8002a86:	d501      	bpl.n	8002a8c <_printf_float+0x14c>
 8002a88:	3301      	adds	r3, #1
 8002a8a:	6123      	str	r3, [r4, #16]
 8002a8c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0a2      	beq.n	80029da <_printf_float+0x9a>
 8002a94:	232d      	movs	r3, #45	; 0x2d
 8002a96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a9a:	e79e      	b.n	80029da <_printf_float+0x9a>
 8002a9c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8002aa0:	f000 816e 	beq.w	8002d80 <_printf_float+0x440>
 8002aa4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002aa8:	d1b9      	bne.n	8002a1e <_printf_float+0xde>
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1b7      	bne.n	8002a1e <_printf_float+0xde>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e7b4      	b.n	8002a1c <_printf_float+0xdc>
 8002ab2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002ab6:	d119      	bne.n	8002aec <_printf_float+0x1ac>
 8002ab8:	2900      	cmp	r1, #0
 8002aba:	6863      	ldr	r3, [r4, #4]
 8002abc:	dd0c      	ble.n	8002ad8 <_printf_float+0x198>
 8002abe:	6121      	str	r1, [r4, #16]
 8002ac0:	b913      	cbnz	r3, 8002ac8 <_printf_float+0x188>
 8002ac2:	6822      	ldr	r2, [r4, #0]
 8002ac4:	07d2      	lsls	r2, r2, #31
 8002ac6:	d502      	bpl.n	8002ace <_printf_float+0x18e>
 8002ac8:	3301      	adds	r3, #1
 8002aca:	440b      	add	r3, r1
 8002acc:	6123      	str	r3, [r4, #16]
 8002ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002ad0:	f04f 0900 	mov.w	r9, #0
 8002ad4:	65a3      	str	r3, [r4, #88]	; 0x58
 8002ad6:	e7d9      	b.n	8002a8c <_printf_float+0x14c>
 8002ad8:	b913      	cbnz	r3, 8002ae0 <_printf_float+0x1a0>
 8002ada:	6822      	ldr	r2, [r4, #0]
 8002adc:	07d0      	lsls	r0, r2, #31
 8002ade:	d501      	bpl.n	8002ae4 <_printf_float+0x1a4>
 8002ae0:	3302      	adds	r3, #2
 8002ae2:	e7f3      	b.n	8002acc <_printf_float+0x18c>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e7f1      	b.n	8002acc <_printf_float+0x18c>
 8002ae8:	f04f 0867 	mov.w	r8, #103	; 0x67
 8002aec:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002af0:	4293      	cmp	r3, r2
 8002af2:	db05      	blt.n	8002b00 <_printf_float+0x1c0>
 8002af4:	6822      	ldr	r2, [r4, #0]
 8002af6:	6123      	str	r3, [r4, #16]
 8002af8:	07d1      	lsls	r1, r2, #31
 8002afa:	d5e8      	bpl.n	8002ace <_printf_float+0x18e>
 8002afc:	3301      	adds	r3, #1
 8002afe:	e7e5      	b.n	8002acc <_printf_float+0x18c>
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bfcc      	ite	gt
 8002b04:	2301      	movgt	r3, #1
 8002b06:	f1c3 0302 	rsble	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	e7de      	b.n	8002acc <_printf_float+0x18c>
 8002b0e:	6823      	ldr	r3, [r4, #0]
 8002b10:	055a      	lsls	r2, r3, #21
 8002b12:	d407      	bmi.n	8002b24 <_printf_float+0x1e4>
 8002b14:	6923      	ldr	r3, [r4, #16]
 8002b16:	463a      	mov	r2, r7
 8002b18:	4659      	mov	r1, fp
 8002b1a:	4628      	mov	r0, r5
 8002b1c:	47b0      	blx	r6
 8002b1e:	3001      	adds	r0, #1
 8002b20:	d129      	bne.n	8002b76 <_printf_float+0x236>
 8002b22:	e764      	b.n	80029ee <_printf_float+0xae>
 8002b24:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002b28:	f240 80d7 	bls.w	8002cda <_printf_float+0x39a>
 8002b2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002b30:	2200      	movs	r2, #0
 8002b32:	2300      	movs	r3, #0
 8002b34:	f7fd ff38 	bl	80009a8 <__aeabi_dcmpeq>
 8002b38:	b388      	cbz	r0, 8002b9e <_printf_float+0x25e>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	4a40      	ldr	r2, [pc, #256]	; (8002c40 <_printf_float+0x300>)
 8002b3e:	4659      	mov	r1, fp
 8002b40:	4628      	mov	r0, r5
 8002b42:	47b0      	blx	r6
 8002b44:	3001      	adds	r0, #1
 8002b46:	f43f af52 	beq.w	80029ee <_printf_float+0xae>
 8002b4a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	db02      	blt.n	8002b58 <_printf_float+0x218>
 8002b52:	6823      	ldr	r3, [r4, #0]
 8002b54:	07d8      	lsls	r0, r3, #31
 8002b56:	d50e      	bpl.n	8002b76 <_printf_float+0x236>
 8002b58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002b5c:	4659      	mov	r1, fp
 8002b5e:	4628      	mov	r0, r5
 8002b60:	47b0      	blx	r6
 8002b62:	3001      	adds	r0, #1
 8002b64:	f43f af43 	beq.w	80029ee <_printf_float+0xae>
 8002b68:	2700      	movs	r7, #0
 8002b6a:	f104 081a 	add.w	r8, r4, #26
 8002b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b70:	3b01      	subs	r3, #1
 8002b72:	42bb      	cmp	r3, r7
 8002b74:	dc09      	bgt.n	8002b8a <_printf_float+0x24a>
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	079f      	lsls	r7, r3, #30
 8002b7a:	f100 80fd 	bmi.w	8002d78 <_printf_float+0x438>
 8002b7e:	68e0      	ldr	r0, [r4, #12]
 8002b80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002b82:	4298      	cmp	r0, r3
 8002b84:	bfb8      	it	lt
 8002b86:	4618      	movlt	r0, r3
 8002b88:	e733      	b.n	80029f2 <_printf_float+0xb2>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	4642      	mov	r2, r8
 8002b8e:	4659      	mov	r1, fp
 8002b90:	4628      	mov	r0, r5
 8002b92:	47b0      	blx	r6
 8002b94:	3001      	adds	r0, #1
 8002b96:	f43f af2a 	beq.w	80029ee <_printf_float+0xae>
 8002b9a:	3701      	adds	r7, #1
 8002b9c:	e7e7      	b.n	8002b6e <_printf_float+0x22e>
 8002b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	dc2b      	bgt.n	8002bfc <_printf_float+0x2bc>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	4a26      	ldr	r2, [pc, #152]	; (8002c40 <_printf_float+0x300>)
 8002ba8:	4659      	mov	r1, fp
 8002baa:	4628      	mov	r0, r5
 8002bac:	47b0      	blx	r6
 8002bae:	3001      	adds	r0, #1
 8002bb0:	f43f af1d 	beq.w	80029ee <_printf_float+0xae>
 8002bb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002bb6:	b923      	cbnz	r3, 8002bc2 <_printf_float+0x282>
 8002bb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002bba:	b913      	cbnz	r3, 8002bc2 <_printf_float+0x282>
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	07d9      	lsls	r1, r3, #31
 8002bc0:	d5d9      	bpl.n	8002b76 <_printf_float+0x236>
 8002bc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002bc6:	4659      	mov	r1, fp
 8002bc8:	4628      	mov	r0, r5
 8002bca:	47b0      	blx	r6
 8002bcc:	3001      	adds	r0, #1
 8002bce:	f43f af0e 	beq.w	80029ee <_printf_float+0xae>
 8002bd2:	f04f 0800 	mov.w	r8, #0
 8002bd6:	f104 091a 	add.w	r9, r4, #26
 8002bda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002bdc:	425b      	negs	r3, r3
 8002bde:	4543      	cmp	r3, r8
 8002be0:	dc01      	bgt.n	8002be6 <_printf_float+0x2a6>
 8002be2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002be4:	e797      	b.n	8002b16 <_printf_float+0x1d6>
 8002be6:	2301      	movs	r3, #1
 8002be8:	464a      	mov	r2, r9
 8002bea:	4659      	mov	r1, fp
 8002bec:	4628      	mov	r0, r5
 8002bee:	47b0      	blx	r6
 8002bf0:	3001      	adds	r0, #1
 8002bf2:	f43f aefc 	beq.w	80029ee <_printf_float+0xae>
 8002bf6:	f108 0801 	add.w	r8, r8, #1
 8002bfa:	e7ee      	b.n	8002bda <_printf_float+0x29a>
 8002bfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002bfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c00:	429a      	cmp	r2, r3
 8002c02:	bfa8      	it	ge
 8002c04:	461a      	movge	r2, r3
 8002c06:	2a00      	cmp	r2, #0
 8002c08:	4690      	mov	r8, r2
 8002c0a:	dd07      	ble.n	8002c1c <_printf_float+0x2dc>
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	4659      	mov	r1, fp
 8002c10:	463a      	mov	r2, r7
 8002c12:	4628      	mov	r0, r5
 8002c14:	47b0      	blx	r6
 8002c16:	3001      	adds	r0, #1
 8002c18:	f43f aee9 	beq.w	80029ee <_printf_float+0xae>
 8002c1c:	f104 031a 	add.w	r3, r4, #26
 8002c20:	f04f 0a00 	mov.w	sl, #0
 8002c24:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002c28:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c2a:	e015      	b.n	8002c58 <_printf_float+0x318>
 8002c2c:	7fefffff 	.word	0x7fefffff
 8002c30:	0800496e 	.word	0x0800496e
 8002c34:	0800496a 	.word	0x0800496a
 8002c38:	08004976 	.word	0x08004976
 8002c3c:	08004972 	.word	0x08004972
 8002c40:	0800497a 	.word	0x0800497a
 8002c44:	2301      	movs	r3, #1
 8002c46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002c48:	4659      	mov	r1, fp
 8002c4a:	4628      	mov	r0, r5
 8002c4c:	47b0      	blx	r6
 8002c4e:	3001      	adds	r0, #1
 8002c50:	f43f aecd 	beq.w	80029ee <_printf_float+0xae>
 8002c54:	f10a 0a01 	add.w	sl, sl, #1
 8002c58:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8002c5c:	eba9 0308 	sub.w	r3, r9, r8
 8002c60:	4553      	cmp	r3, sl
 8002c62:	dcef      	bgt.n	8002c44 <_printf_float+0x304>
 8002c64:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	444f      	add	r7, r9
 8002c6c:	db14      	blt.n	8002c98 <_printf_float+0x358>
 8002c6e:	6823      	ldr	r3, [r4, #0]
 8002c70:	07da      	lsls	r2, r3, #31
 8002c72:	d411      	bmi.n	8002c98 <_printf_float+0x358>
 8002c74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c76:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002c78:	eba3 0209 	sub.w	r2, r3, r9
 8002c7c:	eba3 0901 	sub.w	r9, r3, r1
 8002c80:	4591      	cmp	r9, r2
 8002c82:	bfa8      	it	ge
 8002c84:	4691      	movge	r9, r2
 8002c86:	f1b9 0f00 	cmp.w	r9, #0
 8002c8a:	dc0d      	bgt.n	8002ca8 <_printf_float+0x368>
 8002c8c:	2700      	movs	r7, #0
 8002c8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002c92:	f104 081a 	add.w	r8, r4, #26
 8002c96:	e018      	b.n	8002cca <_printf_float+0x38a>
 8002c98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c9c:	4659      	mov	r1, fp
 8002c9e:	4628      	mov	r0, r5
 8002ca0:	47b0      	blx	r6
 8002ca2:	3001      	adds	r0, #1
 8002ca4:	d1e6      	bne.n	8002c74 <_printf_float+0x334>
 8002ca6:	e6a2      	b.n	80029ee <_printf_float+0xae>
 8002ca8:	464b      	mov	r3, r9
 8002caa:	463a      	mov	r2, r7
 8002cac:	4659      	mov	r1, fp
 8002cae:	4628      	mov	r0, r5
 8002cb0:	47b0      	blx	r6
 8002cb2:	3001      	adds	r0, #1
 8002cb4:	d1ea      	bne.n	8002c8c <_printf_float+0x34c>
 8002cb6:	e69a      	b.n	80029ee <_printf_float+0xae>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	4642      	mov	r2, r8
 8002cbc:	4659      	mov	r1, fp
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	47b0      	blx	r6
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	f43f ae93 	beq.w	80029ee <_printf_float+0xae>
 8002cc8:	3701      	adds	r7, #1
 8002cca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	eba3 0309 	sub.w	r3, r3, r9
 8002cd4:	42bb      	cmp	r3, r7
 8002cd6:	dcef      	bgt.n	8002cb8 <_printf_float+0x378>
 8002cd8:	e74d      	b.n	8002b76 <_printf_float+0x236>
 8002cda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002cdc:	2a01      	cmp	r2, #1
 8002cde:	dc01      	bgt.n	8002ce4 <_printf_float+0x3a4>
 8002ce0:	07db      	lsls	r3, r3, #31
 8002ce2:	d538      	bpl.n	8002d56 <_printf_float+0x416>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	463a      	mov	r2, r7
 8002ce8:	4659      	mov	r1, fp
 8002cea:	4628      	mov	r0, r5
 8002cec:	47b0      	blx	r6
 8002cee:	3001      	adds	r0, #1
 8002cf0:	f43f ae7d 	beq.w	80029ee <_printf_float+0xae>
 8002cf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002cf8:	4659      	mov	r1, fp
 8002cfa:	4628      	mov	r0, r5
 8002cfc:	47b0      	blx	r6
 8002cfe:	3001      	adds	r0, #1
 8002d00:	f107 0701 	add.w	r7, r7, #1
 8002d04:	f43f ae73 	beq.w	80029ee <_printf_float+0xae>
 8002d08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002d0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8002d14:	2300      	movs	r3, #0
 8002d16:	f7fd fe47 	bl	80009a8 <__aeabi_dcmpeq>
 8002d1a:	b9c0      	cbnz	r0, 8002d4e <_printf_float+0x40e>
 8002d1c:	4643      	mov	r3, r8
 8002d1e:	463a      	mov	r2, r7
 8002d20:	4659      	mov	r1, fp
 8002d22:	4628      	mov	r0, r5
 8002d24:	47b0      	blx	r6
 8002d26:	3001      	adds	r0, #1
 8002d28:	d10d      	bne.n	8002d46 <_printf_float+0x406>
 8002d2a:	e660      	b.n	80029ee <_printf_float+0xae>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	4642      	mov	r2, r8
 8002d30:	4659      	mov	r1, fp
 8002d32:	4628      	mov	r0, r5
 8002d34:	47b0      	blx	r6
 8002d36:	3001      	adds	r0, #1
 8002d38:	f43f ae59 	beq.w	80029ee <_printf_float+0xae>
 8002d3c:	3701      	adds	r7, #1
 8002d3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d40:	3b01      	subs	r3, #1
 8002d42:	42bb      	cmp	r3, r7
 8002d44:	dcf2      	bgt.n	8002d2c <_printf_float+0x3ec>
 8002d46:	464b      	mov	r3, r9
 8002d48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002d4c:	e6e4      	b.n	8002b18 <_printf_float+0x1d8>
 8002d4e:	2700      	movs	r7, #0
 8002d50:	f104 081a 	add.w	r8, r4, #26
 8002d54:	e7f3      	b.n	8002d3e <_printf_float+0x3fe>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e7e1      	b.n	8002d1e <_printf_float+0x3de>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	4642      	mov	r2, r8
 8002d5e:	4659      	mov	r1, fp
 8002d60:	4628      	mov	r0, r5
 8002d62:	47b0      	blx	r6
 8002d64:	3001      	adds	r0, #1
 8002d66:	f43f ae42 	beq.w	80029ee <_printf_float+0xae>
 8002d6a:	3701      	adds	r7, #1
 8002d6c:	68e3      	ldr	r3, [r4, #12]
 8002d6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	42bb      	cmp	r3, r7
 8002d74:	dcf1      	bgt.n	8002d5a <_printf_float+0x41a>
 8002d76:	e702      	b.n	8002b7e <_printf_float+0x23e>
 8002d78:	2700      	movs	r7, #0
 8002d7a:	f104 0819 	add.w	r8, r4, #25
 8002d7e:	e7f5      	b.n	8002d6c <_printf_float+0x42c>
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f43f ae94 	beq.w	8002aae <_printf_float+0x16e>
 8002d86:	f04f 0c00 	mov.w	ip, #0
 8002d8a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002d8e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8002d92:	6022      	str	r2, [r4, #0]
 8002d94:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002d98:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	463a      	mov	r2, r7
 8002da0:	464b      	mov	r3, r9
 8002da2:	4628      	mov	r0, r5
 8002da4:	f7ff fd3a 	bl	800281c <__cvt>
 8002da8:	4607      	mov	r7, r0
 8002daa:	e64f      	b.n	8002a4c <_printf_float+0x10c>

08002dac <_printf_common>:
 8002dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002db0:	4691      	mov	r9, r2
 8002db2:	461f      	mov	r7, r3
 8002db4:	688a      	ldr	r2, [r1, #8]
 8002db6:	690b      	ldr	r3, [r1, #16]
 8002db8:	4606      	mov	r6, r0
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	bfb8      	it	lt
 8002dbe:	4613      	movlt	r3, r2
 8002dc0:	f8c9 3000 	str.w	r3, [r9]
 8002dc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002dc8:	460c      	mov	r4, r1
 8002dca:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002dce:	b112      	cbz	r2, 8002dd6 <_printf_common+0x2a>
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	f8c9 3000 	str.w	r3, [r9]
 8002dd6:	6823      	ldr	r3, [r4, #0]
 8002dd8:	0699      	lsls	r1, r3, #26
 8002dda:	bf42      	ittt	mi
 8002ddc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002de0:	3302      	addmi	r3, #2
 8002de2:	f8c9 3000 	strmi.w	r3, [r9]
 8002de6:	6825      	ldr	r5, [r4, #0]
 8002de8:	f015 0506 	ands.w	r5, r5, #6
 8002dec:	d107      	bne.n	8002dfe <_printf_common+0x52>
 8002dee:	f104 0a19 	add.w	sl, r4, #25
 8002df2:	68e3      	ldr	r3, [r4, #12]
 8002df4:	f8d9 2000 	ldr.w	r2, [r9]
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	42ab      	cmp	r3, r5
 8002dfc:	dc29      	bgt.n	8002e52 <_printf_common+0xa6>
 8002dfe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002e02:	6822      	ldr	r2, [r4, #0]
 8002e04:	3300      	adds	r3, #0
 8002e06:	bf18      	it	ne
 8002e08:	2301      	movne	r3, #1
 8002e0a:	0692      	lsls	r2, r2, #26
 8002e0c:	d42e      	bmi.n	8002e6c <_printf_common+0xc0>
 8002e0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e12:	4639      	mov	r1, r7
 8002e14:	4630      	mov	r0, r6
 8002e16:	47c0      	blx	r8
 8002e18:	3001      	adds	r0, #1
 8002e1a:	d021      	beq.n	8002e60 <_printf_common+0xb4>
 8002e1c:	6823      	ldr	r3, [r4, #0]
 8002e1e:	68e5      	ldr	r5, [r4, #12]
 8002e20:	f003 0306 	and.w	r3, r3, #6
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	bf18      	it	ne
 8002e28:	2500      	movne	r5, #0
 8002e2a:	f8d9 2000 	ldr.w	r2, [r9]
 8002e2e:	f04f 0900 	mov.w	r9, #0
 8002e32:	bf08      	it	eq
 8002e34:	1aad      	subeq	r5, r5, r2
 8002e36:	68a3      	ldr	r3, [r4, #8]
 8002e38:	6922      	ldr	r2, [r4, #16]
 8002e3a:	bf08      	it	eq
 8002e3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e40:	4293      	cmp	r3, r2
 8002e42:	bfc4      	itt	gt
 8002e44:	1a9b      	subgt	r3, r3, r2
 8002e46:	18ed      	addgt	r5, r5, r3
 8002e48:	341a      	adds	r4, #26
 8002e4a:	454d      	cmp	r5, r9
 8002e4c:	d11a      	bne.n	8002e84 <_printf_common+0xd8>
 8002e4e:	2000      	movs	r0, #0
 8002e50:	e008      	b.n	8002e64 <_printf_common+0xb8>
 8002e52:	2301      	movs	r3, #1
 8002e54:	4652      	mov	r2, sl
 8002e56:	4639      	mov	r1, r7
 8002e58:	4630      	mov	r0, r6
 8002e5a:	47c0      	blx	r8
 8002e5c:	3001      	adds	r0, #1
 8002e5e:	d103      	bne.n	8002e68 <_printf_common+0xbc>
 8002e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e68:	3501      	adds	r5, #1
 8002e6a:	e7c2      	b.n	8002df2 <_printf_common+0x46>
 8002e6c:	2030      	movs	r0, #48	; 0x30
 8002e6e:	18e1      	adds	r1, r4, r3
 8002e70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e7a:	4422      	add	r2, r4
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e82:	e7c4      	b.n	8002e0e <_printf_common+0x62>
 8002e84:	2301      	movs	r3, #1
 8002e86:	4622      	mov	r2, r4
 8002e88:	4639      	mov	r1, r7
 8002e8a:	4630      	mov	r0, r6
 8002e8c:	47c0      	blx	r8
 8002e8e:	3001      	adds	r0, #1
 8002e90:	d0e6      	beq.n	8002e60 <_printf_common+0xb4>
 8002e92:	f109 0901 	add.w	r9, r9, #1
 8002e96:	e7d8      	b.n	8002e4a <_printf_common+0x9e>

08002e98 <_printf_i>:
 8002e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002ea0:	460c      	mov	r4, r1
 8002ea2:	7e09      	ldrb	r1, [r1, #24]
 8002ea4:	b085      	sub	sp, #20
 8002ea6:	296e      	cmp	r1, #110	; 0x6e
 8002ea8:	4617      	mov	r7, r2
 8002eaa:	4606      	mov	r6, r0
 8002eac:	4698      	mov	r8, r3
 8002eae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002eb0:	f000 80b3 	beq.w	800301a <_printf_i+0x182>
 8002eb4:	d822      	bhi.n	8002efc <_printf_i+0x64>
 8002eb6:	2963      	cmp	r1, #99	; 0x63
 8002eb8:	d036      	beq.n	8002f28 <_printf_i+0x90>
 8002eba:	d80a      	bhi.n	8002ed2 <_printf_i+0x3a>
 8002ebc:	2900      	cmp	r1, #0
 8002ebe:	f000 80b9 	beq.w	8003034 <_printf_i+0x19c>
 8002ec2:	2958      	cmp	r1, #88	; 0x58
 8002ec4:	f000 8083 	beq.w	8002fce <_printf_i+0x136>
 8002ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ecc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002ed0:	e032      	b.n	8002f38 <_printf_i+0xa0>
 8002ed2:	2964      	cmp	r1, #100	; 0x64
 8002ed4:	d001      	beq.n	8002eda <_printf_i+0x42>
 8002ed6:	2969      	cmp	r1, #105	; 0x69
 8002ed8:	d1f6      	bne.n	8002ec8 <_printf_i+0x30>
 8002eda:	6820      	ldr	r0, [r4, #0]
 8002edc:	6813      	ldr	r3, [r2, #0]
 8002ede:	0605      	lsls	r5, r0, #24
 8002ee0:	f103 0104 	add.w	r1, r3, #4
 8002ee4:	d52a      	bpl.n	8002f3c <_printf_i+0xa4>
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6011      	str	r1, [r2, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	da03      	bge.n	8002ef6 <_printf_i+0x5e>
 8002eee:	222d      	movs	r2, #45	; 0x2d
 8002ef0:	425b      	negs	r3, r3
 8002ef2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002ef6:	486f      	ldr	r0, [pc, #444]	; (80030b4 <_printf_i+0x21c>)
 8002ef8:	220a      	movs	r2, #10
 8002efa:	e039      	b.n	8002f70 <_printf_i+0xd8>
 8002efc:	2973      	cmp	r1, #115	; 0x73
 8002efe:	f000 809d 	beq.w	800303c <_printf_i+0x1a4>
 8002f02:	d808      	bhi.n	8002f16 <_printf_i+0x7e>
 8002f04:	296f      	cmp	r1, #111	; 0x6f
 8002f06:	d020      	beq.n	8002f4a <_printf_i+0xb2>
 8002f08:	2970      	cmp	r1, #112	; 0x70
 8002f0a:	d1dd      	bne.n	8002ec8 <_printf_i+0x30>
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	f043 0320 	orr.w	r3, r3, #32
 8002f12:	6023      	str	r3, [r4, #0]
 8002f14:	e003      	b.n	8002f1e <_printf_i+0x86>
 8002f16:	2975      	cmp	r1, #117	; 0x75
 8002f18:	d017      	beq.n	8002f4a <_printf_i+0xb2>
 8002f1a:	2978      	cmp	r1, #120	; 0x78
 8002f1c:	d1d4      	bne.n	8002ec8 <_printf_i+0x30>
 8002f1e:	2378      	movs	r3, #120	; 0x78
 8002f20:	4865      	ldr	r0, [pc, #404]	; (80030b8 <_printf_i+0x220>)
 8002f22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f26:	e055      	b.n	8002fd4 <_printf_i+0x13c>
 8002f28:	6813      	ldr	r3, [r2, #0]
 8002f2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f2e:	1d19      	adds	r1, r3, #4
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6011      	str	r1, [r2, #0]
 8002f34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e08c      	b.n	8003056 <_printf_i+0x1be>
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f42:	6011      	str	r1, [r2, #0]
 8002f44:	bf18      	it	ne
 8002f46:	b21b      	sxthne	r3, r3
 8002f48:	e7cf      	b.n	8002eea <_printf_i+0x52>
 8002f4a:	6813      	ldr	r3, [r2, #0]
 8002f4c:	6825      	ldr	r5, [r4, #0]
 8002f4e:	1d18      	adds	r0, r3, #4
 8002f50:	6010      	str	r0, [r2, #0]
 8002f52:	0628      	lsls	r0, r5, #24
 8002f54:	d501      	bpl.n	8002f5a <_printf_i+0xc2>
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	e002      	b.n	8002f60 <_printf_i+0xc8>
 8002f5a:	0668      	lsls	r0, r5, #25
 8002f5c:	d5fb      	bpl.n	8002f56 <_printf_i+0xbe>
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	296f      	cmp	r1, #111	; 0x6f
 8002f62:	bf14      	ite	ne
 8002f64:	220a      	movne	r2, #10
 8002f66:	2208      	moveq	r2, #8
 8002f68:	4852      	ldr	r0, [pc, #328]	; (80030b4 <_printf_i+0x21c>)
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f70:	6865      	ldr	r5, [r4, #4]
 8002f72:	2d00      	cmp	r5, #0
 8002f74:	60a5      	str	r5, [r4, #8]
 8002f76:	f2c0 8095 	blt.w	80030a4 <_printf_i+0x20c>
 8002f7a:	6821      	ldr	r1, [r4, #0]
 8002f7c:	f021 0104 	bic.w	r1, r1, #4
 8002f80:	6021      	str	r1, [r4, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d13d      	bne.n	8003002 <_printf_i+0x16a>
 8002f86:	2d00      	cmp	r5, #0
 8002f88:	f040 808e 	bne.w	80030a8 <_printf_i+0x210>
 8002f8c:	4665      	mov	r5, ip
 8002f8e:	2a08      	cmp	r2, #8
 8002f90:	d10b      	bne.n	8002faa <_printf_i+0x112>
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	07db      	lsls	r3, r3, #31
 8002f96:	d508      	bpl.n	8002faa <_printf_i+0x112>
 8002f98:	6923      	ldr	r3, [r4, #16]
 8002f9a:	6862      	ldr	r2, [r4, #4]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	bfde      	ittt	le
 8002fa0:	2330      	movle	r3, #48	; 0x30
 8002fa2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002fa6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002faa:	ebac 0305 	sub.w	r3, ip, r5
 8002fae:	6123      	str	r3, [r4, #16]
 8002fb0:	f8cd 8000 	str.w	r8, [sp]
 8002fb4:	463b      	mov	r3, r7
 8002fb6:	aa03      	add	r2, sp, #12
 8002fb8:	4621      	mov	r1, r4
 8002fba:	4630      	mov	r0, r6
 8002fbc:	f7ff fef6 	bl	8002dac <_printf_common>
 8002fc0:	3001      	adds	r0, #1
 8002fc2:	d14d      	bne.n	8003060 <_printf_i+0x1c8>
 8002fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fc8:	b005      	add	sp, #20
 8002fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002fce:	4839      	ldr	r0, [pc, #228]	; (80030b4 <_printf_i+0x21c>)
 8002fd0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002fd4:	6813      	ldr	r3, [r2, #0]
 8002fd6:	6821      	ldr	r1, [r4, #0]
 8002fd8:	1d1d      	adds	r5, r3, #4
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6015      	str	r5, [r2, #0]
 8002fde:	060a      	lsls	r2, r1, #24
 8002fe0:	d50b      	bpl.n	8002ffa <_printf_i+0x162>
 8002fe2:	07ca      	lsls	r2, r1, #31
 8002fe4:	bf44      	itt	mi
 8002fe6:	f041 0120 	orrmi.w	r1, r1, #32
 8002fea:	6021      	strmi	r1, [r4, #0]
 8002fec:	b91b      	cbnz	r3, 8002ff6 <_printf_i+0x15e>
 8002fee:	6822      	ldr	r2, [r4, #0]
 8002ff0:	f022 0220 	bic.w	r2, r2, #32
 8002ff4:	6022      	str	r2, [r4, #0]
 8002ff6:	2210      	movs	r2, #16
 8002ff8:	e7b7      	b.n	8002f6a <_printf_i+0xd2>
 8002ffa:	064d      	lsls	r5, r1, #25
 8002ffc:	bf48      	it	mi
 8002ffe:	b29b      	uxthmi	r3, r3
 8003000:	e7ef      	b.n	8002fe2 <_printf_i+0x14a>
 8003002:	4665      	mov	r5, ip
 8003004:	fbb3 f1f2 	udiv	r1, r3, r2
 8003008:	fb02 3311 	mls	r3, r2, r1, r3
 800300c:	5cc3      	ldrb	r3, [r0, r3]
 800300e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003012:	460b      	mov	r3, r1
 8003014:	2900      	cmp	r1, #0
 8003016:	d1f5      	bne.n	8003004 <_printf_i+0x16c>
 8003018:	e7b9      	b.n	8002f8e <_printf_i+0xf6>
 800301a:	6813      	ldr	r3, [r2, #0]
 800301c:	6825      	ldr	r5, [r4, #0]
 800301e:	1d18      	adds	r0, r3, #4
 8003020:	6961      	ldr	r1, [r4, #20]
 8003022:	6010      	str	r0, [r2, #0]
 8003024:	0628      	lsls	r0, r5, #24
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	d501      	bpl.n	800302e <_printf_i+0x196>
 800302a:	6019      	str	r1, [r3, #0]
 800302c:	e002      	b.n	8003034 <_printf_i+0x19c>
 800302e:	066a      	lsls	r2, r5, #25
 8003030:	d5fb      	bpl.n	800302a <_printf_i+0x192>
 8003032:	8019      	strh	r1, [r3, #0]
 8003034:	2300      	movs	r3, #0
 8003036:	4665      	mov	r5, ip
 8003038:	6123      	str	r3, [r4, #16]
 800303a:	e7b9      	b.n	8002fb0 <_printf_i+0x118>
 800303c:	6813      	ldr	r3, [r2, #0]
 800303e:	1d19      	adds	r1, r3, #4
 8003040:	6011      	str	r1, [r2, #0]
 8003042:	681d      	ldr	r5, [r3, #0]
 8003044:	6862      	ldr	r2, [r4, #4]
 8003046:	2100      	movs	r1, #0
 8003048:	4628      	mov	r0, r5
 800304a:	f7ff fb07 	bl	800265c <memchr>
 800304e:	b108      	cbz	r0, 8003054 <_printf_i+0x1bc>
 8003050:	1b40      	subs	r0, r0, r5
 8003052:	6060      	str	r0, [r4, #4]
 8003054:	6863      	ldr	r3, [r4, #4]
 8003056:	6123      	str	r3, [r4, #16]
 8003058:	2300      	movs	r3, #0
 800305a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800305e:	e7a7      	b.n	8002fb0 <_printf_i+0x118>
 8003060:	6923      	ldr	r3, [r4, #16]
 8003062:	462a      	mov	r2, r5
 8003064:	4639      	mov	r1, r7
 8003066:	4630      	mov	r0, r6
 8003068:	47c0      	blx	r8
 800306a:	3001      	adds	r0, #1
 800306c:	d0aa      	beq.n	8002fc4 <_printf_i+0x12c>
 800306e:	6823      	ldr	r3, [r4, #0]
 8003070:	079b      	lsls	r3, r3, #30
 8003072:	d413      	bmi.n	800309c <_printf_i+0x204>
 8003074:	68e0      	ldr	r0, [r4, #12]
 8003076:	9b03      	ldr	r3, [sp, #12]
 8003078:	4298      	cmp	r0, r3
 800307a:	bfb8      	it	lt
 800307c:	4618      	movlt	r0, r3
 800307e:	e7a3      	b.n	8002fc8 <_printf_i+0x130>
 8003080:	2301      	movs	r3, #1
 8003082:	464a      	mov	r2, r9
 8003084:	4639      	mov	r1, r7
 8003086:	4630      	mov	r0, r6
 8003088:	47c0      	blx	r8
 800308a:	3001      	adds	r0, #1
 800308c:	d09a      	beq.n	8002fc4 <_printf_i+0x12c>
 800308e:	3501      	adds	r5, #1
 8003090:	68e3      	ldr	r3, [r4, #12]
 8003092:	9a03      	ldr	r2, [sp, #12]
 8003094:	1a9b      	subs	r3, r3, r2
 8003096:	42ab      	cmp	r3, r5
 8003098:	dcf2      	bgt.n	8003080 <_printf_i+0x1e8>
 800309a:	e7eb      	b.n	8003074 <_printf_i+0x1dc>
 800309c:	2500      	movs	r5, #0
 800309e:	f104 0919 	add.w	r9, r4, #25
 80030a2:	e7f5      	b.n	8003090 <_printf_i+0x1f8>
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1ac      	bne.n	8003002 <_printf_i+0x16a>
 80030a8:	7803      	ldrb	r3, [r0, #0]
 80030aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030b2:	e76c      	b.n	8002f8e <_printf_i+0xf6>
 80030b4:	0800497c 	.word	0x0800497c
 80030b8:	0800498d 	.word	0x0800498d

080030bc <_sbrk_r>:
 80030bc:	b538      	push	{r3, r4, r5, lr}
 80030be:	2300      	movs	r3, #0
 80030c0:	4c05      	ldr	r4, [pc, #20]	; (80030d8 <_sbrk_r+0x1c>)
 80030c2:	4605      	mov	r5, r0
 80030c4:	4608      	mov	r0, r1
 80030c6:	6023      	str	r3, [r4, #0]
 80030c8:	f7fe f826 	bl	8001118 <_sbrk>
 80030cc:	1c43      	adds	r3, r0, #1
 80030ce:	d102      	bne.n	80030d6 <_sbrk_r+0x1a>
 80030d0:	6823      	ldr	r3, [r4, #0]
 80030d2:	b103      	cbz	r3, 80030d6 <_sbrk_r+0x1a>
 80030d4:	602b      	str	r3, [r5, #0]
 80030d6:	bd38      	pop	{r3, r4, r5, pc}
 80030d8:	20000258 	.word	0x20000258

080030dc <_raise_r>:
 80030dc:	291f      	cmp	r1, #31
 80030de:	b538      	push	{r3, r4, r5, lr}
 80030e0:	4604      	mov	r4, r0
 80030e2:	460d      	mov	r5, r1
 80030e4:	d904      	bls.n	80030f0 <_raise_r+0x14>
 80030e6:	2316      	movs	r3, #22
 80030e8:	6003      	str	r3, [r0, #0]
 80030ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030ee:	bd38      	pop	{r3, r4, r5, pc}
 80030f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80030f2:	b112      	cbz	r2, 80030fa <_raise_r+0x1e>
 80030f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80030f8:	b94b      	cbnz	r3, 800310e <_raise_r+0x32>
 80030fa:	4620      	mov	r0, r4
 80030fc:	f000 f830 	bl	8003160 <_getpid_r>
 8003100:	462a      	mov	r2, r5
 8003102:	4601      	mov	r1, r0
 8003104:	4620      	mov	r0, r4
 8003106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800310a:	f000 b817 	b.w	800313c <_kill_r>
 800310e:	2b01      	cmp	r3, #1
 8003110:	d00a      	beq.n	8003128 <_raise_r+0x4c>
 8003112:	1c59      	adds	r1, r3, #1
 8003114:	d103      	bne.n	800311e <_raise_r+0x42>
 8003116:	2316      	movs	r3, #22
 8003118:	6003      	str	r3, [r0, #0]
 800311a:	2001      	movs	r0, #1
 800311c:	e7e7      	b.n	80030ee <_raise_r+0x12>
 800311e:	2400      	movs	r4, #0
 8003120:	4628      	mov	r0, r5
 8003122:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003126:	4798      	blx	r3
 8003128:	2000      	movs	r0, #0
 800312a:	e7e0      	b.n	80030ee <_raise_r+0x12>

0800312c <raise>:
 800312c:	4b02      	ldr	r3, [pc, #8]	; (8003138 <raise+0xc>)
 800312e:	4601      	mov	r1, r0
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	f7ff bfd3 	b.w	80030dc <_raise_r>
 8003136:	bf00      	nop
 8003138:	20000010 	.word	0x20000010

0800313c <_kill_r>:
 800313c:	b538      	push	{r3, r4, r5, lr}
 800313e:	2300      	movs	r3, #0
 8003140:	4c06      	ldr	r4, [pc, #24]	; (800315c <_kill_r+0x20>)
 8003142:	4605      	mov	r5, r0
 8003144:	4608      	mov	r0, r1
 8003146:	4611      	mov	r1, r2
 8003148:	6023      	str	r3, [r4, #0]
 800314a:	f7fd ffca 	bl	80010e2 <_kill>
 800314e:	1c43      	adds	r3, r0, #1
 8003150:	d102      	bne.n	8003158 <_kill_r+0x1c>
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	b103      	cbz	r3, 8003158 <_kill_r+0x1c>
 8003156:	602b      	str	r3, [r5, #0]
 8003158:	bd38      	pop	{r3, r4, r5, pc}
 800315a:	bf00      	nop
 800315c:	20000258 	.word	0x20000258

08003160 <_getpid_r>:
 8003160:	f7fd bfb8 	b.w	80010d4 <_getpid>

08003164 <strcpy>:
 8003164:	4603      	mov	r3, r0
 8003166:	f811 2b01 	ldrb.w	r2, [r1], #1
 800316a:	f803 2b01 	strb.w	r2, [r3], #1
 800316e:	2a00      	cmp	r2, #0
 8003170:	d1f9      	bne.n	8003166 <strcpy+0x2>
 8003172:	4770      	bx	lr

08003174 <_vsniprintf_r>:
 8003174:	b530      	push	{r4, r5, lr}
 8003176:	1e14      	subs	r4, r2, #0
 8003178:	4605      	mov	r5, r0
 800317a:	b09b      	sub	sp, #108	; 0x6c
 800317c:	4618      	mov	r0, r3
 800317e:	da05      	bge.n	800318c <_vsniprintf_r+0x18>
 8003180:	238b      	movs	r3, #139	; 0x8b
 8003182:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003186:	602b      	str	r3, [r5, #0]
 8003188:	b01b      	add	sp, #108	; 0x6c
 800318a:	bd30      	pop	{r4, r5, pc}
 800318c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003190:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003194:	bf0c      	ite	eq
 8003196:	4623      	moveq	r3, r4
 8003198:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800319c:	9302      	str	r3, [sp, #8]
 800319e:	9305      	str	r3, [sp, #20]
 80031a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031a4:	9100      	str	r1, [sp, #0]
 80031a6:	9104      	str	r1, [sp, #16]
 80031a8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80031ac:	4602      	mov	r2, r0
 80031ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80031b0:	4669      	mov	r1, sp
 80031b2:	4628      	mov	r0, r5
 80031b4:	f001 f9d0 	bl	8004558 <_svfiprintf_r>
 80031b8:	1c43      	adds	r3, r0, #1
 80031ba:	bfbc      	itt	lt
 80031bc:	238b      	movlt	r3, #139	; 0x8b
 80031be:	602b      	strlt	r3, [r5, #0]
 80031c0:	2c00      	cmp	r4, #0
 80031c2:	d0e1      	beq.n	8003188 <_vsniprintf_r+0x14>
 80031c4:	2200      	movs	r2, #0
 80031c6:	9b00      	ldr	r3, [sp, #0]
 80031c8:	701a      	strb	r2, [r3, #0]
 80031ca:	e7dd      	b.n	8003188 <_vsniprintf_r+0x14>

080031cc <vsniprintf>:
 80031cc:	b507      	push	{r0, r1, r2, lr}
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	4613      	mov	r3, r2
 80031d2:	460a      	mov	r2, r1
 80031d4:	4601      	mov	r1, r0
 80031d6:	4803      	ldr	r0, [pc, #12]	; (80031e4 <vsniprintf+0x18>)
 80031d8:	6800      	ldr	r0, [r0, #0]
 80031da:	f7ff ffcb 	bl	8003174 <_vsniprintf_r>
 80031de:	b003      	add	sp, #12
 80031e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80031e4:	20000010 	.word	0x20000010

080031e8 <_vsiprintf_r>:
 80031e8:	b500      	push	{lr}
 80031ea:	b09b      	sub	sp, #108	; 0x6c
 80031ec:	9100      	str	r1, [sp, #0]
 80031ee:	9104      	str	r1, [sp, #16]
 80031f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031f4:	9105      	str	r1, [sp, #20]
 80031f6:	9102      	str	r1, [sp, #8]
 80031f8:	4905      	ldr	r1, [pc, #20]	; (8003210 <_vsiprintf_r+0x28>)
 80031fa:	9103      	str	r1, [sp, #12]
 80031fc:	4669      	mov	r1, sp
 80031fe:	f001 f9ab 	bl	8004558 <_svfiprintf_r>
 8003202:	2200      	movs	r2, #0
 8003204:	9b00      	ldr	r3, [sp, #0]
 8003206:	701a      	strb	r2, [r3, #0]
 8003208:	b01b      	add	sp, #108	; 0x6c
 800320a:	f85d fb04 	ldr.w	pc, [sp], #4
 800320e:	bf00      	nop
 8003210:	ffff0208 	.word	0xffff0208

08003214 <vsiprintf>:
 8003214:	4613      	mov	r3, r2
 8003216:	460a      	mov	r2, r1
 8003218:	4601      	mov	r1, r0
 800321a:	4802      	ldr	r0, [pc, #8]	; (8003224 <vsiprintf+0x10>)
 800321c:	6800      	ldr	r0, [r0, #0]
 800321e:	f7ff bfe3 	b.w	80031e8 <_vsiprintf_r>
 8003222:	bf00      	nop
 8003224:	20000010 	.word	0x20000010

08003228 <quorem>:
 8003228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800322c:	6903      	ldr	r3, [r0, #16]
 800322e:	690c      	ldr	r4, [r1, #16]
 8003230:	4680      	mov	r8, r0
 8003232:	42a3      	cmp	r3, r4
 8003234:	f2c0 8084 	blt.w	8003340 <quorem+0x118>
 8003238:	3c01      	subs	r4, #1
 800323a:	f101 0714 	add.w	r7, r1, #20
 800323e:	f100 0614 	add.w	r6, r0, #20
 8003242:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003246:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800324a:	3501      	adds	r5, #1
 800324c:	fbb0 f5f5 	udiv	r5, r0, r5
 8003250:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003254:	eb06 030c 	add.w	r3, r6, ip
 8003258:	eb07 090c 	add.w	r9, r7, ip
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	b39d      	cbz	r5, 80032c8 <quorem+0xa0>
 8003260:	f04f 0a00 	mov.w	sl, #0
 8003264:	4638      	mov	r0, r7
 8003266:	46b6      	mov	lr, r6
 8003268:	46d3      	mov	fp, sl
 800326a:	f850 2b04 	ldr.w	r2, [r0], #4
 800326e:	b293      	uxth	r3, r2
 8003270:	fb05 a303 	mla	r3, r5, r3, sl
 8003274:	0c12      	lsrs	r2, r2, #16
 8003276:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800327a:	fb05 a202 	mla	r2, r5, r2, sl
 800327e:	b29b      	uxth	r3, r3
 8003280:	ebab 0303 	sub.w	r3, fp, r3
 8003284:	f8de b000 	ldr.w	fp, [lr]
 8003288:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800328c:	fa1f fb8b 	uxth.w	fp, fp
 8003290:	445b      	add	r3, fp
 8003292:	fa1f fb82 	uxth.w	fp, r2
 8003296:	f8de 2000 	ldr.w	r2, [lr]
 800329a:	4581      	cmp	r9, r0
 800329c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80032a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80032aa:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80032ae:	f84e 3b04 	str.w	r3, [lr], #4
 80032b2:	d2da      	bcs.n	800326a <quorem+0x42>
 80032b4:	f856 300c 	ldr.w	r3, [r6, ip]
 80032b8:	b933      	cbnz	r3, 80032c8 <quorem+0xa0>
 80032ba:	9b01      	ldr	r3, [sp, #4]
 80032bc:	3b04      	subs	r3, #4
 80032be:	429e      	cmp	r6, r3
 80032c0:	461a      	mov	r2, r3
 80032c2:	d331      	bcc.n	8003328 <quorem+0x100>
 80032c4:	f8c8 4010 	str.w	r4, [r8, #16]
 80032c8:	4640      	mov	r0, r8
 80032ca:	f001 f815 	bl	80042f8 <__mcmp>
 80032ce:	2800      	cmp	r0, #0
 80032d0:	db26      	blt.n	8003320 <quorem+0xf8>
 80032d2:	4630      	mov	r0, r6
 80032d4:	f04f 0c00 	mov.w	ip, #0
 80032d8:	3501      	adds	r5, #1
 80032da:	f857 1b04 	ldr.w	r1, [r7], #4
 80032de:	f8d0 e000 	ldr.w	lr, [r0]
 80032e2:	b28b      	uxth	r3, r1
 80032e4:	ebac 0303 	sub.w	r3, ip, r3
 80032e8:	fa1f f28e 	uxth.w	r2, lr
 80032ec:	4413      	add	r3, r2
 80032ee:	0c0a      	lsrs	r2, r1, #16
 80032f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80032f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80032fe:	45b9      	cmp	r9, r7
 8003300:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003304:	f840 3b04 	str.w	r3, [r0], #4
 8003308:	d2e7      	bcs.n	80032da <quorem+0xb2>
 800330a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800330e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003312:	b92a      	cbnz	r2, 8003320 <quorem+0xf8>
 8003314:	3b04      	subs	r3, #4
 8003316:	429e      	cmp	r6, r3
 8003318:	461a      	mov	r2, r3
 800331a:	d30b      	bcc.n	8003334 <quorem+0x10c>
 800331c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003320:	4628      	mov	r0, r5
 8003322:	b003      	add	sp, #12
 8003324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	3b04      	subs	r3, #4
 800332c:	2a00      	cmp	r2, #0
 800332e:	d1c9      	bne.n	80032c4 <quorem+0x9c>
 8003330:	3c01      	subs	r4, #1
 8003332:	e7c4      	b.n	80032be <quorem+0x96>
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	3b04      	subs	r3, #4
 8003338:	2a00      	cmp	r2, #0
 800333a:	d1ef      	bne.n	800331c <quorem+0xf4>
 800333c:	3c01      	subs	r4, #1
 800333e:	e7ea      	b.n	8003316 <quorem+0xee>
 8003340:	2000      	movs	r0, #0
 8003342:	e7ee      	b.n	8003322 <quorem+0xfa>
 8003344:	0000      	movs	r0, r0
	...

08003348 <_dtoa_r>:
 8003348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800334c:	4616      	mov	r6, r2
 800334e:	461f      	mov	r7, r3
 8003350:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003352:	b095      	sub	sp, #84	; 0x54
 8003354:	4604      	mov	r4, r0
 8003356:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800335a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800335e:	b93d      	cbnz	r5, 8003370 <_dtoa_r+0x28>
 8003360:	2010      	movs	r0, #16
 8003362:	f7ff f96b 	bl	800263c <malloc>
 8003366:	6260      	str	r0, [r4, #36]	; 0x24
 8003368:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800336c:	6005      	str	r5, [r0, #0]
 800336e:	60c5      	str	r5, [r0, #12]
 8003370:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003372:	6819      	ldr	r1, [r3, #0]
 8003374:	b151      	cbz	r1, 800338c <_dtoa_r+0x44>
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	2301      	movs	r3, #1
 800337a:	4093      	lsls	r3, r2
 800337c:	604a      	str	r2, [r1, #4]
 800337e:	608b      	str	r3, [r1, #8]
 8003380:	4620      	mov	r0, r4
 8003382:	f000 fdd9 	bl	8003f38 <_Bfree>
 8003386:	2200      	movs	r2, #0
 8003388:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	1e3b      	subs	r3, r7, #0
 800338e:	bfaf      	iteee	ge
 8003390:	2300      	movge	r3, #0
 8003392:	2201      	movlt	r2, #1
 8003394:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003398:	9303      	strlt	r3, [sp, #12]
 800339a:	bfac      	ite	ge
 800339c:	f8c8 3000 	strge.w	r3, [r8]
 80033a0:	f8c8 2000 	strlt.w	r2, [r8]
 80033a4:	4bae      	ldr	r3, [pc, #696]	; (8003660 <_dtoa_r+0x318>)
 80033a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80033aa:	ea33 0308 	bics.w	r3, r3, r8
 80033ae:	d11b      	bne.n	80033e8 <_dtoa_r+0xa0>
 80033b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80033b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	9b02      	ldr	r3, [sp, #8]
 80033ba:	b923      	cbnz	r3, 80033c6 <_dtoa_r+0x7e>
 80033bc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80033c0:	2800      	cmp	r0, #0
 80033c2:	f000 8545 	beq.w	8003e50 <_dtoa_r+0xb08>
 80033c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80033c8:	b953      	cbnz	r3, 80033e0 <_dtoa_r+0x98>
 80033ca:	4ba6      	ldr	r3, [pc, #664]	; (8003664 <_dtoa_r+0x31c>)
 80033cc:	e021      	b.n	8003412 <_dtoa_r+0xca>
 80033ce:	4ba6      	ldr	r3, [pc, #664]	; (8003668 <_dtoa_r+0x320>)
 80033d0:	9306      	str	r3, [sp, #24]
 80033d2:	3308      	adds	r3, #8
 80033d4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	9806      	ldr	r0, [sp, #24]
 80033da:	b015      	add	sp, #84	; 0x54
 80033dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033e0:	4ba0      	ldr	r3, [pc, #640]	; (8003664 <_dtoa_r+0x31c>)
 80033e2:	9306      	str	r3, [sp, #24]
 80033e4:	3303      	adds	r3, #3
 80033e6:	e7f5      	b.n	80033d4 <_dtoa_r+0x8c>
 80033e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80033ec:	2200      	movs	r2, #0
 80033ee:	2300      	movs	r3, #0
 80033f0:	4630      	mov	r0, r6
 80033f2:	4639      	mov	r1, r7
 80033f4:	f7fd fad8 	bl	80009a8 <__aeabi_dcmpeq>
 80033f8:	4682      	mov	sl, r0
 80033fa:	b160      	cbz	r0, 8003416 <_dtoa_r+0xce>
 80033fc:	2301      	movs	r3, #1
 80033fe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 8520 	beq.w	8003e4a <_dtoa_r+0xb02>
 800340a:	4b98      	ldr	r3, [pc, #608]	; (800366c <_dtoa_r+0x324>)
 800340c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	3b01      	subs	r3, #1
 8003412:	9306      	str	r3, [sp, #24]
 8003414:	e7e0      	b.n	80033d8 <_dtoa_r+0x90>
 8003416:	ab12      	add	r3, sp, #72	; 0x48
 8003418:	9301      	str	r3, [sp, #4]
 800341a:	ab13      	add	r3, sp, #76	; 0x4c
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	4632      	mov	r2, r6
 8003420:	463b      	mov	r3, r7
 8003422:	4620      	mov	r0, r4
 8003424:	f000 ffe0 	bl	80043e8 <__d2b>
 8003428:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800342c:	4683      	mov	fp, r0
 800342e:	2d00      	cmp	r5, #0
 8003430:	d07d      	beq.n	800352e <_dtoa_r+0x1e6>
 8003432:	46b0      	mov	r8, r6
 8003434:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003438:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800343c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8003440:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003444:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8003448:	2200      	movs	r2, #0
 800344a:	4b89      	ldr	r3, [pc, #548]	; (8003670 <_dtoa_r+0x328>)
 800344c:	4640      	mov	r0, r8
 800344e:	4649      	mov	r1, r9
 8003450:	f7fc fe8a 	bl	8000168 <__aeabi_dsub>
 8003454:	a37c      	add	r3, pc, #496	; (adr r3, 8003648 <_dtoa_r+0x300>)
 8003456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345a:	f7fd f83d 	bl	80004d8 <__aeabi_dmul>
 800345e:	a37c      	add	r3, pc, #496	; (adr r3, 8003650 <_dtoa_r+0x308>)
 8003460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003464:	f7fc fe82 	bl	800016c <__adddf3>
 8003468:	4606      	mov	r6, r0
 800346a:	4628      	mov	r0, r5
 800346c:	460f      	mov	r7, r1
 800346e:	f7fc ffc9 	bl	8000404 <__aeabi_i2d>
 8003472:	a379      	add	r3, pc, #484	; (adr r3, 8003658 <_dtoa_r+0x310>)
 8003474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003478:	f7fd f82e 	bl	80004d8 <__aeabi_dmul>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4630      	mov	r0, r6
 8003482:	4639      	mov	r1, r7
 8003484:	f7fc fe72 	bl	800016c <__adddf3>
 8003488:	4606      	mov	r6, r0
 800348a:	460f      	mov	r7, r1
 800348c:	f7fd fad4 	bl	8000a38 <__aeabi_d2iz>
 8003490:	2200      	movs	r2, #0
 8003492:	4682      	mov	sl, r0
 8003494:	2300      	movs	r3, #0
 8003496:	4630      	mov	r0, r6
 8003498:	4639      	mov	r1, r7
 800349a:	f7fd fa8f 	bl	80009bc <__aeabi_dcmplt>
 800349e:	b148      	cbz	r0, 80034b4 <_dtoa_r+0x16c>
 80034a0:	4650      	mov	r0, sl
 80034a2:	f7fc ffaf 	bl	8000404 <__aeabi_i2d>
 80034a6:	4632      	mov	r2, r6
 80034a8:	463b      	mov	r3, r7
 80034aa:	f7fd fa7d 	bl	80009a8 <__aeabi_dcmpeq>
 80034ae:	b908      	cbnz	r0, 80034b4 <_dtoa_r+0x16c>
 80034b0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80034b4:	f1ba 0f16 	cmp.w	sl, #22
 80034b8:	d85a      	bhi.n	8003570 <_dtoa_r+0x228>
 80034ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80034be:	496d      	ldr	r1, [pc, #436]	; (8003674 <_dtoa_r+0x32c>)
 80034c0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80034c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034c8:	f7fd fa96 	bl	80009f8 <__aeabi_dcmpgt>
 80034cc:	2800      	cmp	r0, #0
 80034ce:	d051      	beq.n	8003574 <_dtoa_r+0x22c>
 80034d0:	2300      	movs	r3, #0
 80034d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80034d6:	930d      	str	r3, [sp, #52]	; 0x34
 80034d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80034da:	1b5d      	subs	r5, r3, r5
 80034dc:	1e6b      	subs	r3, r5, #1
 80034de:	9307      	str	r3, [sp, #28]
 80034e0:	bf43      	ittte	mi
 80034e2:	2300      	movmi	r3, #0
 80034e4:	f1c5 0901 	rsbmi	r9, r5, #1
 80034e8:	9307      	strmi	r3, [sp, #28]
 80034ea:	f04f 0900 	movpl.w	r9, #0
 80034ee:	f1ba 0f00 	cmp.w	sl, #0
 80034f2:	db41      	blt.n	8003578 <_dtoa_r+0x230>
 80034f4:	9b07      	ldr	r3, [sp, #28]
 80034f6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80034fa:	4453      	add	r3, sl
 80034fc:	9307      	str	r3, [sp, #28]
 80034fe:	2300      	movs	r3, #0
 8003500:	9308      	str	r3, [sp, #32]
 8003502:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003504:	2b09      	cmp	r3, #9
 8003506:	f200 808f 	bhi.w	8003628 <_dtoa_r+0x2e0>
 800350a:	2b05      	cmp	r3, #5
 800350c:	bfc4      	itt	gt
 800350e:	3b04      	subgt	r3, #4
 8003510:	931e      	strgt	r3, [sp, #120]	; 0x78
 8003512:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003514:	bfc8      	it	gt
 8003516:	2500      	movgt	r5, #0
 8003518:	f1a3 0302 	sub.w	r3, r3, #2
 800351c:	bfd8      	it	le
 800351e:	2501      	movle	r5, #1
 8003520:	2b03      	cmp	r3, #3
 8003522:	f200 808d 	bhi.w	8003640 <_dtoa_r+0x2f8>
 8003526:	e8df f003 	tbb	[pc, r3]
 800352a:	7d7b      	.short	0x7d7b
 800352c:	6f2f      	.short	0x6f2f
 800352e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003532:	441d      	add	r5, r3
 8003534:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003538:	2820      	cmp	r0, #32
 800353a:	dd13      	ble.n	8003564 <_dtoa_r+0x21c>
 800353c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003540:	9b02      	ldr	r3, [sp, #8]
 8003542:	fa08 f800 	lsl.w	r8, r8, r0
 8003546:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800354a:	fa23 f000 	lsr.w	r0, r3, r0
 800354e:	ea48 0000 	orr.w	r0, r8, r0
 8003552:	f7fc ff47 	bl	80003e4 <__aeabi_ui2d>
 8003556:	2301      	movs	r3, #1
 8003558:	4680      	mov	r8, r0
 800355a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800355e:	3d01      	subs	r5, #1
 8003560:	9310      	str	r3, [sp, #64]	; 0x40
 8003562:	e771      	b.n	8003448 <_dtoa_r+0x100>
 8003564:	9b02      	ldr	r3, [sp, #8]
 8003566:	f1c0 0020 	rsb	r0, r0, #32
 800356a:	fa03 f000 	lsl.w	r0, r3, r0
 800356e:	e7f0      	b.n	8003552 <_dtoa_r+0x20a>
 8003570:	2301      	movs	r3, #1
 8003572:	e7b0      	b.n	80034d6 <_dtoa_r+0x18e>
 8003574:	900d      	str	r0, [sp, #52]	; 0x34
 8003576:	e7af      	b.n	80034d8 <_dtoa_r+0x190>
 8003578:	f1ca 0300 	rsb	r3, sl, #0
 800357c:	9308      	str	r3, [sp, #32]
 800357e:	2300      	movs	r3, #0
 8003580:	eba9 090a 	sub.w	r9, r9, sl
 8003584:	930c      	str	r3, [sp, #48]	; 0x30
 8003586:	e7bc      	b.n	8003502 <_dtoa_r+0x1ba>
 8003588:	2301      	movs	r3, #1
 800358a:	9309      	str	r3, [sp, #36]	; 0x24
 800358c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800358e:	2b00      	cmp	r3, #0
 8003590:	dd74      	ble.n	800367c <_dtoa_r+0x334>
 8003592:	4698      	mov	r8, r3
 8003594:	9304      	str	r3, [sp, #16]
 8003596:	2200      	movs	r2, #0
 8003598:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800359a:	6072      	str	r2, [r6, #4]
 800359c:	2204      	movs	r2, #4
 800359e:	f102 0014 	add.w	r0, r2, #20
 80035a2:	4298      	cmp	r0, r3
 80035a4:	6871      	ldr	r1, [r6, #4]
 80035a6:	d96e      	bls.n	8003686 <_dtoa_r+0x33e>
 80035a8:	4620      	mov	r0, r4
 80035aa:	f000 fc91 	bl	8003ed0 <_Balloc>
 80035ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035b0:	6030      	str	r0, [r6, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f1b8 0f0e 	cmp.w	r8, #14
 80035b8:	9306      	str	r3, [sp, #24]
 80035ba:	f200 80ed 	bhi.w	8003798 <_dtoa_r+0x450>
 80035be:	2d00      	cmp	r5, #0
 80035c0:	f000 80ea 	beq.w	8003798 <_dtoa_r+0x450>
 80035c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80035c8:	f1ba 0f00 	cmp.w	sl, #0
 80035cc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80035d0:	dd77      	ble.n	80036c2 <_dtoa_r+0x37a>
 80035d2:	4a28      	ldr	r2, [pc, #160]	; (8003674 <_dtoa_r+0x32c>)
 80035d4:	f00a 030f 	and.w	r3, sl, #15
 80035d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80035dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80035e0:	06f0      	lsls	r0, r6, #27
 80035e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80035ea:	d568      	bpl.n	80036be <_dtoa_r+0x376>
 80035ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80035f0:	4b21      	ldr	r3, [pc, #132]	; (8003678 <_dtoa_r+0x330>)
 80035f2:	2503      	movs	r5, #3
 80035f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80035f8:	f7fd f898 	bl	800072c <__aeabi_ddiv>
 80035fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003600:	f006 060f 	and.w	r6, r6, #15
 8003604:	4f1c      	ldr	r7, [pc, #112]	; (8003678 <_dtoa_r+0x330>)
 8003606:	e04f      	b.n	80036a8 <_dtoa_r+0x360>
 8003608:	2301      	movs	r3, #1
 800360a:	9309      	str	r3, [sp, #36]	; 0x24
 800360c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800360e:	4453      	add	r3, sl
 8003610:	f103 0801 	add.w	r8, r3, #1
 8003614:	9304      	str	r3, [sp, #16]
 8003616:	4643      	mov	r3, r8
 8003618:	2b01      	cmp	r3, #1
 800361a:	bfb8      	it	lt
 800361c:	2301      	movlt	r3, #1
 800361e:	e7ba      	b.n	8003596 <_dtoa_r+0x24e>
 8003620:	2300      	movs	r3, #0
 8003622:	e7b2      	b.n	800358a <_dtoa_r+0x242>
 8003624:	2300      	movs	r3, #0
 8003626:	e7f0      	b.n	800360a <_dtoa_r+0x2c2>
 8003628:	2501      	movs	r5, #1
 800362a:	2300      	movs	r3, #0
 800362c:	9509      	str	r5, [sp, #36]	; 0x24
 800362e:	931e      	str	r3, [sp, #120]	; 0x78
 8003630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003634:	2200      	movs	r2, #0
 8003636:	9304      	str	r3, [sp, #16]
 8003638:	4698      	mov	r8, r3
 800363a:	2312      	movs	r3, #18
 800363c:	921f      	str	r2, [sp, #124]	; 0x7c
 800363e:	e7aa      	b.n	8003596 <_dtoa_r+0x24e>
 8003640:	2301      	movs	r3, #1
 8003642:	9309      	str	r3, [sp, #36]	; 0x24
 8003644:	e7f4      	b.n	8003630 <_dtoa_r+0x2e8>
 8003646:	bf00      	nop
 8003648:	636f4361 	.word	0x636f4361
 800364c:	3fd287a7 	.word	0x3fd287a7
 8003650:	8b60c8b3 	.word	0x8b60c8b3
 8003654:	3fc68a28 	.word	0x3fc68a28
 8003658:	509f79fb 	.word	0x509f79fb
 800365c:	3fd34413 	.word	0x3fd34413
 8003660:	7ff00000 	.word	0x7ff00000
 8003664:	080049a7 	.word	0x080049a7
 8003668:	0800499e 	.word	0x0800499e
 800366c:	0800497b 	.word	0x0800497b
 8003670:	3ff80000 	.word	0x3ff80000
 8003674:	080049d8 	.word	0x080049d8
 8003678:	080049b0 	.word	0x080049b0
 800367c:	2301      	movs	r3, #1
 800367e:	9304      	str	r3, [sp, #16]
 8003680:	4698      	mov	r8, r3
 8003682:	461a      	mov	r2, r3
 8003684:	e7da      	b.n	800363c <_dtoa_r+0x2f4>
 8003686:	3101      	adds	r1, #1
 8003688:	6071      	str	r1, [r6, #4]
 800368a:	0052      	lsls	r2, r2, #1
 800368c:	e787      	b.n	800359e <_dtoa_r+0x256>
 800368e:	07f1      	lsls	r1, r6, #31
 8003690:	d508      	bpl.n	80036a4 <_dtoa_r+0x35c>
 8003692:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003696:	e9d7 2300 	ldrd	r2, r3, [r7]
 800369a:	f7fc ff1d 	bl	80004d8 <__aeabi_dmul>
 800369e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80036a2:	3501      	adds	r5, #1
 80036a4:	1076      	asrs	r6, r6, #1
 80036a6:	3708      	adds	r7, #8
 80036a8:	2e00      	cmp	r6, #0
 80036aa:	d1f0      	bne.n	800368e <_dtoa_r+0x346>
 80036ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80036b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036b4:	f7fd f83a 	bl	800072c <__aeabi_ddiv>
 80036b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80036bc:	e01b      	b.n	80036f6 <_dtoa_r+0x3ae>
 80036be:	2502      	movs	r5, #2
 80036c0:	e7a0      	b.n	8003604 <_dtoa_r+0x2bc>
 80036c2:	f000 80a4 	beq.w	800380e <_dtoa_r+0x4c6>
 80036c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80036ca:	f1ca 0600 	rsb	r6, sl, #0
 80036ce:	4ba0      	ldr	r3, [pc, #640]	; (8003950 <_dtoa_r+0x608>)
 80036d0:	f006 020f 	and.w	r2, r6, #15
 80036d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	f7fc fefc 	bl	80004d8 <__aeabi_dmul>
 80036e0:	2502      	movs	r5, #2
 80036e2:	2300      	movs	r3, #0
 80036e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80036e8:	4f9a      	ldr	r7, [pc, #616]	; (8003954 <_dtoa_r+0x60c>)
 80036ea:	1136      	asrs	r6, r6, #4
 80036ec:	2e00      	cmp	r6, #0
 80036ee:	f040 8083 	bne.w	80037f8 <_dtoa_r+0x4b0>
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1e0      	bne.n	80036b8 <_dtoa_r+0x370>
 80036f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 808a 	beq.w	8003812 <_dtoa_r+0x4ca>
 80036fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003702:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003706:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800370a:	2200      	movs	r2, #0
 800370c:	4b92      	ldr	r3, [pc, #584]	; (8003958 <_dtoa_r+0x610>)
 800370e:	f7fd f955 	bl	80009bc <__aeabi_dcmplt>
 8003712:	2800      	cmp	r0, #0
 8003714:	d07d      	beq.n	8003812 <_dtoa_r+0x4ca>
 8003716:	f1b8 0f00 	cmp.w	r8, #0
 800371a:	d07a      	beq.n	8003812 <_dtoa_r+0x4ca>
 800371c:	9b04      	ldr	r3, [sp, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	dd36      	ble.n	8003790 <_dtoa_r+0x448>
 8003722:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003726:	2200      	movs	r2, #0
 8003728:	4b8c      	ldr	r3, [pc, #560]	; (800395c <_dtoa_r+0x614>)
 800372a:	f7fc fed5 	bl	80004d8 <__aeabi_dmul>
 800372e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003732:	9e04      	ldr	r6, [sp, #16]
 8003734:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8003738:	3501      	adds	r5, #1
 800373a:	4628      	mov	r0, r5
 800373c:	f7fc fe62 	bl	8000404 <__aeabi_i2d>
 8003740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003744:	f7fc fec8 	bl	80004d8 <__aeabi_dmul>
 8003748:	2200      	movs	r2, #0
 800374a:	4b85      	ldr	r3, [pc, #532]	; (8003960 <_dtoa_r+0x618>)
 800374c:	f7fc fd0e 	bl	800016c <__adddf3>
 8003750:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003754:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003758:	950b      	str	r5, [sp, #44]	; 0x2c
 800375a:	2e00      	cmp	r6, #0
 800375c:	d15c      	bne.n	8003818 <_dtoa_r+0x4d0>
 800375e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003762:	2200      	movs	r2, #0
 8003764:	4b7f      	ldr	r3, [pc, #508]	; (8003964 <_dtoa_r+0x61c>)
 8003766:	f7fc fcff 	bl	8000168 <__aeabi_dsub>
 800376a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800376c:	462b      	mov	r3, r5
 800376e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003772:	f7fd f941 	bl	80009f8 <__aeabi_dcmpgt>
 8003776:	2800      	cmp	r0, #0
 8003778:	f040 8281 	bne.w	8003c7e <_dtoa_r+0x936>
 800377c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003782:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003786:	f7fd f919 	bl	80009bc <__aeabi_dcmplt>
 800378a:	2800      	cmp	r0, #0
 800378c:	f040 8275 	bne.w	8003c7a <_dtoa_r+0x932>
 8003790:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003794:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003798:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800379a:	2b00      	cmp	r3, #0
 800379c:	f2c0 814b 	blt.w	8003a36 <_dtoa_r+0x6ee>
 80037a0:	f1ba 0f0e 	cmp.w	sl, #14
 80037a4:	f300 8147 	bgt.w	8003a36 <_dtoa_r+0x6ee>
 80037a8:	4b69      	ldr	r3, [pc, #420]	; (8003950 <_dtoa_r+0x608>)
 80037aa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80037ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80037b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f280 80d7 	bge.w	800396c <_dtoa_r+0x624>
 80037be:	f1b8 0f00 	cmp.w	r8, #0
 80037c2:	f300 80d3 	bgt.w	800396c <_dtoa_r+0x624>
 80037c6:	f040 8257 	bne.w	8003c78 <_dtoa_r+0x930>
 80037ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80037ce:	2200      	movs	r2, #0
 80037d0:	4b64      	ldr	r3, [pc, #400]	; (8003964 <_dtoa_r+0x61c>)
 80037d2:	f7fc fe81 	bl	80004d8 <__aeabi_dmul>
 80037d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80037da:	f7fd f903 	bl	80009e4 <__aeabi_dcmpge>
 80037de:	4646      	mov	r6, r8
 80037e0:	4647      	mov	r7, r8
 80037e2:	2800      	cmp	r0, #0
 80037e4:	f040 822d 	bne.w	8003c42 <_dtoa_r+0x8fa>
 80037e8:	9b06      	ldr	r3, [sp, #24]
 80037ea:	9a06      	ldr	r2, [sp, #24]
 80037ec:	1c5d      	adds	r5, r3, #1
 80037ee:	2331      	movs	r3, #49	; 0x31
 80037f0:	f10a 0a01 	add.w	sl, sl, #1
 80037f4:	7013      	strb	r3, [r2, #0]
 80037f6:	e228      	b.n	8003c4a <_dtoa_r+0x902>
 80037f8:	07f2      	lsls	r2, r6, #31
 80037fa:	d505      	bpl.n	8003808 <_dtoa_r+0x4c0>
 80037fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003800:	f7fc fe6a 	bl	80004d8 <__aeabi_dmul>
 8003804:	2301      	movs	r3, #1
 8003806:	3501      	adds	r5, #1
 8003808:	1076      	asrs	r6, r6, #1
 800380a:	3708      	adds	r7, #8
 800380c:	e76e      	b.n	80036ec <_dtoa_r+0x3a4>
 800380e:	2502      	movs	r5, #2
 8003810:	e771      	b.n	80036f6 <_dtoa_r+0x3ae>
 8003812:	4657      	mov	r7, sl
 8003814:	4646      	mov	r6, r8
 8003816:	e790      	b.n	800373a <_dtoa_r+0x3f2>
 8003818:	4b4d      	ldr	r3, [pc, #308]	; (8003950 <_dtoa_r+0x608>)
 800381a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800381e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8003822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003824:	2b00      	cmp	r3, #0
 8003826:	d048      	beq.n	80038ba <_dtoa_r+0x572>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	2000      	movs	r0, #0
 800382e:	494e      	ldr	r1, [pc, #312]	; (8003968 <_dtoa_r+0x620>)
 8003830:	f7fc ff7c 	bl	800072c <__aeabi_ddiv>
 8003834:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003838:	f7fc fc96 	bl	8000168 <__aeabi_dsub>
 800383c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003840:	9d06      	ldr	r5, [sp, #24]
 8003842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003846:	f7fd f8f7 	bl	8000a38 <__aeabi_d2iz>
 800384a:	9011      	str	r0, [sp, #68]	; 0x44
 800384c:	f7fc fdda 	bl	8000404 <__aeabi_i2d>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003858:	f7fc fc86 	bl	8000168 <__aeabi_dsub>
 800385c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800385e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003862:	3330      	adds	r3, #48	; 0x30
 8003864:	f805 3b01 	strb.w	r3, [r5], #1
 8003868:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800386c:	f7fd f8a6 	bl	80009bc <__aeabi_dcmplt>
 8003870:	2800      	cmp	r0, #0
 8003872:	d163      	bne.n	800393c <_dtoa_r+0x5f4>
 8003874:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003878:	2000      	movs	r0, #0
 800387a:	4937      	ldr	r1, [pc, #220]	; (8003958 <_dtoa_r+0x610>)
 800387c:	f7fc fc74 	bl	8000168 <__aeabi_dsub>
 8003880:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003884:	f7fd f89a 	bl	80009bc <__aeabi_dcmplt>
 8003888:	2800      	cmp	r0, #0
 800388a:	f040 80b5 	bne.w	80039f8 <_dtoa_r+0x6b0>
 800388e:	9b06      	ldr	r3, [sp, #24]
 8003890:	1aeb      	subs	r3, r5, r3
 8003892:	429e      	cmp	r6, r3
 8003894:	f77f af7c 	ble.w	8003790 <_dtoa_r+0x448>
 8003898:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800389c:	2200      	movs	r2, #0
 800389e:	4b2f      	ldr	r3, [pc, #188]	; (800395c <_dtoa_r+0x614>)
 80038a0:	f7fc fe1a 	bl	80004d8 <__aeabi_dmul>
 80038a4:	2200      	movs	r2, #0
 80038a6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80038aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038ae:	4b2b      	ldr	r3, [pc, #172]	; (800395c <_dtoa_r+0x614>)
 80038b0:	f7fc fe12 	bl	80004d8 <__aeabi_dmul>
 80038b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80038b8:	e7c3      	b.n	8003842 <_dtoa_r+0x4fa>
 80038ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80038be:	f7fc fe0b 	bl	80004d8 <__aeabi_dmul>
 80038c2:	9b06      	ldr	r3, [sp, #24]
 80038c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80038c8:	199d      	adds	r5, r3, r6
 80038ca:	461e      	mov	r6, r3
 80038cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038d0:	f7fd f8b2 	bl	8000a38 <__aeabi_d2iz>
 80038d4:	9011      	str	r0, [sp, #68]	; 0x44
 80038d6:	f7fc fd95 	bl	8000404 <__aeabi_i2d>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038e2:	f7fc fc41 	bl	8000168 <__aeabi_dsub>
 80038e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80038e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80038ec:	3330      	adds	r3, #48	; 0x30
 80038ee:	f806 3b01 	strb.w	r3, [r6], #1
 80038f2:	42ae      	cmp	r6, r5
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	d124      	bne.n	8003944 <_dtoa_r+0x5fc>
 80038fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80038fe:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <_dtoa_r+0x620>)
 8003900:	f7fc fc34 	bl	800016c <__adddf3>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800390c:	f7fd f874 	bl	80009f8 <__aeabi_dcmpgt>
 8003910:	2800      	cmp	r0, #0
 8003912:	d171      	bne.n	80039f8 <_dtoa_r+0x6b0>
 8003914:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003918:	2000      	movs	r0, #0
 800391a:	4913      	ldr	r1, [pc, #76]	; (8003968 <_dtoa_r+0x620>)
 800391c:	f7fc fc24 	bl	8000168 <__aeabi_dsub>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003928:	f7fd f848 	bl	80009bc <__aeabi_dcmplt>
 800392c:	2800      	cmp	r0, #0
 800392e:	f43f af2f 	beq.w	8003790 <_dtoa_r+0x448>
 8003932:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003936:	1e6a      	subs	r2, r5, #1
 8003938:	2b30      	cmp	r3, #48	; 0x30
 800393a:	d001      	beq.n	8003940 <_dtoa_r+0x5f8>
 800393c:	46ba      	mov	sl, r7
 800393e:	e04a      	b.n	80039d6 <_dtoa_r+0x68e>
 8003940:	4615      	mov	r5, r2
 8003942:	e7f6      	b.n	8003932 <_dtoa_r+0x5ea>
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <_dtoa_r+0x614>)
 8003946:	f7fc fdc7 	bl	80004d8 <__aeabi_dmul>
 800394a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800394e:	e7bd      	b.n	80038cc <_dtoa_r+0x584>
 8003950:	080049d8 	.word	0x080049d8
 8003954:	080049b0 	.word	0x080049b0
 8003958:	3ff00000 	.word	0x3ff00000
 800395c:	40240000 	.word	0x40240000
 8003960:	401c0000 	.word	0x401c0000
 8003964:	40140000 	.word	0x40140000
 8003968:	3fe00000 	.word	0x3fe00000
 800396c:	9d06      	ldr	r5, [sp, #24]
 800396e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003976:	4630      	mov	r0, r6
 8003978:	4639      	mov	r1, r7
 800397a:	f7fc fed7 	bl	800072c <__aeabi_ddiv>
 800397e:	f7fd f85b 	bl	8000a38 <__aeabi_d2iz>
 8003982:	4681      	mov	r9, r0
 8003984:	f7fc fd3e 	bl	8000404 <__aeabi_i2d>
 8003988:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800398c:	f7fc fda4 	bl	80004d8 <__aeabi_dmul>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4630      	mov	r0, r6
 8003996:	4639      	mov	r1, r7
 8003998:	f7fc fbe6 	bl	8000168 <__aeabi_dsub>
 800399c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80039a0:	f805 6b01 	strb.w	r6, [r5], #1
 80039a4:	9e06      	ldr	r6, [sp, #24]
 80039a6:	4602      	mov	r2, r0
 80039a8:	1bae      	subs	r6, r5, r6
 80039aa:	45b0      	cmp	r8, r6
 80039ac:	460b      	mov	r3, r1
 80039ae:	d135      	bne.n	8003a1c <_dtoa_r+0x6d4>
 80039b0:	f7fc fbdc 	bl	800016c <__adddf3>
 80039b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039b8:	4606      	mov	r6, r0
 80039ba:	460f      	mov	r7, r1
 80039bc:	f7fd f81c 	bl	80009f8 <__aeabi_dcmpgt>
 80039c0:	b9c8      	cbnz	r0, 80039f6 <_dtoa_r+0x6ae>
 80039c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039c6:	4630      	mov	r0, r6
 80039c8:	4639      	mov	r1, r7
 80039ca:	f7fc ffed 	bl	80009a8 <__aeabi_dcmpeq>
 80039ce:	b110      	cbz	r0, 80039d6 <_dtoa_r+0x68e>
 80039d0:	f019 0f01 	tst.w	r9, #1
 80039d4:	d10f      	bne.n	80039f6 <_dtoa_r+0x6ae>
 80039d6:	4659      	mov	r1, fp
 80039d8:	4620      	mov	r0, r4
 80039da:	f000 faad 	bl	8003f38 <_Bfree>
 80039de:	2300      	movs	r3, #0
 80039e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80039e2:	702b      	strb	r3, [r5, #0]
 80039e4:	f10a 0301 	add.w	r3, sl, #1
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f43f acf3 	beq.w	80033d8 <_dtoa_r+0x90>
 80039f2:	601d      	str	r5, [r3, #0]
 80039f4:	e4f0      	b.n	80033d8 <_dtoa_r+0x90>
 80039f6:	4657      	mov	r7, sl
 80039f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80039fc:	1e6b      	subs	r3, r5, #1
 80039fe:	2a39      	cmp	r2, #57	; 0x39
 8003a00:	d106      	bne.n	8003a10 <_dtoa_r+0x6c8>
 8003a02:	9a06      	ldr	r2, [sp, #24]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d107      	bne.n	8003a18 <_dtoa_r+0x6d0>
 8003a08:	2330      	movs	r3, #48	; 0x30
 8003a0a:	7013      	strb	r3, [r2, #0]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	3701      	adds	r7, #1
 8003a10:	781a      	ldrb	r2, [r3, #0]
 8003a12:	3201      	adds	r2, #1
 8003a14:	701a      	strb	r2, [r3, #0]
 8003a16:	e791      	b.n	800393c <_dtoa_r+0x5f4>
 8003a18:	461d      	mov	r5, r3
 8003a1a:	e7ed      	b.n	80039f8 <_dtoa_r+0x6b0>
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	4b99      	ldr	r3, [pc, #612]	; (8003c84 <_dtoa_r+0x93c>)
 8003a20:	f7fc fd5a 	bl	80004d8 <__aeabi_dmul>
 8003a24:	2200      	movs	r2, #0
 8003a26:	2300      	movs	r3, #0
 8003a28:	4606      	mov	r6, r0
 8003a2a:	460f      	mov	r7, r1
 8003a2c:	f7fc ffbc 	bl	80009a8 <__aeabi_dcmpeq>
 8003a30:	2800      	cmp	r0, #0
 8003a32:	d09e      	beq.n	8003972 <_dtoa_r+0x62a>
 8003a34:	e7cf      	b.n	80039d6 <_dtoa_r+0x68e>
 8003a36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a38:	2a00      	cmp	r2, #0
 8003a3a:	f000 8088 	beq.w	8003b4e <_dtoa_r+0x806>
 8003a3e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003a40:	2a01      	cmp	r2, #1
 8003a42:	dc6d      	bgt.n	8003b20 <_dtoa_r+0x7d8>
 8003a44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003a46:	2a00      	cmp	r2, #0
 8003a48:	d066      	beq.n	8003b18 <_dtoa_r+0x7d0>
 8003a4a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003a4e:	464d      	mov	r5, r9
 8003a50:	9e08      	ldr	r6, [sp, #32]
 8003a52:	9a07      	ldr	r2, [sp, #28]
 8003a54:	2101      	movs	r1, #1
 8003a56:	441a      	add	r2, r3
 8003a58:	4620      	mov	r0, r4
 8003a5a:	4499      	add	r9, r3
 8003a5c:	9207      	str	r2, [sp, #28]
 8003a5e:	f000 fb0b 	bl	8004078 <__i2b>
 8003a62:	4607      	mov	r7, r0
 8003a64:	2d00      	cmp	r5, #0
 8003a66:	dd0b      	ble.n	8003a80 <_dtoa_r+0x738>
 8003a68:	9b07      	ldr	r3, [sp, #28]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	dd08      	ble.n	8003a80 <_dtoa_r+0x738>
 8003a6e:	42ab      	cmp	r3, r5
 8003a70:	bfa8      	it	ge
 8003a72:	462b      	movge	r3, r5
 8003a74:	9a07      	ldr	r2, [sp, #28]
 8003a76:	eba9 0903 	sub.w	r9, r9, r3
 8003a7a:	1aed      	subs	r5, r5, r3
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	9307      	str	r3, [sp, #28]
 8003a80:	9b08      	ldr	r3, [sp, #32]
 8003a82:	b1eb      	cbz	r3, 8003ac0 <_dtoa_r+0x778>
 8003a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d065      	beq.n	8003b56 <_dtoa_r+0x80e>
 8003a8a:	b18e      	cbz	r6, 8003ab0 <_dtoa_r+0x768>
 8003a8c:	4639      	mov	r1, r7
 8003a8e:	4632      	mov	r2, r6
 8003a90:	4620      	mov	r0, r4
 8003a92:	f000 fb8f 	bl	80041b4 <__pow5mult>
 8003a96:	465a      	mov	r2, fp
 8003a98:	4601      	mov	r1, r0
 8003a9a:	4607      	mov	r7, r0
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	f000 faf4 	bl	800408a <__multiply>
 8003aa2:	4659      	mov	r1, fp
 8003aa4:	900a      	str	r0, [sp, #40]	; 0x28
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	f000 fa46 	bl	8003f38 <_Bfree>
 8003aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003aae:	469b      	mov	fp, r3
 8003ab0:	9b08      	ldr	r3, [sp, #32]
 8003ab2:	1b9a      	subs	r2, r3, r6
 8003ab4:	d004      	beq.n	8003ac0 <_dtoa_r+0x778>
 8003ab6:	4659      	mov	r1, fp
 8003ab8:	4620      	mov	r0, r4
 8003aba:	f000 fb7b 	bl	80041b4 <__pow5mult>
 8003abe:	4683      	mov	fp, r0
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	f000 fad8 	bl	8004078 <__i2b>
 8003ac8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003aca:	4606      	mov	r6, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 81c6 	beq.w	8003e5e <_dtoa_r+0xb16>
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	4601      	mov	r1, r0
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	f000 fb6c 	bl	80041b4 <__pow5mult>
 8003adc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003ade:	4606      	mov	r6, r0
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	dc3e      	bgt.n	8003b62 <_dtoa_r+0x81a>
 8003ae4:	9b02      	ldr	r3, [sp, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d137      	bne.n	8003b5a <_dtoa_r+0x812>
 8003aea:	9b03      	ldr	r3, [sp, #12]
 8003aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d134      	bne.n	8003b5e <_dtoa_r+0x816>
 8003af4:	9b03      	ldr	r3, [sp, #12]
 8003af6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003afa:	0d1b      	lsrs	r3, r3, #20
 8003afc:	051b      	lsls	r3, r3, #20
 8003afe:	b12b      	cbz	r3, 8003b0c <_dtoa_r+0x7c4>
 8003b00:	9b07      	ldr	r3, [sp, #28]
 8003b02:	f109 0901 	add.w	r9, r9, #1
 8003b06:	3301      	adds	r3, #1
 8003b08:	9307      	str	r3, [sp, #28]
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	9308      	str	r3, [sp, #32]
 8003b0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d128      	bne.n	8003b66 <_dtoa_r+0x81e>
 8003b14:	2001      	movs	r0, #1
 8003b16:	e02e      	b.n	8003b76 <_dtoa_r+0x82e>
 8003b18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003b1a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003b1e:	e796      	b.n	8003a4e <_dtoa_r+0x706>
 8003b20:	9b08      	ldr	r3, [sp, #32]
 8003b22:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8003b26:	42b3      	cmp	r3, r6
 8003b28:	bfb7      	itett	lt
 8003b2a:	9b08      	ldrlt	r3, [sp, #32]
 8003b2c:	1b9e      	subge	r6, r3, r6
 8003b2e:	1af2      	sublt	r2, r6, r3
 8003b30:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8003b32:	bfbf      	itttt	lt
 8003b34:	9608      	strlt	r6, [sp, #32]
 8003b36:	189b      	addlt	r3, r3, r2
 8003b38:	930c      	strlt	r3, [sp, #48]	; 0x30
 8003b3a:	2600      	movlt	r6, #0
 8003b3c:	f1b8 0f00 	cmp.w	r8, #0
 8003b40:	bfb9      	ittee	lt
 8003b42:	eba9 0508 	sublt.w	r5, r9, r8
 8003b46:	2300      	movlt	r3, #0
 8003b48:	464d      	movge	r5, r9
 8003b4a:	4643      	movge	r3, r8
 8003b4c:	e781      	b.n	8003a52 <_dtoa_r+0x70a>
 8003b4e:	9e08      	ldr	r6, [sp, #32]
 8003b50:	464d      	mov	r5, r9
 8003b52:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003b54:	e786      	b.n	8003a64 <_dtoa_r+0x71c>
 8003b56:	9a08      	ldr	r2, [sp, #32]
 8003b58:	e7ad      	b.n	8003ab6 <_dtoa_r+0x76e>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	e7d6      	b.n	8003b0c <_dtoa_r+0x7c4>
 8003b5e:	9b02      	ldr	r3, [sp, #8]
 8003b60:	e7d4      	b.n	8003b0c <_dtoa_r+0x7c4>
 8003b62:	2300      	movs	r3, #0
 8003b64:	9308      	str	r3, [sp, #32]
 8003b66:	6933      	ldr	r3, [r6, #16]
 8003b68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003b6c:	6918      	ldr	r0, [r3, #16]
 8003b6e:	f000 fa35 	bl	8003fdc <__hi0bits>
 8003b72:	f1c0 0020 	rsb	r0, r0, #32
 8003b76:	9b07      	ldr	r3, [sp, #28]
 8003b78:	4418      	add	r0, r3
 8003b7a:	f010 001f 	ands.w	r0, r0, #31
 8003b7e:	d047      	beq.n	8003c10 <_dtoa_r+0x8c8>
 8003b80:	f1c0 0320 	rsb	r3, r0, #32
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	dd3b      	ble.n	8003c00 <_dtoa_r+0x8b8>
 8003b88:	9b07      	ldr	r3, [sp, #28]
 8003b8a:	f1c0 001c 	rsb	r0, r0, #28
 8003b8e:	4481      	add	r9, r0
 8003b90:	4405      	add	r5, r0
 8003b92:	4403      	add	r3, r0
 8003b94:	9307      	str	r3, [sp, #28]
 8003b96:	f1b9 0f00 	cmp.w	r9, #0
 8003b9a:	dd05      	ble.n	8003ba8 <_dtoa_r+0x860>
 8003b9c:	4659      	mov	r1, fp
 8003b9e:	464a      	mov	r2, r9
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f000 fb55 	bl	8004250 <__lshift>
 8003ba6:	4683      	mov	fp, r0
 8003ba8:	9b07      	ldr	r3, [sp, #28]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	dd05      	ble.n	8003bba <_dtoa_r+0x872>
 8003bae:	4631      	mov	r1, r6
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	f000 fb4c 	bl	8004250 <__lshift>
 8003bb8:	4606      	mov	r6, r0
 8003bba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bbc:	b353      	cbz	r3, 8003c14 <_dtoa_r+0x8cc>
 8003bbe:	4631      	mov	r1, r6
 8003bc0:	4658      	mov	r0, fp
 8003bc2:	f000 fb99 	bl	80042f8 <__mcmp>
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	da24      	bge.n	8003c14 <_dtoa_r+0x8cc>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	4659      	mov	r1, fp
 8003bce:	220a      	movs	r2, #10
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	f000 f9c8 	bl	8003f66 <__multadd>
 8003bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bd8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003bdc:	4683      	mov	fp, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 8144 	beq.w	8003e6c <_dtoa_r+0xb24>
 8003be4:	2300      	movs	r3, #0
 8003be6:	4639      	mov	r1, r7
 8003be8:	220a      	movs	r2, #10
 8003bea:	4620      	mov	r0, r4
 8003bec:	f000 f9bb 	bl	8003f66 <__multadd>
 8003bf0:	9b04      	ldr	r3, [sp, #16]
 8003bf2:	4607      	mov	r7, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	dc4d      	bgt.n	8003c94 <_dtoa_r+0x94c>
 8003bf8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	dd4a      	ble.n	8003c94 <_dtoa_r+0x94c>
 8003bfe:	e011      	b.n	8003c24 <_dtoa_r+0x8dc>
 8003c00:	d0c9      	beq.n	8003b96 <_dtoa_r+0x84e>
 8003c02:	9a07      	ldr	r2, [sp, #28]
 8003c04:	331c      	adds	r3, #28
 8003c06:	441a      	add	r2, r3
 8003c08:	4499      	add	r9, r3
 8003c0a:	441d      	add	r5, r3
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	e7c1      	b.n	8003b94 <_dtoa_r+0x84c>
 8003c10:	4603      	mov	r3, r0
 8003c12:	e7f6      	b.n	8003c02 <_dtoa_r+0x8ba>
 8003c14:	f1b8 0f00 	cmp.w	r8, #0
 8003c18:	dc36      	bgt.n	8003c88 <_dtoa_r+0x940>
 8003c1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	dd33      	ble.n	8003c88 <_dtoa_r+0x940>
 8003c20:	f8cd 8010 	str.w	r8, [sp, #16]
 8003c24:	9b04      	ldr	r3, [sp, #16]
 8003c26:	b963      	cbnz	r3, 8003c42 <_dtoa_r+0x8fa>
 8003c28:	4631      	mov	r1, r6
 8003c2a:	2205      	movs	r2, #5
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	f000 f99a 	bl	8003f66 <__multadd>
 8003c32:	4601      	mov	r1, r0
 8003c34:	4606      	mov	r6, r0
 8003c36:	4658      	mov	r0, fp
 8003c38:	f000 fb5e 	bl	80042f8 <__mcmp>
 8003c3c:	2800      	cmp	r0, #0
 8003c3e:	f73f add3 	bgt.w	80037e8 <_dtoa_r+0x4a0>
 8003c42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003c44:	9d06      	ldr	r5, [sp, #24]
 8003c46:	ea6f 0a03 	mvn.w	sl, r3
 8003c4a:	f04f 0900 	mov.w	r9, #0
 8003c4e:	4631      	mov	r1, r6
 8003c50:	4620      	mov	r0, r4
 8003c52:	f000 f971 	bl	8003f38 <_Bfree>
 8003c56:	2f00      	cmp	r7, #0
 8003c58:	f43f aebd 	beq.w	80039d6 <_dtoa_r+0x68e>
 8003c5c:	f1b9 0f00 	cmp.w	r9, #0
 8003c60:	d005      	beq.n	8003c6e <_dtoa_r+0x926>
 8003c62:	45b9      	cmp	r9, r7
 8003c64:	d003      	beq.n	8003c6e <_dtoa_r+0x926>
 8003c66:	4649      	mov	r1, r9
 8003c68:	4620      	mov	r0, r4
 8003c6a:	f000 f965 	bl	8003f38 <_Bfree>
 8003c6e:	4639      	mov	r1, r7
 8003c70:	4620      	mov	r0, r4
 8003c72:	f000 f961 	bl	8003f38 <_Bfree>
 8003c76:	e6ae      	b.n	80039d6 <_dtoa_r+0x68e>
 8003c78:	2600      	movs	r6, #0
 8003c7a:	4637      	mov	r7, r6
 8003c7c:	e7e1      	b.n	8003c42 <_dtoa_r+0x8fa>
 8003c7e:	46ba      	mov	sl, r7
 8003c80:	4637      	mov	r7, r6
 8003c82:	e5b1      	b.n	80037e8 <_dtoa_r+0x4a0>
 8003c84:	40240000 	.word	0x40240000
 8003c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c8a:	f8cd 8010 	str.w	r8, [sp, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 80f3 	beq.w	8003e7a <_dtoa_r+0xb32>
 8003c94:	2d00      	cmp	r5, #0
 8003c96:	dd05      	ble.n	8003ca4 <_dtoa_r+0x95c>
 8003c98:	4639      	mov	r1, r7
 8003c9a:	462a      	mov	r2, r5
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	f000 fad7 	bl	8004250 <__lshift>
 8003ca2:	4607      	mov	r7, r0
 8003ca4:	9b08      	ldr	r3, [sp, #32]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d04c      	beq.n	8003d44 <_dtoa_r+0x9fc>
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4620      	mov	r0, r4
 8003cae:	f000 f90f 	bl	8003ed0 <_Balloc>
 8003cb2:	4605      	mov	r5, r0
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	f107 010c 	add.w	r1, r7, #12
 8003cba:	3202      	adds	r2, #2
 8003cbc:	0092      	lsls	r2, r2, #2
 8003cbe:	300c      	adds	r0, #12
 8003cc0:	f7fe fcda 	bl	8002678 <memcpy>
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f000 fac1 	bl	8004250 <__lshift>
 8003cce:	46b9      	mov	r9, r7
 8003cd0:	4607      	mov	r7, r0
 8003cd2:	9b06      	ldr	r3, [sp, #24]
 8003cd4:	9307      	str	r3, [sp, #28]
 8003cd6:	9b02      	ldr	r3, [sp, #8]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	9308      	str	r3, [sp, #32]
 8003cde:	4631      	mov	r1, r6
 8003ce0:	4658      	mov	r0, fp
 8003ce2:	f7ff faa1 	bl	8003228 <quorem>
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	4605      	mov	r5, r0
 8003cea:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003cee:	4658      	mov	r0, fp
 8003cf0:	f000 fb02 	bl	80042f8 <__mcmp>
 8003cf4:	463a      	mov	r2, r7
 8003cf6:	9002      	str	r0, [sp, #8]
 8003cf8:	4631      	mov	r1, r6
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	f000 fb16 	bl	800432c <__mdiff>
 8003d00:	68c3      	ldr	r3, [r0, #12]
 8003d02:	4602      	mov	r2, r0
 8003d04:	bb03      	cbnz	r3, 8003d48 <_dtoa_r+0xa00>
 8003d06:	4601      	mov	r1, r0
 8003d08:	9009      	str	r0, [sp, #36]	; 0x24
 8003d0a:	4658      	mov	r0, fp
 8003d0c:	f000 faf4 	bl	80042f8 <__mcmp>
 8003d10:	4603      	mov	r3, r0
 8003d12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d14:	4611      	mov	r1, r2
 8003d16:	4620      	mov	r0, r4
 8003d18:	9309      	str	r3, [sp, #36]	; 0x24
 8003d1a:	f000 f90d 	bl	8003f38 <_Bfree>
 8003d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d20:	b9a3      	cbnz	r3, 8003d4c <_dtoa_r+0xa04>
 8003d22:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003d24:	b992      	cbnz	r2, 8003d4c <_dtoa_r+0xa04>
 8003d26:	9a08      	ldr	r2, [sp, #32]
 8003d28:	b982      	cbnz	r2, 8003d4c <_dtoa_r+0xa04>
 8003d2a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003d2e:	d029      	beq.n	8003d84 <_dtoa_r+0xa3c>
 8003d30:	9b02      	ldr	r3, [sp, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	dd01      	ble.n	8003d3a <_dtoa_r+0x9f2>
 8003d36:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8003d3a:	9b07      	ldr	r3, [sp, #28]
 8003d3c:	1c5d      	adds	r5, r3, #1
 8003d3e:	f883 8000 	strb.w	r8, [r3]
 8003d42:	e784      	b.n	8003c4e <_dtoa_r+0x906>
 8003d44:	4638      	mov	r0, r7
 8003d46:	e7c2      	b.n	8003cce <_dtoa_r+0x986>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e7e3      	b.n	8003d14 <_dtoa_r+0x9cc>
 8003d4c:	9a02      	ldr	r2, [sp, #8]
 8003d4e:	2a00      	cmp	r2, #0
 8003d50:	db04      	blt.n	8003d5c <_dtoa_r+0xa14>
 8003d52:	d123      	bne.n	8003d9c <_dtoa_r+0xa54>
 8003d54:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003d56:	bb0a      	cbnz	r2, 8003d9c <_dtoa_r+0xa54>
 8003d58:	9a08      	ldr	r2, [sp, #32]
 8003d5a:	b9fa      	cbnz	r2, 8003d9c <_dtoa_r+0xa54>
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	ddec      	ble.n	8003d3a <_dtoa_r+0x9f2>
 8003d60:	4659      	mov	r1, fp
 8003d62:	2201      	movs	r2, #1
 8003d64:	4620      	mov	r0, r4
 8003d66:	f000 fa73 	bl	8004250 <__lshift>
 8003d6a:	4631      	mov	r1, r6
 8003d6c:	4683      	mov	fp, r0
 8003d6e:	f000 fac3 	bl	80042f8 <__mcmp>
 8003d72:	2800      	cmp	r0, #0
 8003d74:	dc03      	bgt.n	8003d7e <_dtoa_r+0xa36>
 8003d76:	d1e0      	bne.n	8003d3a <_dtoa_r+0x9f2>
 8003d78:	f018 0f01 	tst.w	r8, #1
 8003d7c:	d0dd      	beq.n	8003d3a <_dtoa_r+0x9f2>
 8003d7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003d82:	d1d8      	bne.n	8003d36 <_dtoa_r+0x9ee>
 8003d84:	9b07      	ldr	r3, [sp, #28]
 8003d86:	9a07      	ldr	r2, [sp, #28]
 8003d88:	1c5d      	adds	r5, r3, #1
 8003d8a:	2339      	movs	r3, #57	; 0x39
 8003d8c:	7013      	strb	r3, [r2, #0]
 8003d8e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003d92:	1e6a      	subs	r2, r5, #1
 8003d94:	2b39      	cmp	r3, #57	; 0x39
 8003d96:	d04d      	beq.n	8003e34 <_dtoa_r+0xaec>
 8003d98:	3301      	adds	r3, #1
 8003d9a:	e052      	b.n	8003e42 <_dtoa_r+0xafa>
 8003d9c:	9a07      	ldr	r2, [sp, #28]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f102 0501 	add.w	r5, r2, #1
 8003da4:	dd06      	ble.n	8003db4 <_dtoa_r+0xa6c>
 8003da6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003daa:	d0eb      	beq.n	8003d84 <_dtoa_r+0xa3c>
 8003dac:	f108 0801 	add.w	r8, r8, #1
 8003db0:	9b07      	ldr	r3, [sp, #28]
 8003db2:	e7c4      	b.n	8003d3e <_dtoa_r+0x9f6>
 8003db4:	9b06      	ldr	r3, [sp, #24]
 8003db6:	9a04      	ldr	r2, [sp, #16]
 8003db8:	1aeb      	subs	r3, r5, r3
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	f805 8c01 	strb.w	r8, [r5, #-1]
 8003dc0:	d021      	beq.n	8003e06 <_dtoa_r+0xabe>
 8003dc2:	4659      	mov	r1, fp
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	220a      	movs	r2, #10
 8003dc8:	4620      	mov	r0, r4
 8003dca:	f000 f8cc 	bl	8003f66 <__multadd>
 8003dce:	45b9      	cmp	r9, r7
 8003dd0:	4683      	mov	fp, r0
 8003dd2:	f04f 0300 	mov.w	r3, #0
 8003dd6:	f04f 020a 	mov.w	r2, #10
 8003dda:	4649      	mov	r1, r9
 8003ddc:	4620      	mov	r0, r4
 8003dde:	d105      	bne.n	8003dec <_dtoa_r+0xaa4>
 8003de0:	f000 f8c1 	bl	8003f66 <__multadd>
 8003de4:	4681      	mov	r9, r0
 8003de6:	4607      	mov	r7, r0
 8003de8:	9507      	str	r5, [sp, #28]
 8003dea:	e778      	b.n	8003cde <_dtoa_r+0x996>
 8003dec:	f000 f8bb 	bl	8003f66 <__multadd>
 8003df0:	4639      	mov	r1, r7
 8003df2:	4681      	mov	r9, r0
 8003df4:	2300      	movs	r3, #0
 8003df6:	220a      	movs	r2, #10
 8003df8:	4620      	mov	r0, r4
 8003dfa:	f000 f8b4 	bl	8003f66 <__multadd>
 8003dfe:	4607      	mov	r7, r0
 8003e00:	e7f2      	b.n	8003de8 <_dtoa_r+0xaa0>
 8003e02:	f04f 0900 	mov.w	r9, #0
 8003e06:	4659      	mov	r1, fp
 8003e08:	2201      	movs	r2, #1
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	f000 fa20 	bl	8004250 <__lshift>
 8003e10:	4631      	mov	r1, r6
 8003e12:	4683      	mov	fp, r0
 8003e14:	f000 fa70 	bl	80042f8 <__mcmp>
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	dcb8      	bgt.n	8003d8e <_dtoa_r+0xa46>
 8003e1c:	d102      	bne.n	8003e24 <_dtoa_r+0xadc>
 8003e1e:	f018 0f01 	tst.w	r8, #1
 8003e22:	d1b4      	bne.n	8003d8e <_dtoa_r+0xa46>
 8003e24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003e28:	1e6a      	subs	r2, r5, #1
 8003e2a:	2b30      	cmp	r3, #48	; 0x30
 8003e2c:	f47f af0f 	bne.w	8003c4e <_dtoa_r+0x906>
 8003e30:	4615      	mov	r5, r2
 8003e32:	e7f7      	b.n	8003e24 <_dtoa_r+0xadc>
 8003e34:	9b06      	ldr	r3, [sp, #24]
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d105      	bne.n	8003e46 <_dtoa_r+0xafe>
 8003e3a:	2331      	movs	r3, #49	; 0x31
 8003e3c:	9a06      	ldr	r2, [sp, #24]
 8003e3e:	f10a 0a01 	add.w	sl, sl, #1
 8003e42:	7013      	strb	r3, [r2, #0]
 8003e44:	e703      	b.n	8003c4e <_dtoa_r+0x906>
 8003e46:	4615      	mov	r5, r2
 8003e48:	e7a1      	b.n	8003d8e <_dtoa_r+0xa46>
 8003e4a:	4b17      	ldr	r3, [pc, #92]	; (8003ea8 <_dtoa_r+0xb60>)
 8003e4c:	f7ff bae1 	b.w	8003412 <_dtoa_r+0xca>
 8003e50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f47f aabb 	bne.w	80033ce <_dtoa_r+0x86>
 8003e58:	4b14      	ldr	r3, [pc, #80]	; (8003eac <_dtoa_r+0xb64>)
 8003e5a:	f7ff bada 	b.w	8003412 <_dtoa_r+0xca>
 8003e5e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	f77f ae3f 	ble.w	8003ae4 <_dtoa_r+0x79c>
 8003e66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e68:	9308      	str	r3, [sp, #32]
 8003e6a:	e653      	b.n	8003b14 <_dtoa_r+0x7cc>
 8003e6c:	9b04      	ldr	r3, [sp, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	dc03      	bgt.n	8003e7a <_dtoa_r+0xb32>
 8003e72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	f73f aed5 	bgt.w	8003c24 <_dtoa_r+0x8dc>
 8003e7a:	9d06      	ldr	r5, [sp, #24]
 8003e7c:	4631      	mov	r1, r6
 8003e7e:	4658      	mov	r0, fp
 8003e80:	f7ff f9d2 	bl	8003228 <quorem>
 8003e84:	9b06      	ldr	r3, [sp, #24]
 8003e86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003e8a:	f805 8b01 	strb.w	r8, [r5], #1
 8003e8e:	9a04      	ldr	r2, [sp, #16]
 8003e90:	1aeb      	subs	r3, r5, r3
 8003e92:	429a      	cmp	r2, r3
 8003e94:	ddb5      	ble.n	8003e02 <_dtoa_r+0xaba>
 8003e96:	4659      	mov	r1, fp
 8003e98:	2300      	movs	r3, #0
 8003e9a:	220a      	movs	r2, #10
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	f000 f862 	bl	8003f66 <__multadd>
 8003ea2:	4683      	mov	fp, r0
 8003ea4:	e7ea      	b.n	8003e7c <_dtoa_r+0xb34>
 8003ea6:	bf00      	nop
 8003ea8:	0800497a 	.word	0x0800497a
 8003eac:	0800499e 	.word	0x0800499e

08003eb0 <_localeconv_r>:
 8003eb0:	4b04      	ldr	r3, [pc, #16]	; (8003ec4 <_localeconv_r+0x14>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6a18      	ldr	r0, [r3, #32]
 8003eb6:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <_localeconv_r+0x18>)
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	bf08      	it	eq
 8003ebc:	4618      	moveq	r0, r3
 8003ebe:	30f0      	adds	r0, #240	; 0xf0
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	20000010 	.word	0x20000010
 8003ec8:	20000074 	.word	0x20000074

08003ecc <__malloc_lock>:
 8003ecc:	4770      	bx	lr

08003ece <__malloc_unlock>:
 8003ece:	4770      	bx	lr

08003ed0 <_Balloc>:
 8003ed0:	b570      	push	{r4, r5, r6, lr}
 8003ed2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003ed4:	4604      	mov	r4, r0
 8003ed6:	460e      	mov	r6, r1
 8003ed8:	b93d      	cbnz	r5, 8003eea <_Balloc+0x1a>
 8003eda:	2010      	movs	r0, #16
 8003edc:	f7fe fbae 	bl	800263c <malloc>
 8003ee0:	6260      	str	r0, [r4, #36]	; 0x24
 8003ee2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003ee6:	6005      	str	r5, [r0, #0]
 8003ee8:	60c5      	str	r5, [r0, #12]
 8003eea:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003eec:	68eb      	ldr	r3, [r5, #12]
 8003eee:	b183      	cbz	r3, 8003f12 <_Balloc+0x42>
 8003ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003ef8:	b9b8      	cbnz	r0, 8003f2a <_Balloc+0x5a>
 8003efa:	2101      	movs	r1, #1
 8003efc:	fa01 f506 	lsl.w	r5, r1, r6
 8003f00:	1d6a      	adds	r2, r5, #5
 8003f02:	0092      	lsls	r2, r2, #2
 8003f04:	4620      	mov	r0, r4
 8003f06:	f000 fabe 	bl	8004486 <_calloc_r>
 8003f0a:	b160      	cbz	r0, 8003f26 <_Balloc+0x56>
 8003f0c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8003f10:	e00e      	b.n	8003f30 <_Balloc+0x60>
 8003f12:	2221      	movs	r2, #33	; 0x21
 8003f14:	2104      	movs	r1, #4
 8003f16:	4620      	mov	r0, r4
 8003f18:	f000 fab5 	bl	8004486 <_calloc_r>
 8003f1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f1e:	60e8      	str	r0, [r5, #12]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1e4      	bne.n	8003ef0 <_Balloc+0x20>
 8003f26:	2000      	movs	r0, #0
 8003f28:	bd70      	pop	{r4, r5, r6, pc}
 8003f2a:	6802      	ldr	r2, [r0, #0]
 8003f2c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003f30:	2300      	movs	r3, #0
 8003f32:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003f36:	e7f7      	b.n	8003f28 <_Balloc+0x58>

08003f38 <_Bfree>:
 8003f38:	b570      	push	{r4, r5, r6, lr}
 8003f3a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003f3c:	4606      	mov	r6, r0
 8003f3e:	460d      	mov	r5, r1
 8003f40:	b93c      	cbnz	r4, 8003f52 <_Bfree+0x1a>
 8003f42:	2010      	movs	r0, #16
 8003f44:	f7fe fb7a 	bl	800263c <malloc>
 8003f48:	6270      	str	r0, [r6, #36]	; 0x24
 8003f4a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003f4e:	6004      	str	r4, [r0, #0]
 8003f50:	60c4      	str	r4, [r0, #12]
 8003f52:	b13d      	cbz	r5, 8003f64 <_Bfree+0x2c>
 8003f54:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003f56:	686a      	ldr	r2, [r5, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f5e:	6029      	str	r1, [r5, #0]
 8003f60:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003f64:	bd70      	pop	{r4, r5, r6, pc}

08003f66 <__multadd>:
 8003f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f6a:	461f      	mov	r7, r3
 8003f6c:	4606      	mov	r6, r0
 8003f6e:	460c      	mov	r4, r1
 8003f70:	2300      	movs	r3, #0
 8003f72:	690d      	ldr	r5, [r1, #16]
 8003f74:	f101 0c14 	add.w	ip, r1, #20
 8003f78:	f8dc 0000 	ldr.w	r0, [ip]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	b281      	uxth	r1, r0
 8003f80:	fb02 7101 	mla	r1, r2, r1, r7
 8003f84:	0c00      	lsrs	r0, r0, #16
 8003f86:	0c0f      	lsrs	r7, r1, #16
 8003f88:	fb02 7000 	mla	r0, r2, r0, r7
 8003f8c:	b289      	uxth	r1, r1
 8003f8e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003f92:	429d      	cmp	r5, r3
 8003f94:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8003f98:	f84c 1b04 	str.w	r1, [ip], #4
 8003f9c:	dcec      	bgt.n	8003f78 <__multadd+0x12>
 8003f9e:	b1d7      	cbz	r7, 8003fd6 <__multadd+0x70>
 8003fa0:	68a3      	ldr	r3, [r4, #8]
 8003fa2:	42ab      	cmp	r3, r5
 8003fa4:	dc12      	bgt.n	8003fcc <__multadd+0x66>
 8003fa6:	6861      	ldr	r1, [r4, #4]
 8003fa8:	4630      	mov	r0, r6
 8003faa:	3101      	adds	r1, #1
 8003fac:	f7ff ff90 	bl	8003ed0 <_Balloc>
 8003fb0:	4680      	mov	r8, r0
 8003fb2:	6922      	ldr	r2, [r4, #16]
 8003fb4:	f104 010c 	add.w	r1, r4, #12
 8003fb8:	3202      	adds	r2, #2
 8003fba:	0092      	lsls	r2, r2, #2
 8003fbc:	300c      	adds	r0, #12
 8003fbe:	f7fe fb5b 	bl	8002678 <memcpy>
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	f7ff ffb7 	bl	8003f38 <_Bfree>
 8003fca:	4644      	mov	r4, r8
 8003fcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003fd0:	3501      	adds	r5, #1
 8003fd2:	615f      	str	r7, [r3, #20]
 8003fd4:	6125      	str	r5, [r4, #16]
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003fdc <__hi0bits>:
 8003fdc:	0c02      	lsrs	r2, r0, #16
 8003fde:	0412      	lsls	r2, r2, #16
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	b9b2      	cbnz	r2, 8004012 <__hi0bits+0x36>
 8003fe4:	0403      	lsls	r3, r0, #16
 8003fe6:	2010      	movs	r0, #16
 8003fe8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003fec:	bf04      	itt	eq
 8003fee:	021b      	lsleq	r3, r3, #8
 8003ff0:	3008      	addeq	r0, #8
 8003ff2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003ff6:	bf04      	itt	eq
 8003ff8:	011b      	lsleq	r3, r3, #4
 8003ffa:	3004      	addeq	r0, #4
 8003ffc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004000:	bf04      	itt	eq
 8004002:	009b      	lsleq	r3, r3, #2
 8004004:	3002      	addeq	r0, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	db06      	blt.n	8004018 <__hi0bits+0x3c>
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	d503      	bpl.n	8004016 <__hi0bits+0x3a>
 800400e:	3001      	adds	r0, #1
 8004010:	4770      	bx	lr
 8004012:	2000      	movs	r0, #0
 8004014:	e7e8      	b.n	8003fe8 <__hi0bits+0xc>
 8004016:	2020      	movs	r0, #32
 8004018:	4770      	bx	lr

0800401a <__lo0bits>:
 800401a:	6803      	ldr	r3, [r0, #0]
 800401c:	4601      	mov	r1, r0
 800401e:	f013 0207 	ands.w	r2, r3, #7
 8004022:	d00b      	beq.n	800403c <__lo0bits+0x22>
 8004024:	07da      	lsls	r2, r3, #31
 8004026:	d423      	bmi.n	8004070 <__lo0bits+0x56>
 8004028:	0798      	lsls	r0, r3, #30
 800402a:	bf49      	itett	mi
 800402c:	085b      	lsrmi	r3, r3, #1
 800402e:	089b      	lsrpl	r3, r3, #2
 8004030:	2001      	movmi	r0, #1
 8004032:	600b      	strmi	r3, [r1, #0]
 8004034:	bf5c      	itt	pl
 8004036:	600b      	strpl	r3, [r1, #0]
 8004038:	2002      	movpl	r0, #2
 800403a:	4770      	bx	lr
 800403c:	b298      	uxth	r0, r3
 800403e:	b9a8      	cbnz	r0, 800406c <__lo0bits+0x52>
 8004040:	2010      	movs	r0, #16
 8004042:	0c1b      	lsrs	r3, r3, #16
 8004044:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004048:	bf04      	itt	eq
 800404a:	0a1b      	lsreq	r3, r3, #8
 800404c:	3008      	addeq	r0, #8
 800404e:	071a      	lsls	r2, r3, #28
 8004050:	bf04      	itt	eq
 8004052:	091b      	lsreq	r3, r3, #4
 8004054:	3004      	addeq	r0, #4
 8004056:	079a      	lsls	r2, r3, #30
 8004058:	bf04      	itt	eq
 800405a:	089b      	lsreq	r3, r3, #2
 800405c:	3002      	addeq	r0, #2
 800405e:	07da      	lsls	r2, r3, #31
 8004060:	d402      	bmi.n	8004068 <__lo0bits+0x4e>
 8004062:	085b      	lsrs	r3, r3, #1
 8004064:	d006      	beq.n	8004074 <__lo0bits+0x5a>
 8004066:	3001      	adds	r0, #1
 8004068:	600b      	str	r3, [r1, #0]
 800406a:	4770      	bx	lr
 800406c:	4610      	mov	r0, r2
 800406e:	e7e9      	b.n	8004044 <__lo0bits+0x2a>
 8004070:	2000      	movs	r0, #0
 8004072:	4770      	bx	lr
 8004074:	2020      	movs	r0, #32
 8004076:	4770      	bx	lr

08004078 <__i2b>:
 8004078:	b510      	push	{r4, lr}
 800407a:	460c      	mov	r4, r1
 800407c:	2101      	movs	r1, #1
 800407e:	f7ff ff27 	bl	8003ed0 <_Balloc>
 8004082:	2201      	movs	r2, #1
 8004084:	6144      	str	r4, [r0, #20]
 8004086:	6102      	str	r2, [r0, #16]
 8004088:	bd10      	pop	{r4, pc}

0800408a <__multiply>:
 800408a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800408e:	4614      	mov	r4, r2
 8004090:	690a      	ldr	r2, [r1, #16]
 8004092:	6923      	ldr	r3, [r4, #16]
 8004094:	4688      	mov	r8, r1
 8004096:	429a      	cmp	r2, r3
 8004098:	bfbe      	ittt	lt
 800409a:	460b      	movlt	r3, r1
 800409c:	46a0      	movlt	r8, r4
 800409e:	461c      	movlt	r4, r3
 80040a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80040a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80040a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80040ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80040b0:	eb07 0609 	add.w	r6, r7, r9
 80040b4:	42b3      	cmp	r3, r6
 80040b6:	bfb8      	it	lt
 80040b8:	3101      	addlt	r1, #1
 80040ba:	f7ff ff09 	bl	8003ed0 <_Balloc>
 80040be:	f100 0514 	add.w	r5, r0, #20
 80040c2:	462b      	mov	r3, r5
 80040c4:	2200      	movs	r2, #0
 80040c6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80040ca:	4573      	cmp	r3, lr
 80040cc:	d316      	bcc.n	80040fc <__multiply+0x72>
 80040ce:	f104 0214 	add.w	r2, r4, #20
 80040d2:	f108 0114 	add.w	r1, r8, #20
 80040d6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80040da:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	9b00      	ldr	r3, [sp, #0]
 80040e2:	9201      	str	r2, [sp, #4]
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d80c      	bhi.n	8004102 <__multiply+0x78>
 80040e8:	2e00      	cmp	r6, #0
 80040ea:	dd03      	ble.n	80040f4 <__multiply+0x6a>
 80040ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d05d      	beq.n	80041b0 <__multiply+0x126>
 80040f4:	6106      	str	r6, [r0, #16]
 80040f6:	b003      	add	sp, #12
 80040f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040fc:	f843 2b04 	str.w	r2, [r3], #4
 8004100:	e7e3      	b.n	80040ca <__multiply+0x40>
 8004102:	f8b2 b000 	ldrh.w	fp, [r2]
 8004106:	f1bb 0f00 	cmp.w	fp, #0
 800410a:	d023      	beq.n	8004154 <__multiply+0xca>
 800410c:	4689      	mov	r9, r1
 800410e:	46ac      	mov	ip, r5
 8004110:	f04f 0800 	mov.w	r8, #0
 8004114:	f859 4b04 	ldr.w	r4, [r9], #4
 8004118:	f8dc a000 	ldr.w	sl, [ip]
 800411c:	b2a3      	uxth	r3, r4
 800411e:	fa1f fa8a 	uxth.w	sl, sl
 8004122:	fb0b a303 	mla	r3, fp, r3, sl
 8004126:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800412a:	f8dc 4000 	ldr.w	r4, [ip]
 800412e:	4443      	add	r3, r8
 8004130:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004134:	fb0b 840a 	mla	r4, fp, sl, r8
 8004138:	46e2      	mov	sl, ip
 800413a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800413e:	b29b      	uxth	r3, r3
 8004140:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004144:	454f      	cmp	r7, r9
 8004146:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800414a:	f84a 3b04 	str.w	r3, [sl], #4
 800414e:	d82b      	bhi.n	80041a8 <__multiply+0x11e>
 8004150:	f8cc 8004 	str.w	r8, [ip, #4]
 8004154:	9b01      	ldr	r3, [sp, #4]
 8004156:	3204      	adds	r2, #4
 8004158:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800415c:	f1ba 0f00 	cmp.w	sl, #0
 8004160:	d020      	beq.n	80041a4 <__multiply+0x11a>
 8004162:	4689      	mov	r9, r1
 8004164:	46a8      	mov	r8, r5
 8004166:	f04f 0b00 	mov.w	fp, #0
 800416a:	682b      	ldr	r3, [r5, #0]
 800416c:	f8b9 c000 	ldrh.w	ip, [r9]
 8004170:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8004174:	b29b      	uxth	r3, r3
 8004176:	fb0a 440c 	mla	r4, sl, ip, r4
 800417a:	46c4      	mov	ip, r8
 800417c:	445c      	add	r4, fp
 800417e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004182:	f84c 3b04 	str.w	r3, [ip], #4
 8004186:	f859 3b04 	ldr.w	r3, [r9], #4
 800418a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800418e:	0c1b      	lsrs	r3, r3, #16
 8004190:	fb0a b303 	mla	r3, sl, r3, fp
 8004194:	454f      	cmp	r7, r9
 8004196:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800419a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800419e:	d805      	bhi.n	80041ac <__multiply+0x122>
 80041a0:	f8c8 3004 	str.w	r3, [r8, #4]
 80041a4:	3504      	adds	r5, #4
 80041a6:	e79b      	b.n	80040e0 <__multiply+0x56>
 80041a8:	46d4      	mov	ip, sl
 80041aa:	e7b3      	b.n	8004114 <__multiply+0x8a>
 80041ac:	46e0      	mov	r8, ip
 80041ae:	e7dd      	b.n	800416c <__multiply+0xe2>
 80041b0:	3e01      	subs	r6, #1
 80041b2:	e799      	b.n	80040e8 <__multiply+0x5e>

080041b4 <__pow5mult>:
 80041b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041b8:	4615      	mov	r5, r2
 80041ba:	f012 0203 	ands.w	r2, r2, #3
 80041be:	4606      	mov	r6, r0
 80041c0:	460f      	mov	r7, r1
 80041c2:	d007      	beq.n	80041d4 <__pow5mult+0x20>
 80041c4:	4c21      	ldr	r4, [pc, #132]	; (800424c <__pow5mult+0x98>)
 80041c6:	3a01      	subs	r2, #1
 80041c8:	2300      	movs	r3, #0
 80041ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80041ce:	f7ff feca 	bl	8003f66 <__multadd>
 80041d2:	4607      	mov	r7, r0
 80041d4:	10ad      	asrs	r5, r5, #2
 80041d6:	d035      	beq.n	8004244 <__pow5mult+0x90>
 80041d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80041da:	b93c      	cbnz	r4, 80041ec <__pow5mult+0x38>
 80041dc:	2010      	movs	r0, #16
 80041de:	f7fe fa2d 	bl	800263c <malloc>
 80041e2:	6270      	str	r0, [r6, #36]	; 0x24
 80041e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80041e8:	6004      	str	r4, [r0, #0]
 80041ea:	60c4      	str	r4, [r0, #12]
 80041ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80041f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80041f4:	b94c      	cbnz	r4, 800420a <__pow5mult+0x56>
 80041f6:	f240 2171 	movw	r1, #625	; 0x271
 80041fa:	4630      	mov	r0, r6
 80041fc:	f7ff ff3c 	bl	8004078 <__i2b>
 8004200:	2300      	movs	r3, #0
 8004202:	4604      	mov	r4, r0
 8004204:	f8c8 0008 	str.w	r0, [r8, #8]
 8004208:	6003      	str	r3, [r0, #0]
 800420a:	f04f 0800 	mov.w	r8, #0
 800420e:	07eb      	lsls	r3, r5, #31
 8004210:	d50a      	bpl.n	8004228 <__pow5mult+0x74>
 8004212:	4639      	mov	r1, r7
 8004214:	4622      	mov	r2, r4
 8004216:	4630      	mov	r0, r6
 8004218:	f7ff ff37 	bl	800408a <__multiply>
 800421c:	4681      	mov	r9, r0
 800421e:	4639      	mov	r1, r7
 8004220:	4630      	mov	r0, r6
 8004222:	f7ff fe89 	bl	8003f38 <_Bfree>
 8004226:	464f      	mov	r7, r9
 8004228:	106d      	asrs	r5, r5, #1
 800422a:	d00b      	beq.n	8004244 <__pow5mult+0x90>
 800422c:	6820      	ldr	r0, [r4, #0]
 800422e:	b938      	cbnz	r0, 8004240 <__pow5mult+0x8c>
 8004230:	4622      	mov	r2, r4
 8004232:	4621      	mov	r1, r4
 8004234:	4630      	mov	r0, r6
 8004236:	f7ff ff28 	bl	800408a <__multiply>
 800423a:	6020      	str	r0, [r4, #0]
 800423c:	f8c0 8000 	str.w	r8, [r0]
 8004240:	4604      	mov	r4, r0
 8004242:	e7e4      	b.n	800420e <__pow5mult+0x5a>
 8004244:	4638      	mov	r0, r7
 8004246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800424a:	bf00      	nop
 800424c:	08004aa0 	.word	0x08004aa0

08004250 <__lshift>:
 8004250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004254:	460c      	mov	r4, r1
 8004256:	4607      	mov	r7, r0
 8004258:	4616      	mov	r6, r2
 800425a:	6923      	ldr	r3, [r4, #16]
 800425c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004260:	eb0a 0903 	add.w	r9, sl, r3
 8004264:	6849      	ldr	r1, [r1, #4]
 8004266:	68a3      	ldr	r3, [r4, #8]
 8004268:	f109 0501 	add.w	r5, r9, #1
 800426c:	42ab      	cmp	r3, r5
 800426e:	db32      	blt.n	80042d6 <__lshift+0x86>
 8004270:	4638      	mov	r0, r7
 8004272:	f7ff fe2d 	bl	8003ed0 <_Balloc>
 8004276:	2300      	movs	r3, #0
 8004278:	4680      	mov	r8, r0
 800427a:	461a      	mov	r2, r3
 800427c:	f100 0114 	add.w	r1, r0, #20
 8004280:	4553      	cmp	r3, sl
 8004282:	db2b      	blt.n	80042dc <__lshift+0x8c>
 8004284:	6920      	ldr	r0, [r4, #16]
 8004286:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800428a:	f104 0314 	add.w	r3, r4, #20
 800428e:	f016 021f 	ands.w	r2, r6, #31
 8004292:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004296:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800429a:	d025      	beq.n	80042e8 <__lshift+0x98>
 800429c:	2000      	movs	r0, #0
 800429e:	f1c2 0e20 	rsb	lr, r2, #32
 80042a2:	468a      	mov	sl, r1
 80042a4:	681e      	ldr	r6, [r3, #0]
 80042a6:	4096      	lsls	r6, r2
 80042a8:	4330      	orrs	r0, r6
 80042aa:	f84a 0b04 	str.w	r0, [sl], #4
 80042ae:	f853 0b04 	ldr.w	r0, [r3], #4
 80042b2:	459c      	cmp	ip, r3
 80042b4:	fa20 f00e 	lsr.w	r0, r0, lr
 80042b8:	d814      	bhi.n	80042e4 <__lshift+0x94>
 80042ba:	6048      	str	r0, [r1, #4]
 80042bc:	b108      	cbz	r0, 80042c2 <__lshift+0x72>
 80042be:	f109 0502 	add.w	r5, r9, #2
 80042c2:	3d01      	subs	r5, #1
 80042c4:	4638      	mov	r0, r7
 80042c6:	f8c8 5010 	str.w	r5, [r8, #16]
 80042ca:	4621      	mov	r1, r4
 80042cc:	f7ff fe34 	bl	8003f38 <_Bfree>
 80042d0:	4640      	mov	r0, r8
 80042d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d6:	3101      	adds	r1, #1
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	e7c7      	b.n	800426c <__lshift+0x1c>
 80042dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80042e0:	3301      	adds	r3, #1
 80042e2:	e7cd      	b.n	8004280 <__lshift+0x30>
 80042e4:	4651      	mov	r1, sl
 80042e6:	e7dc      	b.n	80042a2 <__lshift+0x52>
 80042e8:	3904      	subs	r1, #4
 80042ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80042ee:	459c      	cmp	ip, r3
 80042f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80042f4:	d8f9      	bhi.n	80042ea <__lshift+0x9a>
 80042f6:	e7e4      	b.n	80042c2 <__lshift+0x72>

080042f8 <__mcmp>:
 80042f8:	6903      	ldr	r3, [r0, #16]
 80042fa:	690a      	ldr	r2, [r1, #16]
 80042fc:	b530      	push	{r4, r5, lr}
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	d10c      	bne.n	800431c <__mcmp+0x24>
 8004302:	0092      	lsls	r2, r2, #2
 8004304:	3014      	adds	r0, #20
 8004306:	3114      	adds	r1, #20
 8004308:	1884      	adds	r4, r0, r2
 800430a:	4411      	add	r1, r2
 800430c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004310:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004314:	4295      	cmp	r5, r2
 8004316:	d003      	beq.n	8004320 <__mcmp+0x28>
 8004318:	d305      	bcc.n	8004326 <__mcmp+0x2e>
 800431a:	2301      	movs	r3, #1
 800431c:	4618      	mov	r0, r3
 800431e:	bd30      	pop	{r4, r5, pc}
 8004320:	42a0      	cmp	r0, r4
 8004322:	d3f3      	bcc.n	800430c <__mcmp+0x14>
 8004324:	e7fa      	b.n	800431c <__mcmp+0x24>
 8004326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800432a:	e7f7      	b.n	800431c <__mcmp+0x24>

0800432c <__mdiff>:
 800432c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004330:	460d      	mov	r5, r1
 8004332:	4607      	mov	r7, r0
 8004334:	4611      	mov	r1, r2
 8004336:	4628      	mov	r0, r5
 8004338:	4614      	mov	r4, r2
 800433a:	f7ff ffdd 	bl	80042f8 <__mcmp>
 800433e:	1e06      	subs	r6, r0, #0
 8004340:	d108      	bne.n	8004354 <__mdiff+0x28>
 8004342:	4631      	mov	r1, r6
 8004344:	4638      	mov	r0, r7
 8004346:	f7ff fdc3 	bl	8003ed0 <_Balloc>
 800434a:	2301      	movs	r3, #1
 800434c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004354:	bfa4      	itt	ge
 8004356:	4623      	movge	r3, r4
 8004358:	462c      	movge	r4, r5
 800435a:	4638      	mov	r0, r7
 800435c:	6861      	ldr	r1, [r4, #4]
 800435e:	bfa6      	itte	ge
 8004360:	461d      	movge	r5, r3
 8004362:	2600      	movge	r6, #0
 8004364:	2601      	movlt	r6, #1
 8004366:	f7ff fdb3 	bl	8003ed0 <_Balloc>
 800436a:	f04f 0e00 	mov.w	lr, #0
 800436e:	60c6      	str	r6, [r0, #12]
 8004370:	692b      	ldr	r3, [r5, #16]
 8004372:	6926      	ldr	r6, [r4, #16]
 8004374:	f104 0214 	add.w	r2, r4, #20
 8004378:	f105 0914 	add.w	r9, r5, #20
 800437c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004380:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004384:	f100 0114 	add.w	r1, r0, #20
 8004388:	f852 ab04 	ldr.w	sl, [r2], #4
 800438c:	f859 5b04 	ldr.w	r5, [r9], #4
 8004390:	fa1f f38a 	uxth.w	r3, sl
 8004394:	4473      	add	r3, lr
 8004396:	b2ac      	uxth	r4, r5
 8004398:	1b1b      	subs	r3, r3, r4
 800439a:	0c2c      	lsrs	r4, r5, #16
 800439c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80043a0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80043aa:	45c8      	cmp	r8, r9
 80043ac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80043b0:	4694      	mov	ip, r2
 80043b2:	f841 4b04 	str.w	r4, [r1], #4
 80043b6:	d8e7      	bhi.n	8004388 <__mdiff+0x5c>
 80043b8:	45bc      	cmp	ip, r7
 80043ba:	d304      	bcc.n	80043c6 <__mdiff+0x9a>
 80043bc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80043c0:	b183      	cbz	r3, 80043e4 <__mdiff+0xb8>
 80043c2:	6106      	str	r6, [r0, #16]
 80043c4:	e7c4      	b.n	8004350 <__mdiff+0x24>
 80043c6:	f85c 4b04 	ldr.w	r4, [ip], #4
 80043ca:	b2a2      	uxth	r2, r4
 80043cc:	4472      	add	r2, lr
 80043ce:	1413      	asrs	r3, r2, #16
 80043d0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80043d4:	b292      	uxth	r2, r2
 80043d6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80043da:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80043de:	f841 2b04 	str.w	r2, [r1], #4
 80043e2:	e7e9      	b.n	80043b8 <__mdiff+0x8c>
 80043e4:	3e01      	subs	r6, #1
 80043e6:	e7e9      	b.n	80043bc <__mdiff+0x90>

080043e8 <__d2b>:
 80043e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80043ec:	461c      	mov	r4, r3
 80043ee:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80043f2:	2101      	movs	r1, #1
 80043f4:	4690      	mov	r8, r2
 80043f6:	f7ff fd6b 	bl	8003ed0 <_Balloc>
 80043fa:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80043fe:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004402:	4607      	mov	r7, r0
 8004404:	bb34      	cbnz	r4, 8004454 <__d2b+0x6c>
 8004406:	9201      	str	r2, [sp, #4]
 8004408:	f1b8 0200 	subs.w	r2, r8, #0
 800440c:	d027      	beq.n	800445e <__d2b+0x76>
 800440e:	a802      	add	r0, sp, #8
 8004410:	f840 2d08 	str.w	r2, [r0, #-8]!
 8004414:	f7ff fe01 	bl	800401a <__lo0bits>
 8004418:	9900      	ldr	r1, [sp, #0]
 800441a:	b1f0      	cbz	r0, 800445a <__d2b+0x72>
 800441c:	9a01      	ldr	r2, [sp, #4]
 800441e:	f1c0 0320 	rsb	r3, r0, #32
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	430b      	orrs	r3, r1
 8004428:	40c2      	lsrs	r2, r0
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	9201      	str	r2, [sp, #4]
 800442e:	9b01      	ldr	r3, [sp, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	bf14      	ite	ne
 8004434:	2102      	movne	r1, #2
 8004436:	2101      	moveq	r1, #1
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	6139      	str	r1, [r7, #16]
 800443c:	b1c4      	cbz	r4, 8004470 <__d2b+0x88>
 800443e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004442:	4404      	add	r4, r0
 8004444:	6034      	str	r4, [r6, #0]
 8004446:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800444a:	6028      	str	r0, [r5, #0]
 800444c:	4638      	mov	r0, r7
 800444e:	b002      	add	sp, #8
 8004450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004454:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004458:	e7d5      	b.n	8004406 <__d2b+0x1e>
 800445a:	6179      	str	r1, [r7, #20]
 800445c:	e7e7      	b.n	800442e <__d2b+0x46>
 800445e:	a801      	add	r0, sp, #4
 8004460:	f7ff fddb 	bl	800401a <__lo0bits>
 8004464:	2101      	movs	r1, #1
 8004466:	9b01      	ldr	r3, [sp, #4]
 8004468:	6139      	str	r1, [r7, #16]
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	3020      	adds	r0, #32
 800446e:	e7e5      	b.n	800443c <__d2b+0x54>
 8004470:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004474:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004478:	6030      	str	r0, [r6, #0]
 800447a:	6918      	ldr	r0, [r3, #16]
 800447c:	f7ff fdae 	bl	8003fdc <__hi0bits>
 8004480:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004484:	e7e1      	b.n	800444a <__d2b+0x62>

08004486 <_calloc_r>:
 8004486:	b538      	push	{r3, r4, r5, lr}
 8004488:	fb02 f401 	mul.w	r4, r2, r1
 800448c:	4621      	mov	r1, r4
 800448e:	f7fe f96b 	bl	8002768 <_malloc_r>
 8004492:	4605      	mov	r5, r0
 8004494:	b118      	cbz	r0, 800449e <_calloc_r+0x18>
 8004496:	4622      	mov	r2, r4
 8004498:	2100      	movs	r1, #0
 800449a:	f7fe f911 	bl	80026c0 <memset>
 800449e:	4628      	mov	r0, r5
 80044a0:	bd38      	pop	{r3, r4, r5, pc}

080044a2 <__ssputs_r>:
 80044a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a6:	688e      	ldr	r6, [r1, #8]
 80044a8:	4682      	mov	sl, r0
 80044aa:	429e      	cmp	r6, r3
 80044ac:	460c      	mov	r4, r1
 80044ae:	4690      	mov	r8, r2
 80044b0:	4699      	mov	r9, r3
 80044b2:	d837      	bhi.n	8004524 <__ssputs_r+0x82>
 80044b4:	898a      	ldrh	r2, [r1, #12]
 80044b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044ba:	d031      	beq.n	8004520 <__ssputs_r+0x7e>
 80044bc:	2302      	movs	r3, #2
 80044be:	6825      	ldr	r5, [r4, #0]
 80044c0:	6909      	ldr	r1, [r1, #16]
 80044c2:	1a6f      	subs	r7, r5, r1
 80044c4:	6965      	ldr	r5, [r4, #20]
 80044c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044ca:	fb95 f5f3 	sdiv	r5, r5, r3
 80044ce:	f109 0301 	add.w	r3, r9, #1
 80044d2:	443b      	add	r3, r7
 80044d4:	429d      	cmp	r5, r3
 80044d6:	bf38      	it	cc
 80044d8:	461d      	movcc	r5, r3
 80044da:	0553      	lsls	r3, r2, #21
 80044dc:	d530      	bpl.n	8004540 <__ssputs_r+0x9e>
 80044de:	4629      	mov	r1, r5
 80044e0:	f7fe f942 	bl	8002768 <_malloc_r>
 80044e4:	4606      	mov	r6, r0
 80044e6:	b950      	cbnz	r0, 80044fe <__ssputs_r+0x5c>
 80044e8:	230c      	movs	r3, #12
 80044ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044ee:	f8ca 3000 	str.w	r3, [sl]
 80044f2:	89a3      	ldrh	r3, [r4, #12]
 80044f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044f8:	81a3      	strh	r3, [r4, #12]
 80044fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044fe:	463a      	mov	r2, r7
 8004500:	6921      	ldr	r1, [r4, #16]
 8004502:	f7fe f8b9 	bl	8002678 <memcpy>
 8004506:	89a3      	ldrh	r3, [r4, #12]
 8004508:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800450c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004510:	81a3      	strh	r3, [r4, #12]
 8004512:	6126      	str	r6, [r4, #16]
 8004514:	443e      	add	r6, r7
 8004516:	6026      	str	r6, [r4, #0]
 8004518:	464e      	mov	r6, r9
 800451a:	6165      	str	r5, [r4, #20]
 800451c:	1bed      	subs	r5, r5, r7
 800451e:	60a5      	str	r5, [r4, #8]
 8004520:	454e      	cmp	r6, r9
 8004522:	d900      	bls.n	8004526 <__ssputs_r+0x84>
 8004524:	464e      	mov	r6, r9
 8004526:	4632      	mov	r2, r6
 8004528:	4641      	mov	r1, r8
 800452a:	6820      	ldr	r0, [r4, #0]
 800452c:	f7fe f8af 	bl	800268e <memmove>
 8004530:	68a3      	ldr	r3, [r4, #8]
 8004532:	2000      	movs	r0, #0
 8004534:	1b9b      	subs	r3, r3, r6
 8004536:	60a3      	str	r3, [r4, #8]
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	441e      	add	r6, r3
 800453c:	6026      	str	r6, [r4, #0]
 800453e:	e7dc      	b.n	80044fa <__ssputs_r+0x58>
 8004540:	462a      	mov	r2, r5
 8004542:	f000 f913 	bl	800476c <_realloc_r>
 8004546:	4606      	mov	r6, r0
 8004548:	2800      	cmp	r0, #0
 800454a:	d1e2      	bne.n	8004512 <__ssputs_r+0x70>
 800454c:	6921      	ldr	r1, [r4, #16]
 800454e:	4650      	mov	r0, sl
 8004550:	f7fe f8be 	bl	80026d0 <_free_r>
 8004554:	e7c8      	b.n	80044e8 <__ssputs_r+0x46>
	...

08004558 <_svfiprintf_r>:
 8004558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800455c:	461d      	mov	r5, r3
 800455e:	898b      	ldrh	r3, [r1, #12]
 8004560:	b09d      	sub	sp, #116	; 0x74
 8004562:	061f      	lsls	r7, r3, #24
 8004564:	4680      	mov	r8, r0
 8004566:	460c      	mov	r4, r1
 8004568:	4616      	mov	r6, r2
 800456a:	d50f      	bpl.n	800458c <_svfiprintf_r+0x34>
 800456c:	690b      	ldr	r3, [r1, #16]
 800456e:	b96b      	cbnz	r3, 800458c <_svfiprintf_r+0x34>
 8004570:	2140      	movs	r1, #64	; 0x40
 8004572:	f7fe f8f9 	bl	8002768 <_malloc_r>
 8004576:	6020      	str	r0, [r4, #0]
 8004578:	6120      	str	r0, [r4, #16]
 800457a:	b928      	cbnz	r0, 8004588 <_svfiprintf_r+0x30>
 800457c:	230c      	movs	r3, #12
 800457e:	f8c8 3000 	str.w	r3, [r8]
 8004582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004586:	e0c8      	b.n	800471a <_svfiprintf_r+0x1c2>
 8004588:	2340      	movs	r3, #64	; 0x40
 800458a:	6163      	str	r3, [r4, #20]
 800458c:	2300      	movs	r3, #0
 800458e:	9309      	str	r3, [sp, #36]	; 0x24
 8004590:	2320      	movs	r3, #32
 8004592:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004596:	2330      	movs	r3, #48	; 0x30
 8004598:	f04f 0b01 	mov.w	fp, #1
 800459c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045a0:	9503      	str	r5, [sp, #12]
 80045a2:	4637      	mov	r7, r6
 80045a4:	463d      	mov	r5, r7
 80045a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80045aa:	b10b      	cbz	r3, 80045b0 <_svfiprintf_r+0x58>
 80045ac:	2b25      	cmp	r3, #37	; 0x25
 80045ae:	d13e      	bne.n	800462e <_svfiprintf_r+0xd6>
 80045b0:	ebb7 0a06 	subs.w	sl, r7, r6
 80045b4:	d00b      	beq.n	80045ce <_svfiprintf_r+0x76>
 80045b6:	4653      	mov	r3, sl
 80045b8:	4632      	mov	r2, r6
 80045ba:	4621      	mov	r1, r4
 80045bc:	4640      	mov	r0, r8
 80045be:	f7ff ff70 	bl	80044a2 <__ssputs_r>
 80045c2:	3001      	adds	r0, #1
 80045c4:	f000 80a4 	beq.w	8004710 <_svfiprintf_r+0x1b8>
 80045c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045ca:	4453      	add	r3, sl
 80045cc:	9309      	str	r3, [sp, #36]	; 0x24
 80045ce:	783b      	ldrb	r3, [r7, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 809d 	beq.w	8004710 <_svfiprintf_r+0x1b8>
 80045d6:	2300      	movs	r3, #0
 80045d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045e0:	9304      	str	r3, [sp, #16]
 80045e2:	9307      	str	r3, [sp, #28]
 80045e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045e8:	931a      	str	r3, [sp, #104]	; 0x68
 80045ea:	462f      	mov	r7, r5
 80045ec:	2205      	movs	r2, #5
 80045ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 80045f2:	4850      	ldr	r0, [pc, #320]	; (8004734 <_svfiprintf_r+0x1dc>)
 80045f4:	f7fe f832 	bl	800265c <memchr>
 80045f8:	9b04      	ldr	r3, [sp, #16]
 80045fa:	b9d0      	cbnz	r0, 8004632 <_svfiprintf_r+0xda>
 80045fc:	06d9      	lsls	r1, r3, #27
 80045fe:	bf44      	itt	mi
 8004600:	2220      	movmi	r2, #32
 8004602:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004606:	071a      	lsls	r2, r3, #28
 8004608:	bf44      	itt	mi
 800460a:	222b      	movmi	r2, #43	; 0x2b
 800460c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004610:	782a      	ldrb	r2, [r5, #0]
 8004612:	2a2a      	cmp	r2, #42	; 0x2a
 8004614:	d015      	beq.n	8004642 <_svfiprintf_r+0xea>
 8004616:	462f      	mov	r7, r5
 8004618:	2000      	movs	r0, #0
 800461a:	250a      	movs	r5, #10
 800461c:	9a07      	ldr	r2, [sp, #28]
 800461e:	4639      	mov	r1, r7
 8004620:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004624:	3b30      	subs	r3, #48	; 0x30
 8004626:	2b09      	cmp	r3, #9
 8004628:	d94d      	bls.n	80046c6 <_svfiprintf_r+0x16e>
 800462a:	b1b8      	cbz	r0, 800465c <_svfiprintf_r+0x104>
 800462c:	e00f      	b.n	800464e <_svfiprintf_r+0xf6>
 800462e:	462f      	mov	r7, r5
 8004630:	e7b8      	b.n	80045a4 <_svfiprintf_r+0x4c>
 8004632:	4a40      	ldr	r2, [pc, #256]	; (8004734 <_svfiprintf_r+0x1dc>)
 8004634:	463d      	mov	r5, r7
 8004636:	1a80      	subs	r0, r0, r2
 8004638:	fa0b f000 	lsl.w	r0, fp, r0
 800463c:	4318      	orrs	r0, r3
 800463e:	9004      	str	r0, [sp, #16]
 8004640:	e7d3      	b.n	80045ea <_svfiprintf_r+0x92>
 8004642:	9a03      	ldr	r2, [sp, #12]
 8004644:	1d11      	adds	r1, r2, #4
 8004646:	6812      	ldr	r2, [r2, #0]
 8004648:	9103      	str	r1, [sp, #12]
 800464a:	2a00      	cmp	r2, #0
 800464c:	db01      	blt.n	8004652 <_svfiprintf_r+0xfa>
 800464e:	9207      	str	r2, [sp, #28]
 8004650:	e004      	b.n	800465c <_svfiprintf_r+0x104>
 8004652:	4252      	negs	r2, r2
 8004654:	f043 0302 	orr.w	r3, r3, #2
 8004658:	9207      	str	r2, [sp, #28]
 800465a:	9304      	str	r3, [sp, #16]
 800465c:	783b      	ldrb	r3, [r7, #0]
 800465e:	2b2e      	cmp	r3, #46	; 0x2e
 8004660:	d10c      	bne.n	800467c <_svfiprintf_r+0x124>
 8004662:	787b      	ldrb	r3, [r7, #1]
 8004664:	2b2a      	cmp	r3, #42	; 0x2a
 8004666:	d133      	bne.n	80046d0 <_svfiprintf_r+0x178>
 8004668:	9b03      	ldr	r3, [sp, #12]
 800466a:	3702      	adds	r7, #2
 800466c:	1d1a      	adds	r2, r3, #4
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	9203      	str	r2, [sp, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	bfb8      	it	lt
 8004676:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800467a:	9305      	str	r3, [sp, #20]
 800467c:	4d2e      	ldr	r5, [pc, #184]	; (8004738 <_svfiprintf_r+0x1e0>)
 800467e:	2203      	movs	r2, #3
 8004680:	7839      	ldrb	r1, [r7, #0]
 8004682:	4628      	mov	r0, r5
 8004684:	f7fd ffea 	bl	800265c <memchr>
 8004688:	b138      	cbz	r0, 800469a <_svfiprintf_r+0x142>
 800468a:	2340      	movs	r3, #64	; 0x40
 800468c:	1b40      	subs	r0, r0, r5
 800468e:	fa03 f000 	lsl.w	r0, r3, r0
 8004692:	9b04      	ldr	r3, [sp, #16]
 8004694:	3701      	adds	r7, #1
 8004696:	4303      	orrs	r3, r0
 8004698:	9304      	str	r3, [sp, #16]
 800469a:	7839      	ldrb	r1, [r7, #0]
 800469c:	2206      	movs	r2, #6
 800469e:	4827      	ldr	r0, [pc, #156]	; (800473c <_svfiprintf_r+0x1e4>)
 80046a0:	1c7e      	adds	r6, r7, #1
 80046a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046a6:	f7fd ffd9 	bl	800265c <memchr>
 80046aa:	2800      	cmp	r0, #0
 80046ac:	d038      	beq.n	8004720 <_svfiprintf_r+0x1c8>
 80046ae:	4b24      	ldr	r3, [pc, #144]	; (8004740 <_svfiprintf_r+0x1e8>)
 80046b0:	bb13      	cbnz	r3, 80046f8 <_svfiprintf_r+0x1a0>
 80046b2:	9b03      	ldr	r3, [sp, #12]
 80046b4:	3307      	adds	r3, #7
 80046b6:	f023 0307 	bic.w	r3, r3, #7
 80046ba:	3308      	adds	r3, #8
 80046bc:	9303      	str	r3, [sp, #12]
 80046be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046c0:	444b      	add	r3, r9
 80046c2:	9309      	str	r3, [sp, #36]	; 0x24
 80046c4:	e76d      	b.n	80045a2 <_svfiprintf_r+0x4a>
 80046c6:	fb05 3202 	mla	r2, r5, r2, r3
 80046ca:	2001      	movs	r0, #1
 80046cc:	460f      	mov	r7, r1
 80046ce:	e7a6      	b.n	800461e <_svfiprintf_r+0xc6>
 80046d0:	2300      	movs	r3, #0
 80046d2:	250a      	movs	r5, #10
 80046d4:	4619      	mov	r1, r3
 80046d6:	3701      	adds	r7, #1
 80046d8:	9305      	str	r3, [sp, #20]
 80046da:	4638      	mov	r0, r7
 80046dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046e0:	3a30      	subs	r2, #48	; 0x30
 80046e2:	2a09      	cmp	r2, #9
 80046e4:	d903      	bls.n	80046ee <_svfiprintf_r+0x196>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0c8      	beq.n	800467c <_svfiprintf_r+0x124>
 80046ea:	9105      	str	r1, [sp, #20]
 80046ec:	e7c6      	b.n	800467c <_svfiprintf_r+0x124>
 80046ee:	fb05 2101 	mla	r1, r5, r1, r2
 80046f2:	2301      	movs	r3, #1
 80046f4:	4607      	mov	r7, r0
 80046f6:	e7f0      	b.n	80046da <_svfiprintf_r+0x182>
 80046f8:	ab03      	add	r3, sp, #12
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	4622      	mov	r2, r4
 80046fe:	4b11      	ldr	r3, [pc, #68]	; (8004744 <_svfiprintf_r+0x1ec>)
 8004700:	a904      	add	r1, sp, #16
 8004702:	4640      	mov	r0, r8
 8004704:	f7fe f91c 	bl	8002940 <_printf_float>
 8004708:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800470c:	4681      	mov	r9, r0
 800470e:	d1d6      	bne.n	80046be <_svfiprintf_r+0x166>
 8004710:	89a3      	ldrh	r3, [r4, #12]
 8004712:	065b      	lsls	r3, r3, #25
 8004714:	f53f af35 	bmi.w	8004582 <_svfiprintf_r+0x2a>
 8004718:	9809      	ldr	r0, [sp, #36]	; 0x24
 800471a:	b01d      	add	sp, #116	; 0x74
 800471c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004720:	ab03      	add	r3, sp, #12
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	4622      	mov	r2, r4
 8004726:	4b07      	ldr	r3, [pc, #28]	; (8004744 <_svfiprintf_r+0x1ec>)
 8004728:	a904      	add	r1, sp, #16
 800472a:	4640      	mov	r0, r8
 800472c:	f7fe fbb4 	bl	8002e98 <_printf_i>
 8004730:	e7ea      	b.n	8004708 <_svfiprintf_r+0x1b0>
 8004732:	bf00      	nop
 8004734:	08004aac 	.word	0x08004aac
 8004738:	08004ab2 	.word	0x08004ab2
 800473c:	08004ab6 	.word	0x08004ab6
 8004740:	08002941 	.word	0x08002941
 8004744:	080044a3 	.word	0x080044a3

08004748 <__ascii_mbtowc>:
 8004748:	b082      	sub	sp, #8
 800474a:	b901      	cbnz	r1, 800474e <__ascii_mbtowc+0x6>
 800474c:	a901      	add	r1, sp, #4
 800474e:	b142      	cbz	r2, 8004762 <__ascii_mbtowc+0x1a>
 8004750:	b14b      	cbz	r3, 8004766 <__ascii_mbtowc+0x1e>
 8004752:	7813      	ldrb	r3, [r2, #0]
 8004754:	600b      	str	r3, [r1, #0]
 8004756:	7812      	ldrb	r2, [r2, #0]
 8004758:	1c10      	adds	r0, r2, #0
 800475a:	bf18      	it	ne
 800475c:	2001      	movne	r0, #1
 800475e:	b002      	add	sp, #8
 8004760:	4770      	bx	lr
 8004762:	4610      	mov	r0, r2
 8004764:	e7fb      	b.n	800475e <__ascii_mbtowc+0x16>
 8004766:	f06f 0001 	mvn.w	r0, #1
 800476a:	e7f8      	b.n	800475e <__ascii_mbtowc+0x16>

0800476c <_realloc_r>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	4607      	mov	r7, r0
 8004770:	4614      	mov	r4, r2
 8004772:	460e      	mov	r6, r1
 8004774:	b921      	cbnz	r1, 8004780 <_realloc_r+0x14>
 8004776:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800477a:	4611      	mov	r1, r2
 800477c:	f7fd bff4 	b.w	8002768 <_malloc_r>
 8004780:	b922      	cbnz	r2, 800478c <_realloc_r+0x20>
 8004782:	f7fd ffa5 	bl	80026d0 <_free_r>
 8004786:	4625      	mov	r5, r4
 8004788:	4628      	mov	r0, r5
 800478a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800478c:	f000 f821 	bl	80047d2 <_malloc_usable_size_r>
 8004790:	42a0      	cmp	r0, r4
 8004792:	d20f      	bcs.n	80047b4 <_realloc_r+0x48>
 8004794:	4621      	mov	r1, r4
 8004796:	4638      	mov	r0, r7
 8004798:	f7fd ffe6 	bl	8002768 <_malloc_r>
 800479c:	4605      	mov	r5, r0
 800479e:	2800      	cmp	r0, #0
 80047a0:	d0f2      	beq.n	8004788 <_realloc_r+0x1c>
 80047a2:	4631      	mov	r1, r6
 80047a4:	4622      	mov	r2, r4
 80047a6:	f7fd ff67 	bl	8002678 <memcpy>
 80047aa:	4631      	mov	r1, r6
 80047ac:	4638      	mov	r0, r7
 80047ae:	f7fd ff8f 	bl	80026d0 <_free_r>
 80047b2:	e7e9      	b.n	8004788 <_realloc_r+0x1c>
 80047b4:	4635      	mov	r5, r6
 80047b6:	e7e7      	b.n	8004788 <_realloc_r+0x1c>

080047b8 <__ascii_wctomb>:
 80047b8:	b149      	cbz	r1, 80047ce <__ascii_wctomb+0x16>
 80047ba:	2aff      	cmp	r2, #255	; 0xff
 80047bc:	bf8b      	itete	hi
 80047be:	238a      	movhi	r3, #138	; 0x8a
 80047c0:	700a      	strbls	r2, [r1, #0]
 80047c2:	6003      	strhi	r3, [r0, #0]
 80047c4:	2001      	movls	r0, #1
 80047c6:	bf88      	it	hi
 80047c8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80047cc:	4770      	bx	lr
 80047ce:	4608      	mov	r0, r1
 80047d0:	4770      	bx	lr

080047d2 <_malloc_usable_size_r>:
 80047d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047d6:	1f18      	subs	r0, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	bfbc      	itt	lt
 80047dc:	580b      	ldrlt	r3, [r1, r0]
 80047de:	18c0      	addlt	r0, r0, r3
 80047e0:	4770      	bx	lr
	...

080047e4 <_init>:
 80047e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e6:	bf00      	nop
 80047e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ea:	bc08      	pop	{r3}
 80047ec:	469e      	mov	lr, r3
 80047ee:	4770      	bx	lr

080047f0 <_fini>:
 80047f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f2:	bf00      	nop
 80047f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047f6:	bc08      	pop	{r3}
 80047f8:	469e      	mov	lr, r3
 80047fa:	4770      	bx	lr
